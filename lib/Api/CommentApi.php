<?php
/**
 * CommentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CommentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommentApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CommentApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addCommentForItem
     *
     * 
     *
     * @param string $fullpath Specify the full path where you want to add comment (required)
     * @param string $parent Specify the parent name (required)
     * @param string $isfile Specify 0 if the path is a folder , 1 if the path is a file (required)
     * @param string $text Add the comment you want to add (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function addCommentForItem($fullpath, $parent, $isfile, $text)
    {
        list($response) = $this->addCommentForItemWithHttpInfo($fullpath, $parent, $isfile, $text);
        return $response;
    }

    /**
     * Operation addCommentForItemWithHttpInfo
     *
     * 
     *
     * @param string $fullpath Specify the full path where you want to add comment (required)
     * @param string $parent Specify the parent name (required)
     * @param string $isfile Specify 0 if the path is a folder , 1 if the path is a file (required)
     * @param string $text Add the comment you want to add (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCommentForItemWithHttpInfo($fullpath, $parent, $isfile, $text)
    {
        // verify the required parameter 'fullpath' is set
        if ($fullpath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fullpath when calling addCommentForItem');
        }
        // verify the required parameter 'parent' is set
        if ($parent === null) {
            throw new \InvalidArgumentException('Missing the required parameter $parent when calling addCommentForItem');
        }
        // verify the required parameter 'isfile' is set
        if ($isfile === null) {
            throw new \InvalidArgumentException('Missing the required parameter $isfile when calling addCommentForItem');
        }
        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text when calling addCommentForItem');
        }
        // parse inputs
        $resourcePath = "/core/addcommentforitem";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($fullpath !== null) {
            $formParams['fullpath'] = $this->apiClient->getSerializer()->toFormValue($fullpath);
        }
        // form params
        if ($parent !== null) {
            $formParams['parent'] = $this->apiClient->getSerializer()->toFormValue($parent);
        }
        // form params
        if ($isfile !== null) {
            $formParams['isfile'] = $this->apiClient->getSerializer()->toFormValue($isfile);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = $this->apiClient->getSerializer()->toFormValue($text);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/addcommentforitem'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCommentsForItem
     *
     * 
     *
     * @param string $fullpath Specify the full path where you want to add comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getCommentsForItem($fullpath)
    {
        list($response) = $this->getCommentsForItemWithHttpInfo($fullpath);
        return $response;
    }

    /**
     * Operation getCommentsForItemWithHttpInfo
     *
     * 
     *
     * @param string $fullpath Specify the full path where you want to add comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentsForItemWithHttpInfo($fullpath)
    {
        // verify the required parameter 'fullpath' is set
        if ($fullpath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fullpath when calling getCommentsForItem');
        }
        // parse inputs
        $resourcePath = "/core/getcommentsforitem";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($fullpath !== null) {
            $queryParams['fullpath'] = $this->apiClient->getSerializer()->toQueryValue($fullpath);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getcommentsforitem'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeCommentForItem
     *
     * 
     *
     * @param string $fullpath Specify the full path where you want to remove the comment (required)
     * @param string $id Id number of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function removeCommentForItem($fullpath, $id)
    {
        list($response) = $this->removeCommentForItemWithHttpInfo($fullpath, $id);
        return $response;
    }

    /**
     * Operation removeCommentForItemWithHttpInfo
     *
     * 
     *
     * @param string $fullpath Specify the full path where you want to remove the comment (required)
     * @param string $id Id number of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeCommentForItemWithHttpInfo($fullpath, $id)
    {
        // verify the required parameter 'fullpath' is set
        if ($fullpath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fullpath when calling removeCommentForItem');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeCommentForItem');
        }
        // parse inputs
        $resourcePath = "/core/removecommentforitem";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($fullpath !== null) {
            $formParams['fullpath'] = $this->apiClient->getSerializer()->toFormValue($fullpath);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = $this->apiClient->getSerializer()->toFormValue($id);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/removecommentforitem'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

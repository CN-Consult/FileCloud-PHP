<?php
/**
 * SecurityPermissionApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SecurityPermissionApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SecurityPermissionApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SecurityPermissionApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addAclEntry
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $type Set as &#39;user&#39; | &#39;group&#39; to assign permissions to a user or a group (required)
     * @param string $value If type is &#39;user&#39; then specify the user email id, for &#39;group&#39; specify groud id (required)
     * @param string $perm R - Read, W - Write, D - Delete, S - Share (required)
     * @param string $flag Set as &#39;allow&#39; / &#39;deny&#39; (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function addAclEntry($path, $type, $value, $perm, $flag)
    {
        list($response) = $this->addAclEntryWithHttpInfo($path, $type, $value, $perm, $flag);
        return $response;
    }

    /**
     * Operation addAclEntryWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $type Set as &#39;user&#39; | &#39;group&#39; to assign permissions to a user or a group (required)
     * @param string $value If type is &#39;user&#39; then specify the user email id, for &#39;group&#39; specify groud id (required)
     * @param string $perm R - Read, W - Write, D - Delete, S - Share (required)
     * @param string $flag Set as &#39;allow&#39; / &#39;deny&#39; (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAclEntryWithHttpInfo($path, $type, $value, $perm, $flag)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling addAclEntry');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling addAclEntry');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addAclEntry');
        }
        // verify the required parameter 'perm' is set
        if ($perm === null) {
            throw new \InvalidArgumentException('Missing the required parameter $perm when calling addAclEntry');
        }
        // verify the required parameter 'flag' is set
        if ($flag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flag when calling addAclEntry');
        }
        // parse inputs
        $resourcePath = "/core/addaclentry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($path !== null) {
            $formParams['path'] = $this->apiClient->getSerializer()->toFormValue($path);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }
        // form params
        if ($perm !== null) {
            $formParams['perm'] = $this->apiClient->getSerializer()->toFormValue($perm);
        }
        // form params
        if ($flag !== null) {
            $formParams['flag'] = $this->apiClient->getSerializer()->toFormValue($flag);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/addaclentry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAcl
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteAcl($path)
    {
        list($response) = $this->deleteAclWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation deleteAclWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAclWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteAcl');
        }
        // parse inputs
        $resourcePath = "/core/deleteacl";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($path !== null) {
            $formParams['path'] = $this->apiClient->getSerializer()->toFormValue($path);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deleteacl'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAclEntry
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $type Set as &#39;user&#39; | &#39;group&#39; to assign permissions to a user or a group (required)
     * @param string $value If type is &#39;user&#39; then specify the user email id, for &#39;group&#39; specify groud id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteAclEntry($path, $type, $value)
    {
        list($response) = $this->deleteAclEntryWithHttpInfo($path, $type, $value);
        return $response;
    }

    /**
     * Operation deleteAclEntryWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $type Set as &#39;user&#39; | &#39;group&#39; to assign permissions to a user or a group (required)
     * @param string $value If type is &#39;user&#39; then specify the user email id, for &#39;group&#39; specify groud id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAclEntryWithHttpInfo($path, $type, $value)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteAclEntry');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling deleteAclEntry');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteAclEntry');
        }
        // parse inputs
        $resourcePath = "/core/deleteaclentry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($path !== null) {
            $formParams['path'] = $this->apiClient->getSerializer()->toFormValue($path);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deleteaclentry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAcl
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getAcl($path)
    {
        list($response) = $this->getAclWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation getAclWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAclWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getAcl');
        }
        // parse inputs
        $resourcePath = "/core/getacl";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getacl'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEffectiveAcl
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $emailid Emaild of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getEffectiveAcl($path, $emailid)
    {
        list($response) = $this->getEffectiveAclWithHttpInfo($path, $emailid);
        return $response;
    }

    /**
     * Operation getEffectiveAclWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $emailid Emaild of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEffectiveAclWithHttpInfo($path, $emailid)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getEffectiveAcl');
        }
        // verify the required parameter 'emailid' is set
        if ($emailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailid when calling getEffectiveAcl');
        }
        // parse inputs
        $resourcePath = "/core/geteffectiveacl";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($emailid !== null) {
            $queryParams['emailid'] = $this->apiClient->getSerializer()->toQueryValue($emailid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/geteffectiveacl'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setAclInheritance
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $inherit 1|0 Set 1 to enable inheritance and 0 to disable it (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function setAclInheritance($path, $inherit)
    {
        list($response) = $this->setAclInheritanceWithHttpInfo($path, $inherit);
        return $response;
    }

    /**
     * Operation setAclInheritanceWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the path (required)
     * @param string $inherit 1|0 Set 1 to enable inheritance and 0 to disable it (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAclInheritanceWithHttpInfo($path, $inherit)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling setAclInheritance');
        }
        // verify the required parameter 'inherit' is set
        if ($inherit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $inherit when calling setAclInheritance');
        }
        // parse inputs
        $resourcePath = "/core/setaclinheritance";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($path !== null) {
            $formParams['path'] = $this->apiClient->getSerializer()->toFormValue($path);
        }
        // form params
        if ($inherit !== null) {
            $formParams['inherit'] = $this->apiClient->getSerializer()->toFormValue($inherit);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/setaclinheritance'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

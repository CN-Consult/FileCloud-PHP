<?php
/**
 * RMCApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RMCApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RMCApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RMCApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation ackrmcCommands
     *
     * 
     *
     * @param string $commandRids Command Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function ackrmcCommands($commandRids)
    {
        list($response) = $this->ackrmcCommandsWithHttpInfo($commandRids);
        return $response;
    }

    /**
     * Operation ackrmcCommandsWithHttpInfo
     *
     * 
     *
     * @param string $commandRids Command Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function ackrmcCommandsWithHttpInfo($commandRids)
    {
        // verify the required parameter 'commandRids' is set
        if ($commandRids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $commandRids when calling ackrmcCommands');
        }
        // parse inputs
        $resourcePath = "/core/ackrmccommands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($commandRids !== null) {
            $formParams['command_rids'] = $this->apiClient->getSerializer()->toFormValue($commandRids);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/ackrmccommands'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation approveDeviceAccess
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remoteClientId Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function approveDeviceAccess($op, $remoteClientId)
    {
        list($response) = $this->approveDeviceAccessWithHttpInfo($op, $remoteClientId);
        return $response;
    }

    /**
     * Operation approveDeviceAccessWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remoteClientId Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveDeviceAccessWithHttpInfo($op, $remoteClientId)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling approveDeviceAccess');
        }
        // verify the required parameter 'remoteClientId' is set
        if ($remoteClientId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientId when calling approveDeviceAccess');
        }
        // parse inputs
        $resourcePath = "/core/approvedeviceaccess";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($op !== null) {
            $formParams['op'] = $this->apiClient->getSerializer()->toFormValue($op);
        }
        // form params
        if ($remoteClientId !== null) {
            $formParams['remote_client_id'] = $this->apiClient->getSerializer()->toFormValue($remoteClientId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/approvedeviceaccess'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDevice
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remoteClientId Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteDevice($op, $remoteClientId)
    {
        list($response) = $this->deleteDeviceWithHttpInfo($op, $remoteClientId);
        return $response;
    }

    /**
     * Operation deleteDeviceWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remoteClientId Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeviceWithHttpInfo($op, $remoteClientId)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling deleteDevice');
        }
        // verify the required parameter 'remoteClientId' is set
        if ($remoteClientId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientId when calling deleteDevice');
        }
        // parse inputs
        $resourcePath = "/core/deletedevice";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($op !== null) {
            $formParams['op'] = $this->apiClient->getSerializer()->toFormValue($op);
        }
        // form params
        if ($remoteClientId !== null) {
            $formParams['remote_client_id'] = $this->apiClient->getSerializer()->toFormValue($remoteClientId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deletedevice'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRmcClients
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $userid Username (required)
     * @param string $start Start index of records to retrieve, Note: Index starts from 0. Default 0 (required)
     * @param string $end Set to any number of record you want to view at once. Default 10 (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getRmcClients($op, $userid, $start, $end)
    {
        list($response) = $this->getRmcClientsWithHttpInfo($op, $userid, $start, $end);
        return $response;
    }

    /**
     * Operation getRmcClientsWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $userid Username (required)
     * @param string $start Start index of records to retrieve, Note: Index starts from 0. Default 0 (required)
     * @param string $end Set to any number of record you want to view at once. Default 10 (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRmcClientsWithHttpInfo($op, $userid, $start, $end)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling getRmcClients');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling getRmcClients');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling getRmcClients');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling getRmcClients');
        }
        // parse inputs
        $resourcePath = "/core/getrmcclients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getrmcclients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRmcCommands
     *
     * 
     *
     * @param string $userid User email id (required)
     * @param string $remoteClientId Remote Client Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getRmcCommands($userid, $remoteClientId)
    {
        list($response) = $this->getRmcCommandsWithHttpInfo($userid, $remoteClientId);
        return $response;
    }

    /**
     * Operation getRmcCommandsWithHttpInfo
     *
     * 
     *
     * @param string $userid User email id (required)
     * @param string $remoteClientId Remote Client Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRmcCommandsWithHttpInfo($userid, $remoteClientId)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling getRmcCommands');
        }
        // verify the required parameter 'remoteClientId' is set
        if ($remoteClientId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientId when calling getRmcCommands');
        }
        // parse inputs
        $resourcePath = "/core/getrmccommands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($remoteClientId !== null) {
            $queryParams['remote_client_id'] = $this->apiClient->getSerializer()->toQueryValue($remoteClientId);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getrmccommands'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation loginGuest
     *
     * 
     *
     * @param string $userid Specify the username (required)
     * @param string $password Specify the password (required)
     * @param string $remoteClientId Specify the unique identifier from the client (It can be the device MAC ID or the phone device ID. It just needs to be an unique number that identifies the device). (required)
     * @param string $remoteClientDispName Specify the client device name (required)
     * @param string $remoteClientApiLevel Set the api-level to 4 (latest required client api-level is 4) (required)
     * @param string $remoteClientOsType Specify the client OS type (required)
     * @param string $remoteClientAppVersion Specify the client app version (required)
     * @param string $remoteClientOsVersion Specify the client OS version (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function loginGuest($userid, $password, $remoteClientId, $remoteClientDispName, $remoteClientApiLevel, $remoteClientOsType, $remoteClientAppVersion, $remoteClientOsVersion)
    {
        list($response) = $this->loginGuestWithHttpInfo($userid, $password, $remoteClientId, $remoteClientDispName, $remoteClientApiLevel, $remoteClientOsType, $remoteClientAppVersion, $remoteClientOsVersion);
        return $response;
    }

    /**
     * Operation loginGuestWithHttpInfo
     *
     * 
     *
     * @param string $userid Specify the username (required)
     * @param string $password Specify the password (required)
     * @param string $remoteClientId Specify the unique identifier from the client (It can be the device MAC ID or the phone device ID. It just needs to be an unique number that identifies the device). (required)
     * @param string $remoteClientDispName Specify the client device name (required)
     * @param string $remoteClientApiLevel Set the api-level to 4 (latest required client api-level is 4) (required)
     * @param string $remoteClientOsType Specify the client OS type (required)
     * @param string $remoteClientAppVersion Specify the client app version (required)
     * @param string $remoteClientOsVersion Specify the client OS version (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginGuestWithHttpInfo($userid, $password, $remoteClientId, $remoteClientDispName, $remoteClientApiLevel, $remoteClientOsType, $remoteClientAppVersion, $remoteClientOsVersion)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling loginGuest');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling loginGuest');
        }
        // verify the required parameter 'remoteClientId' is set
        if ($remoteClientId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientId when calling loginGuest');
        }
        // verify the required parameter 'remoteClientDispName' is set
        if ($remoteClientDispName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientDispName when calling loginGuest');
        }
        // verify the required parameter 'remoteClientApiLevel' is set
        if ($remoteClientApiLevel === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientApiLevel when calling loginGuest');
        }
        // verify the required parameter 'remoteClientOsType' is set
        if ($remoteClientOsType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientOsType when calling loginGuest');
        }
        // verify the required parameter 'remoteClientAppVersion' is set
        if ($remoteClientAppVersion === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientAppVersion when calling loginGuest');
        }
        // verify the required parameter 'remoteClientOsVersion' is set
        if ($remoteClientOsVersion === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remoteClientOsVersion when calling loginGuest');
        }
        // parse inputs
        $resourcePath = "/core/loginguest";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userid !== null) {
            $formParams['userid'] = $this->apiClient->getSerializer()->toFormValue($userid);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        // form params
        if ($remoteClientId !== null) {
            $formParams['remote_client_id'] = $this->apiClient->getSerializer()->toFormValue($remoteClientId);
        }
        // form params
        if ($remoteClientDispName !== null) {
            $formParams['remote_client_disp_name'] = $this->apiClient->getSerializer()->toFormValue($remoteClientDispName);
        }
        // form params
        if ($remoteClientApiLevel !== null) {
            $formParams['remote_client_api_level'] = $this->apiClient->getSerializer()->toFormValue($remoteClientApiLevel);
        }
        // form params
        if ($remoteClientOsType !== null) {
            $formParams['remote_client_os_type'] = $this->apiClient->getSerializer()->toFormValue($remoteClientOsType);
        }
        // form params
        if ($remoteClientAppVersion !== null) {
            $formParams['remote_client_app_version'] = $this->apiClient->getSerializer()->toFormValue($remoteClientAppVersion);
        }
        // form params
        if ($remoteClientOsVersion !== null) {
            $formParams['remote_client_os_version'] = $this->apiClient->getSerializer()->toFormValue($remoteClientOsVersion);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/loginguest'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation requestDeviceAccess
     *
     * 
     *
     * @param string $userid Username (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function requestDeviceAccess($userid)
    {
        list($response) = $this->requestDeviceAccessWithHttpInfo($userid);
        return $response;
    }

    /**
     * Operation requestDeviceAccessWithHttpInfo
     *
     * 
     *
     * @param string $userid Username (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestDeviceAccessWithHttpInfo($userid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling requestDeviceAccess');
        }
        // parse inputs
        $resourcePath = "/core/requestdeviceaccess";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userid !== null) {
            $formParams['userid'] = $this->apiClient->getSerializer()->toFormValue($userid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/requestdeviceaccess'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

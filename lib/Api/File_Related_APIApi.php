<?php
/**
 * File_Related_APIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * File_Related_APIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class File_Related_APIApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return File_Related_APIApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation appExplorerCreatefolderPost
     *
     * 
     *
     * @param string $name Name of the folder to be created (required)
     * @param string $path Path where you want to create the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CreatefolderResponse[]
     */
    public function appExplorerCreatefolderPost($name, $path)
    {
        list($response) = $this->appExplorerCreatefolderPostWithHttpInfo($name, $path);
        return $response;
    }

    /**
     * Operation appExplorerCreatefolderPostWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the folder to be created (required)
     * @param string $path Path where you want to create the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CreatefolderResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function appExplorerCreatefolderPostWithHttpInfo($name, $path)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling appExplorerCreatefolderPost');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling appExplorerCreatefolderPost');
        }
        // parse inputs
        $resourcePath = "/app/explorer/createfolder";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CreatefolderResponse[]',
                '/app/explorer/createfolder'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CreatefolderResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CreatefolderResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation appSearchextPost
     *
     * 
     *
     * @param string $op Operantion name - searchcontent (required)
     * @param string $searchname Specify the filename to be searched. (required)
     * @param string $searchtext Specify the text to search (required)
     * @param string $searchloc (optional) Specify the directory path in which you want to perform search (if not specified user&#39;s home directory will be the path) (optional)
     * @param string $minsize (optional)Specify the size in kb, the search will show files that is greater than and equal to the size mentioned. (optional)
     * @param string $maxsize (optional)Specify the size in kb, the search will show files that is lesser than and equal to the size mentioned. (optional)
     * @param string $modifiedstart (optional)Specify the value in date format, the search will show files that was created on and after the date mentioned (optional)
     * @param string $modifiedend (optional)Specify the value in date format, the search will show files that was created before the date mentioned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SearchcontentResponse[]
     */
    public function appSearchextPost($op, $searchname, $searchtext, $searchloc = null, $minsize = null, $maxsize = null, $modifiedstart = null, $modifiedend = null)
    {
        list($response) = $this->appSearchextPostWithHttpInfo($op, $searchname, $searchtext, $searchloc, $minsize, $maxsize, $modifiedstart, $modifiedend);
        return $response;
    }

    /**
     * Operation appSearchextPostWithHttpInfo
     *
     * 
     *
     * @param string $op Operantion name - searchcontent (required)
     * @param string $searchname Specify the filename to be searched. (required)
     * @param string $searchtext Specify the text to search (required)
     * @param string $searchloc (optional) Specify the directory path in which you want to perform search (if not specified user&#39;s home directory will be the path) (optional)
     * @param string $minsize (optional)Specify the size in kb, the search will show files that is greater than and equal to the size mentioned. (optional)
     * @param string $maxsize (optional)Specify the size in kb, the search will show files that is lesser than and equal to the size mentioned. (optional)
     * @param string $modifiedstart (optional)Specify the value in date format, the search will show files that was created on and after the date mentioned (optional)
     * @param string $modifiedend (optional)Specify the value in date format, the search will show files that was created before the date mentioned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SearchcontentResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function appSearchextPostWithHttpInfo($op, $searchname, $searchtext, $searchloc = null, $minsize = null, $maxsize = null, $modifiedstart = null, $modifiedend = null)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling appSearchextPost');
        }
        // verify the required parameter 'searchname' is set
        if ($searchname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $searchname when calling appSearchextPost');
        }
        // verify the required parameter 'searchtext' is set
        if ($searchtext === null) {
            throw new \InvalidArgumentException('Missing the required parameter $searchtext when calling appSearchextPost');
        }
        // parse inputs
        $resourcePath = "/app/searchext/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($searchname !== null) {
            $queryParams['searchname'] = $this->apiClient->getSerializer()->toQueryValue($searchname);
        }
        // query params
        if ($searchtext !== null) {
            $queryParams['searchtext'] = $this->apiClient->getSerializer()->toQueryValue($searchtext);
        }
        // query params
        if ($searchloc !== null) {
            $queryParams['searchloc'] = $this->apiClient->getSerializer()->toQueryValue($searchloc);
        }
        // query params
        if ($minsize !== null) {
            $queryParams['minsize'] = $this->apiClient->getSerializer()->toQueryValue($minsize);
        }
        // query params
        if ($maxsize !== null) {
            $queryParams['maxsize'] = $this->apiClient->getSerializer()->toQueryValue($maxsize);
        }
        // query params
        if ($modifiedstart !== null) {
            $queryParams['modifiedstart'] = $this->apiClient->getSerializer()->toQueryValue($modifiedstart);
        }
        // query params
        if ($modifiedend !== null) {
            $queryParams['modifiedend'] = $this->apiClient->getSerializer()->toQueryValue($modifiedend);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SearchcontentResponse[]',
                '/app/searchext/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SearchcontentResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SearchcontentResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreCopyfilePost
     *
     * 
     *
     * @param string $copyto Path where the files has to be copied (required)
     * @param string $path Path where the files reside (required)
     * @param string $name Name of the image file, eg: /Path/Image file name. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CopyfileResponse[]
     */
    public function coreCopyfilePost($copyto, $path, $name)
    {
        list($response) = $this->coreCopyfilePostWithHttpInfo($copyto, $path, $name);
        return $response;
    }

    /**
     * Operation coreCopyfilePostWithHttpInfo
     *
     * 
     *
     * @param string $copyto Path where the files has to be copied (required)
     * @param string $path Path where the files reside (required)
     * @param string $name Name of the image file, eg: /Path/Image file name. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CopyfileResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreCopyfilePostWithHttpInfo($copyto, $path, $name)
    {
        // verify the required parameter 'copyto' is set
        if ($copyto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $copyto when calling coreCopyfilePost');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreCopyfilePost');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling coreCopyfilePost');
        }
        // parse inputs
        $resourcePath = "/core/copyfile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($copyto !== null) {
            $queryParams['copyto'] = $this->apiClient->getSerializer()->toQueryValue($copyto);
        }
        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CopyfileResponse[]',
                '/core/copyfile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CopyfileResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CopyfileResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDeletefilePost
     *
     * 
     *
     * @param string $path Path of the file where it resides. (required)
     * @param string $name Name of the file to be deleted. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DeletefileResponse[]
     */
    public function coreDeletefilePost($path, $name)
    {
        list($response) = $this->coreDeletefilePostWithHttpInfo($path, $name);
        return $response;
    }

    /**
     * Operation coreDeletefilePostWithHttpInfo
     *
     * 
     *
     * @param string $path Path of the file where it resides. (required)
     * @param string $name Name of the file to be deleted. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DeletefileResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDeletefilePostWithHttpInfo($path, $name)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreDeletefilePost');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling coreDeletefilePost');
        }
        // parse inputs
        $resourcePath = "/core/deletefile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DeletefileResponse[]',
                '/core/deletefile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DeletefileResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DeletefileResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDeletepartialuploadsPost
     *
     * 
     *
     * @param int $ignorets Set value to 1 to delete partial uploads using API call (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DeletepartialuploadsResponse[]
     */
    public function coreDeletepartialuploadsPost($ignorets)
    {
        list($response) = $this->coreDeletepartialuploadsPostWithHttpInfo($ignorets);
        return $response;
    }

    /**
     * Operation coreDeletepartialuploadsPostWithHttpInfo
     *
     * 
     *
     * @param int $ignorets Set value to 1 to delete partial uploads using API call (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DeletepartialuploadsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDeletepartialuploadsPostWithHttpInfo($ignorets)
    {
        // verify the required parameter 'ignorets' is set
        if ($ignorets === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ignorets when calling coreDeletepartialuploadsPost');
        }
        // parse inputs
        $resourcePath = "/core/deletepartialuploads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($ignorets !== null) {
            $queryParams['ignorets'] = $this->apiClient->getSerializer()->toQueryValue($ignorets);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DeletepartialuploadsResponse[]',
                '/core/deletepartialuploads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DeletepartialuploadsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DeletepartialuploadsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDoceditPost
     *
     * 
     *
     * @param string $path Path of the file where it resides (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreDoceditPost($path)
    {
        list($response) = $this->coreDoceditPostWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation coreDoceditPostWithHttpInfo
     *
     * 
     *
     * @param string $path Path of the file where it resides (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDoceditPostWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreDoceditPost');
        }
        // parse inputs
        $resourcePath = "/core/docedit";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/docedit'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreDownloadfileGet
     *
     * 
     *
     * @param string $filepath Path of the file where it resides and with the name of the file to be downloaded. (required)
     * @param string $filename Name of the file to be downloaded (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreDownloadfileGet($filepath, $filename)
    {
        list($response) = $this->coreDownloadfileGetWithHttpInfo($filepath, $filename);
        return $response;
    }

    /**
     * Operation coreDownloadfileGetWithHttpInfo
     *
     * 
     *
     * @param string $filepath Path of the file where it resides and with the name of the file to be downloaded. (required)
     * @param string $filename Name of the file to be downloaded (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDownloadfileGetWithHttpInfo($filepath, $filename)
    {
        // verify the required parameter 'filepath' is set
        if ($filepath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filepath when calling coreDownloadfileGet');
        }
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling coreDownloadfileGet');
        }
        // parse inputs
        $resourcePath = "/core/downloadfile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($filepath !== null) {
            $queryParams['filepath'] = $this->apiClient->getSerializer()->toQueryValue($filepath);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/downloadfile'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreDownloadfilemultiGet
     *
     * 
     *
     * @param float $count Number of files to be downloaded (required)
     * @param string $filepath Path of the file where it resides. (required)
     * @param string $fn1 First file name selected for download (required)
     * @param string $fn2 Second file name selected for download {To downlaod more keep adding param&#39;s like fn3, fn4..} (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreDownloadfilemultiGet($count, $filepath, $fn1, $fn2)
    {
        list($response) = $this->coreDownloadfilemultiGetWithHttpInfo($count, $filepath, $fn1, $fn2);
        return $response;
    }

    /**
     * Operation coreDownloadfilemultiGetWithHttpInfo
     *
     * 
     *
     * @param float $count Number of files to be downloaded (required)
     * @param string $filepath Path of the file where it resides. (required)
     * @param string $fn1 First file name selected for download (required)
     * @param string $fn2 Second file name selected for download {To downlaod more keep adding param&#39;s like fn3, fn4..} (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDownloadfilemultiGetWithHttpInfo($count, $filepath, $fn1, $fn2)
    {
        // verify the required parameter 'count' is set
        if ($count === null) {
            throw new \InvalidArgumentException('Missing the required parameter $count when calling coreDownloadfilemultiGet');
        }
        // verify the required parameter 'filepath' is set
        if ($filepath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filepath when calling coreDownloadfilemultiGet');
        }
        // verify the required parameter 'fn1' is set
        if ($fn1 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fn1 when calling coreDownloadfilemultiGet');
        }
        // verify the required parameter 'fn2' is set
        if ($fn2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fn2 when calling coreDownloadfilemultiGet');
        }
        // parse inputs
        $resourcePath = "/core/downloadfilemulti";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // query params
        if ($filepath !== null) {
            $queryParams['filepath'] = $this->apiClient->getSerializer()->toQueryValue($filepath);
        }
        // query params
        if ($fn1 !== null) {
            $queryParams['fn1'] = $this->apiClient->getSerializer()->toQueryValue($fn1);
        }
        // query params
        if ($fn2 !== null) {
            $queryParams['fn2'] = $this->apiClient->getSerializer()->toQueryValue($fn2);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/downloadfilemulti'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreEmptyrecyclebinPost
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\EmptyrecyclebinResponse[]
     */
    public function coreEmptyrecyclebinPost()
    {
        list($response) = $this->coreEmptyrecyclebinPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation coreEmptyrecyclebinPostWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\EmptyrecyclebinResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreEmptyrecyclebinPostWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/emptyrecyclebin";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\EmptyrecyclebinResponse[]',
                '/core/emptyrecyclebin'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\EmptyrecyclebinResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\EmptyrecyclebinResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreFileexistsPost
     *
     * 
     *
     * @param string $file Path of the file where it resides (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FileexistsResponse[]
     */
    public function coreFileexistsPost($file)
    {
        list($response) = $this->coreFileexistsPostWithHttpInfo($file);
        return $response;
    }

    /**
     * Operation coreFileexistsPostWithHttpInfo
     *
     * 
     *
     * @param string $file Path of the file where it resides (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FileexistsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreFileexistsPostWithHttpInfo($file)
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling coreFileexistsPost');
        }
        // parse inputs
        $resourcePath = "/core/fileexists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($file !== null) {
            $queryParams['file'] = $this->apiClient->getSerializer()->toQueryValue($file);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FileexistsResponse[]',
                '/core/fileexists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FileexistsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FileexistsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreFileinfoPost
     *
     * 
     *
     * @param string $path Path of file to be specified (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FileinfoResponse[]
     */
    public function coreFileinfoPost($path)
    {
        list($response) = $this->coreFileinfoPostWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation coreFileinfoPostWithHttpInfo
     *
     * 
     *
     * @param string $path Path of file to be specified (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FileinfoResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreFileinfoPostWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreFileinfoPost');
        }
        // parse inputs
        $resourcePath = "/core/fileinfo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FileinfoResponse[]',
                '/core/fileinfo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FileinfoResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FileinfoResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetaccessdetailsforpathGet
     *
     * 
     *
     * @param string $fullpath Path of the file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetaccessdetailsforpathResponse[]
     */
    public function coreGetaccessdetailsforpathGet($fullpath)
    {
        list($response) = $this->coreGetaccessdetailsforpathGetWithHttpInfo($fullpath);
        return $response;
    }

    /**
     * Operation coreGetaccessdetailsforpathGetWithHttpInfo
     *
     * 
     *
     * @param string $fullpath Path of the file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetaccessdetailsforpathResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetaccessdetailsforpathGetWithHttpInfo($fullpath)
    {
        // verify the required parameter 'fullpath' is set
        if ($fullpath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fullpath when calling coreGetaccessdetailsforpathGet');
        }
        // parse inputs
        $resourcePath = "/core/getaccessdetailsforpath";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($fullpath !== null) {
            $queryParams['fullpath'] = $this->apiClient->getSerializer()->toQueryValue($fullpath);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetaccessdetailsforpathResponse[]',
                '/core/getaccessdetailsforpath'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetaccessdetailsforpathResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetaccessdetailsforpathResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetfilelistGet
     *
     * 
     *
     * @param string $path Path Name to be specified, If the user wants to access MyFiles then use the username as path. (required)
     * @param string $sortdir Set it to 1 for ascending sort , -1 for descending sort (required)
     * @param string $sortby You can sort by name, date or size. (required)
     * @param string $start Start index of records to retrieve, Note: Index starts from 0. Default 0 (required)
     * @param string $limit Set to any number of record you want to view at once. Default 10 (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetfilelistResponse[]
     */
    public function coreGetfilelistGet($path, $sortdir, $sortby, $start, $limit)
    {
        list($response) = $this->coreGetfilelistGetWithHttpInfo($path, $sortdir, $sortby, $start, $limit);
        return $response;
    }

    /**
     * Operation coreGetfilelistGetWithHttpInfo
     *
     * 
     *
     * @param string $path Path Name to be specified, If the user wants to access MyFiles then use the username as path. (required)
     * @param string $sortdir Set it to 1 for ascending sort , -1 for descending sort (required)
     * @param string $sortby You can sort by name, date or size. (required)
     * @param string $start Start index of records to retrieve, Note: Index starts from 0. Default 0 (required)
     * @param string $limit Set to any number of record you want to view at once. Default 10 (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetfilelistResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetfilelistGetWithHttpInfo($path, $sortdir, $sortby, $start, $limit)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreGetfilelistGet');
        }
        // verify the required parameter 'sortdir' is set
        if ($sortdir === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sortdir when calling coreGetfilelistGet');
        }
        // verify the required parameter 'sortby' is set
        if ($sortby === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sortby when calling coreGetfilelistGet');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling coreGetfilelistGet');
        }
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $limit when calling coreGetfilelistGet');
        }
        // parse inputs
        $resourcePath = "/core/getfilelist";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($sortdir !== null) {
            $queryParams['sortdir'] = $this->apiClient->getSerializer()->toQueryValue($sortdir);
        }
        // query params
        if ($sortby !== null) {
            $queryParams['sortby'] = $this->apiClient->getSerializer()->toQueryValue($sortby);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetfilelistResponse[]',
                '/core/getfilelist'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetfilelistResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetfilelistResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetfolderpropertiesGet
     *
     * 
     *
     * @param string $path Path of the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetfolderpropertiesResponse[]
     */
    public function coreGetfolderpropertiesGet($path)
    {
        list($response) = $this->coreGetfolderpropertiesGetWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation coreGetfolderpropertiesGetWithHttpInfo
     *
     * 
     *
     * @param string $path Path of the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetfolderpropertiesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetfolderpropertiesGetWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreGetfolderpropertiesGet');
        }
        // parse inputs
        $resourcePath = "/core/getfolderproperties";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetfolderpropertiesResponse[]',
                '/core/getfolderproperties'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetfolderpropertiesResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetfolderpropertiesResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreRenamefilePost
     *
     * 
     *
     * @param string $path Path of the file where it resides. (required)
     * @param string $name Name of the file to be renamed. (required)
     * @param string $newname Name of the file with the path where the file has to be moved. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RenamefileResponse[]
     */
    public function coreRenamefilePost($path, $name, $newname)
    {
        list($response) = $this->coreRenamefilePostWithHttpInfo($path, $name, $newname);
        return $response;
    }

    /**
     * Operation coreRenamefilePostWithHttpInfo
     *
     * 
     *
     * @param string $path Path of the file where it resides. (required)
     * @param string $name Name of the file to be renamed. (required)
     * @param string $newname Name of the file with the path where the file has to be moved. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RenamefileResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreRenamefilePostWithHttpInfo($path, $name, $newname)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreRenamefilePost');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling coreRenamefilePost');
        }
        // verify the required parameter 'newname' is set
        if ($newname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newname when calling coreRenamefilePost');
        }
        // parse inputs
        $resourcePath = "/core/renamefile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($newname !== null) {
            $queryParams['newname'] = $this->apiClient->getSerializer()->toQueryValue($newname);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RenamefileResponse[]',
                '/core/renamefile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RenamefileResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RenamefileResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreRenameormovePost
     *
     * 
     *
     * @param string $fromname Name of the file with the path where the file resides. (required)
     * @param string $toname Name of the file with the path where the file has to be moved. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RenameormoveResponse[]
     */
    public function coreRenameormovePost($fromname, $toname)
    {
        list($response) = $this->coreRenameormovePostWithHttpInfo($fromname, $toname);
        return $response;
    }

    /**
     * Operation coreRenameormovePostWithHttpInfo
     *
     * 
     *
     * @param string $fromname Name of the file with the path where the file resides. (required)
     * @param string $toname Name of the file with the path where the file has to be moved. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RenameormoveResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreRenameormovePostWithHttpInfo($fromname, $toname)
    {
        // verify the required parameter 'fromname' is set
        if ($fromname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fromname when calling coreRenameormovePost');
        }
        // verify the required parameter 'toname' is set
        if ($toname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toname when calling coreRenameormovePost');
        }
        // parse inputs
        $resourcePath = "/core/renameormove";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($fromname !== null) {
            $queryParams['fromname'] = $this->apiClient->getSerializer()->toQueryValue($fromname);
        }
        // query params
        if ($toname !== null) {
            $queryParams['toname'] = $this->apiClient->getSerializer()->toQueryValue($toname);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RenameormoveResponse[]',
                '/core/renameormove'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RenameormoveResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RenameormoveResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSearchPost
     *
     * 
     *
     * @param string $keyword Keyword to search (required)
     * @param string $location Specify the directory path in which you want to perform search. (required)
     * @param string $minsize (optional)Specify the size in kb, the search will show files that is greater than and equal to the size mentioned. (optional)
     * @param string $maxsize (optional)Specify the size in kb, the search will show files that is lesser than and equal to the size mentioned. (optional)
     * @param string $modifiedstart (optional)Specify the value in date format, the search will show files that was created on and after the date mentioned (optional)
     * @param string $modifiedend (optional)Specify the value in date format, the search will show files that was created before the date mentioned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SearchResponse[]
     */
    public function coreSearchPost($keyword, $location, $minsize = null, $maxsize = null, $modifiedstart = null, $modifiedend = null)
    {
        list($response) = $this->coreSearchPostWithHttpInfo($keyword, $location, $minsize, $maxsize, $modifiedstart, $modifiedend);
        return $response;
    }

    /**
     * Operation coreSearchPostWithHttpInfo
     *
     * 
     *
     * @param string $keyword Keyword to search (required)
     * @param string $location Specify the directory path in which you want to perform search. (required)
     * @param string $minsize (optional)Specify the size in kb, the search will show files that is greater than and equal to the size mentioned. (optional)
     * @param string $maxsize (optional)Specify the size in kb, the search will show files that is lesser than and equal to the size mentioned. (optional)
     * @param string $modifiedstart (optional)Specify the value in date format, the search will show files that was created on and after the date mentioned (optional)
     * @param string $modifiedend (optional)Specify the value in date format, the search will show files that was created before the date mentioned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SearchResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSearchPostWithHttpInfo($keyword, $location, $minsize = null, $maxsize = null, $modifiedstart = null, $modifiedend = null)
    {
        // verify the required parameter 'keyword' is set
        if ($keyword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $keyword when calling coreSearchPost');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling coreSearchPost');
        }
        // parse inputs
        $resourcePath = "/core/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($minsize !== null) {
            $queryParams['minsize'] = $this->apiClient->getSerializer()->toQueryValue($minsize);
        }
        // query params
        if ($maxsize !== null) {
            $queryParams['maxsize'] = $this->apiClient->getSerializer()->toQueryValue($maxsize);
        }
        // query params
        if ($modifiedstart !== null) {
            $queryParams['modifiedstart'] = $this->apiClient->getSerializer()->toQueryValue($modifiedstart);
        }
        // query params
        if ($modifiedend !== null) {
            $queryParams['modifiedend'] = $this->apiClient->getSerializer()->toQueryValue($modifiedend);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SearchResponse[]',
                '/core/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SearchResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SearchResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreUploadPost
     *
     * 
     *
     * @param string $appname Agent use to upload files to system (required)
     * @param string $path Specify the path where you want to upload the file (required)
     * @param float $offset Offset set to 0 (required)
     * @param float $complete Complete set to 1 (required)
     * @param string $filename File name to be uploaded inside the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreUploadPost($appname, $path, $offset, $complete, $filename)
    {
        list($response) = $this->coreUploadPostWithHttpInfo($appname, $path, $offset, $complete, $filename);
        return $response;
    }

    /**
     * Operation coreUploadPostWithHttpInfo
     *
     * 
     *
     * @param string $appname Agent use to upload files to system (required)
     * @param string $path Specify the path where you want to upload the file (required)
     * @param float $offset Offset set to 0 (required)
     * @param float $complete Complete set to 1 (required)
     * @param string $filename File name to be uploaded inside the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreUploadPostWithHttpInfo($appname, $path, $offset, $complete, $filename)
    {
        // verify the required parameter 'appname' is set
        if ($appname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appname when calling coreUploadPost');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreUploadPost');
        }
        // verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offset when calling coreUploadPost');
        }
        // verify the required parameter 'complete' is set
        if ($complete === null) {
            throw new \InvalidArgumentException('Missing the required parameter $complete when calling coreUploadPost');
        }
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling coreUploadPost');
        }
        // parse inputs
        $resourcePath = "/core/upload";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($appname !== null) {
            $queryParams['appname'] = $this->apiClient->getSerializer()->toQueryValue($appname);
        }
        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($complete !== null) {
            $queryParams['complete'] = $this->apiClient->getSerializer()->toQueryValue($complete);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/upload'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}

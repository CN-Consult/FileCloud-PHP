<?php
/**
 * ShareApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ShareApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShareApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ShareApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addGroupToShare
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function addGroupToShare($groupid, $shareid)
    {
        list($response) = $this->addGroupToShareWithHttpInfo($groupid, $shareid);
        return $response;
    }

    /**
     * Operation addGroupToShareWithHttpInfo
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addGroupToShareWithHttpInfo($groupid, $shareid)
    {
        // verify the required parameter 'groupid' is set
        if ($groupid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupid when calling addGroupToShare');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling addGroupToShare');
        }
        // parse inputs
        $resourcePath = "/core/addgrouptoshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($groupid !== null) {
            $formParams['groupid'] = $this->apiClient->getSerializer()->toFormValue($groupid);
        }
        // form params
        if ($shareid !== null) {
            $formParams['shareid'] = $this->apiClient->getSerializer()->toFormValue($shareid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/addgrouptoshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addUserToShare
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function addUserToShare($userid, $shareid)
    {
        list($response) = $this->addUserToShareWithHttpInfo($userid, $shareid);
        return $response;
    }

    /**
     * Operation addUserToShareWithHttpInfo
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserToShareWithHttpInfo($userid, $shareid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling addUserToShare');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling addUserToShare');
        }
        // parse inputs
        $resourcePath = "/core/addusertoshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userid !== null) {
            $formParams['userid'] = $this->apiClient->getSerializer()->toFormValue($userid);
        }
        // form params
        if ($shareid !== null) {
            $formParams['shareid'] = $this->apiClient->getSerializer()->toFormValue($shareid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/addusertoshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProfileOnInvite
     *
     * 
     *
     * @param string $emailid Specify the emailid of the user to invite (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function createProfileOnInvite($emailid)
    {
        list($response) = $this->createProfileOnInviteWithHttpInfo($emailid);
        return $response;
    }

    /**
     * Operation createProfileOnInviteWithHttpInfo
     *
     * 
     *
     * @param string $emailid Specify the emailid of the user to invite (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProfileOnInviteWithHttpInfo($emailid)
    {
        // verify the required parameter 'emailid' is set
        if ($emailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailid when calling createProfileOnInvite');
        }
        // parse inputs
        $resourcePath = "/core/createprofileoninvite";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($emailid !== null) {
            $formParams['emailid'] = $this->apiClient->getSerializer()->toFormValue($emailid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/createprofileoninvite'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteGroupFromShare
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteGroupFromShare($groupid, $shareid)
    {
        list($response) = $this->deleteGroupFromShareWithHttpInfo($groupid, $shareid);
        return $response;
    }

    /**
     * Operation deleteGroupFromShareWithHttpInfo
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupFromShareWithHttpInfo($groupid, $shareid)
    {
        // verify the required parameter 'groupid' is set
        if ($groupid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupid when calling deleteGroupFromShare');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling deleteGroupFromShare');
        }
        // parse inputs
        $resourcePath = "/core/deletegroupfromshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($groupid !== null) {
            $formParams['groupid'] = $this->apiClient->getSerializer()->toFormValue($groupid);
        }
        // form params
        if ($shareid !== null) {
            $formParams['shareid'] = $this->apiClient->getSerializer()->toFormValue($shareid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deletegroupfromshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteShare
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteShare($shareid)
    {
        list($response) = $this->deleteShareWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation deleteShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShareWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling deleteShare');
        }
        // parse inputs
        $resourcePath = "/core/deleteshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($shareid !== null) {
            $formParams['shareid'] = $this->apiClient->getSerializer()->toFormValue($shareid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deleteshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUserFromShare
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteUserFromShare($userid, $shareid)
    {
        list($response) = $this->deleteUserFromShareWithHttpInfo($userid, $shareid);
        return $response;
    }

    /**
     * Operation deleteUserFromShareWithHttpInfo
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserFromShareWithHttpInfo($userid, $shareid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling deleteUserFromShare');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling deleteUserFromShare');
        }
        // parse inputs
        $resourcePath = "/core/deleteuserfromshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($userid !== null) {
            $formParams['userid'] = $this->apiClient->getSerializer()->toFormValue($userid);
        }
        // form params
        if ($shareid !== null) {
            $formParams['shareid'] = $this->apiClient->getSerializer()->toFormValue($shareid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deleteuserfromshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailSubject
     *
     * 
     *
     * @param string $op Operation (required)
     * @param string $param Template name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getEmailSubject($op, $param)
    {
        list($response) = $this->getEmailSubjectWithHttpInfo($op, $param);
        return $response;
    }

    /**
     * Operation getEmailSubjectWithHttpInfo
     *
     * 
     *
     * @param string $op Operation (required)
     * @param string $param Template name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSubjectWithHttpInfo($op, $param)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling getEmailSubject');
        }
        // verify the required parameter 'param' is set
        if ($param === null) {
            throw new \InvalidArgumentException('Missing the required parameter $param when calling getEmailSubject');
        }
        // parse inputs
        $resourcePath = "/core/getemailsubject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($param !== null) {
            $queryParams['param'] = $this->apiClient->getSerializer()->toQueryValue($param);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getemailsubject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailTemplate
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $templatename Template Name (required)
     * @param string $sharename Share Name (required)
     * @param string $shareurl Share URL (required)
     * @param string $toemailid To email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function getEmailTemplate($op, $templatename, $sharename, $shareurl, $toemailid)
    {
        list($response) = $this->getEmailTemplateWithHttpInfo($op, $templatename, $sharename, $shareurl, $toemailid);
        return $response;
    }

    /**
     * Operation getEmailTemplateWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $templatename Template Name (required)
     * @param string $sharename Share Name (required)
     * @param string $shareurl Share URL (required)
     * @param string $toemailid To email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailTemplateWithHttpInfo($op, $templatename, $sharename, $shareurl, $toemailid)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling getEmailTemplate');
        }
        // verify the required parameter 'templatename' is set
        if ($templatename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templatename when calling getEmailTemplate');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling getEmailTemplate');
        }
        // verify the required parameter 'shareurl' is set
        if ($shareurl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareurl when calling getEmailTemplate');
        }
        // verify the required parameter 'toemailid' is set
        if ($toemailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toemailid when calling getEmailTemplate');
        }
        // parse inputs
        $resourcePath = "/core/getemailtemplate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($templatename !== null) {
            $queryParams['templatename'] = $this->apiClient->getSerializer()->toQueryValue($templatename);
        }
        // query params
        if ($sharename !== null) {
            $queryParams['sharename'] = $this->apiClient->getSerializer()->toQueryValue($sharename);
        }
        // query params
        if ($shareurl !== null) {
            $queryParams['shareurl'] = $this->apiClient->getSerializer()->toQueryValue($shareurl);
        }
        // query params
        if ($toemailid !== null) {
            $queryParams['toemailid'] = $this->apiClient->getSerializer()->toQueryValue($toemailid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/getemailtemplate'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getGroupAccessForShare
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getGroupAccessForShare($shareid)
    {
        list($response) = $this->getGroupAccessForShareWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getGroupAccessForShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupAccessForShareWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getGroupAccessForShare');
        }
        // parse inputs
        $resourcePath = "/core/getgroupaccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getgroupaccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivateUrlForEmail
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function getPrivateUrlForEmail($shareid)
    {
        list($response) = $this->getPrivateUrlForEmailWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getPrivateUrlForEmailWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivateUrlForEmailWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getPrivateUrlForEmail');
        }
        // parse inputs
        $resourcePath = "/core/getprivateurlforemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/getprivateurlforemail'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getPublicShareAuthInfo
     *
     * 
     *
     * @param string $path Specify the share path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getPublicShareAuthInfo($path)
    {
        list($response) = $this->getPublicShareAuthInfoWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation getPublicShareAuthInfoWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the share path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicShareAuthInfoWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getPublicShareAuthInfo');
        }
        // parse inputs
        $resourcePath = "/core/getpublicshareauthinfo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getpublicshareauthinfo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRandomPassword
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getRandomPassword()
    {
        list($response) = $this->getRandomPasswordWithHttpInfo();
        return $response;
    }

    /**
     * Operation getRandomPasswordWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRandomPasswordWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/getrandompassword";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getrandompassword'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getShareForId
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getShareForId($shareid)
    {
        list($response) = $this->getShareForIdWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getShareForIdWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShareForIdWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getShareForId');
        }
        // parse inputs
        $resourcePath = "/core/getshareforid";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getshareforid'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getShareForPath
     *
     * 
     *
     * @param string $path Path of shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getShareForPath($path)
    {
        list($response) = $this->getShareForPathWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation getShareForPathWithHttpInfo
     *
     * 
     *
     * @param string $path Path of shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShareForPathWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getShareForPath');
        }
        // parse inputs
        $resourcePath = "/core/getshareforpath";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getshareforpath'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSharePassword
     *
     * 
     *
     * @param string $shareid Specify the share Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getSharePassword($shareid)
    {
        list($response) = $this->getSharePasswordWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getSharePasswordWithHttpInfo
     *
     * 
     *
     * @param string $shareid Specify the share Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharePasswordWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getSharePassword');
        }
        // parse inputs
        $resourcePath = "/core/getsharepassword";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getsharepassword'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getShares
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getShares()
    {
        list($response) = $this->getSharesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getSharesWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/getshares";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getshares'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSharesFilter
     *
     * 
     *
     * @param string $location Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getSharesFilter($location)
    {
        list($response) = $this->getSharesFilterWithHttpInfo($location);
        return $response;
    }

    /**
     * Operation getSharesFilterWithHttpInfo
     *
     * 
     *
     * @param string $location Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharesFilterWithHttpInfo($location)
    {
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling getSharesFilter');
        }
        // parse inputs
        $resourcePath = "/core/getsharesfilter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getsharesfilter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUploadForm
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function getUploadForm($shareid)
    {
        list($response) = $this->getUploadFormWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getUploadFormWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUploadFormWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getUploadForm');
        }
        // parse inputs
        $resourcePath = "/core/getuploadform";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/getuploadform'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getUrlForEmail
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function getUrlForEmail($shareid, $sharename)
    {
        list($response) = $this->getUrlForEmailWithHttpInfo($shareid, $sharename);
        return $response;
    }

    /**
     * Operation getUrlForEmailWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUrlForEmailWithHttpInfo($shareid, $sharename)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getUrlForEmail');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling getUrlForEmail');
        }
        // parse inputs
        $resourcePath = "/core/geturlforemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($sharename !== null) {
            $queryParams['sharename'] = $this->apiClient->getSerializer()->toQueryValue($sharename);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/geturlforemail'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getUserAccessForShare
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getUserAccessForShare($shareid)
    {
        list($response) = $this->getUserAccessForShareWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getUserAccessForShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAccessForShareWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getUserAccessForShare');
        }
        // parse inputs
        $resourcePath = "/core/getuseraccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getuseraccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsersForShare
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getUsersForShare($shareid)
    {
        list($response) = $this->getUsersForShareWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation getUsersForShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersForShareWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling getUsersForShare');
        }
        // parse inputs
        $resourcePath = "/core/getusersforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getusersforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation leaveShare
     *
     * 
     *
     * @param string $path Path of the shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function leaveShare($path)
    {
        list($response) = $this->leaveShareWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation leaveShareWithHttpInfo
     *
     * 
     *
     * @param string $path Path of the shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveShareWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling leaveShare');
        }
        // parse inputs
        $resourcePath = "/core/leaveshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/leaveshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation loginProtectedShare
     *
     * 
     *
     * @param string $fullquerystring Specify the full query string (required)
     * @param string $password Password for protected share (required)
     * @param string $path Specify the shared path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function loginProtectedShare($fullquerystring, $password, $path)
    {
        list($response) = $this->loginProtectedShareWithHttpInfo($fullquerystring, $password, $path);
        return $response;
    }

    /**
     * Operation loginProtectedShareWithHttpInfo
     *
     * 
     *
     * @param string $fullquerystring Specify the full query string (required)
     * @param string $password Password for protected share (required)
     * @param string $path Specify the shared path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginProtectedShareWithHttpInfo($fullquerystring, $password, $path)
    {
        // verify the required parameter 'fullquerystring' is set
        if ($fullquerystring === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fullquerystring when calling loginProtectedShare');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling loginProtectedShare');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling loginProtectedShare');
        }
        // parse inputs
        $resourcePath = "/core/loginprotectedshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($fullquerystring !== null) {
            $formParams['fullquerystring'] = $this->apiClient->getSerializer()->toFormValue($fullquerystring);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = $this->apiClient->getSerializer()->toFormValue($path);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/loginprotectedshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation quickShare
     *
     * 
     *
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function quickShare($sharelocation)
    {
        list($response) = $this->quickShareWithHttpInfo($sharelocation);
        return $response;
    }

    /**
     * Operation quickShareWithHttpInfo
     *
     * 
     *
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function quickShareWithHttpInfo($sharelocation)
    {
        // verify the required parameter 'sharelocation' is set
        if ($sharelocation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharelocation when calling quickShare');
        }
        // parse inputs
        $resourcePath = "/core/quickshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($sharelocation !== null) {
            $formParams['sharelocation'] = $this->apiClient->getSerializer()->toFormValue($sharelocation);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/quickshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchGroups
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function searchGroups()
    {
        list($response) = $this->searchGroupsWithHttpInfo();
        return $response;
    }

    /**
     * Operation searchGroupsWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchGroupsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/searchgroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/searchgroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchProfile
     *
     * 
     *
     * @param string $filter Partial name/email for search (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function searchProfile($filter)
    {
        list($response) = $this->searchProfileWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation searchProfileWithHttpInfo
     *
     * 
     *
     * @param string $filter Partial name/email for search (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchProfileWithHttpInfo($filter)
    {
        // verify the required parameter 'filter' is set
        if ($filter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filter when calling searchProfile');
        }
        // parse inputs
        $resourcePath = "/core/searchprofile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/searchprofile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendEmail
     *
     * 
     *
     * @param string $from From user name (required)
     * @param string $toemailid To email id (required)
     * @param string $message Email template (required)
     * @param string $subject subject of email (required)
     * @param string $userid user id (required)
     * @param string $publicshare share Id (required)
     * @param string $replyto Reply to email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function sendEmail($from, $toemailid, $message, $subject, $userid, $publicshare, $replyto)
    {
        list($response) = $this->sendEmailWithHttpInfo($from, $toemailid, $message, $subject, $userid, $publicshare, $replyto);
        return $response;
    }

    /**
     * Operation sendEmailWithHttpInfo
     *
     * 
     *
     * @param string $from From user name (required)
     * @param string $toemailid To email id (required)
     * @param string $message Email template (required)
     * @param string $subject subject of email (required)
     * @param string $userid user id (required)
     * @param string $publicshare share Id (required)
     * @param string $replyto Reply to email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailWithHttpInfo($from, $toemailid, $message, $subject, $userid, $publicshare, $replyto)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling sendEmail');
        }
        // verify the required parameter 'toemailid' is set
        if ($toemailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toemailid when calling sendEmail');
        }
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling sendEmail');
        }
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling sendEmail');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling sendEmail');
        }
        // verify the required parameter 'publicshare' is set
        if ($publicshare === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publicshare when calling sendEmail');
        }
        // verify the required parameter 'replyto' is set
        if ($replyto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $replyto when calling sendEmail');
        }
        // parse inputs
        $resourcePath = "/core/sendemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($from !== null) {
            $formParams['from'] = $this->apiClient->getSerializer()->toFormValue($from);
        }
        // form params
        if ($toemailid !== null) {
            $formParams['toemailid'] = $this->apiClient->getSerializer()->toFormValue($toemailid);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
        }
        // form params
        if ($subject !== null) {
            $formParams['subject'] = $this->apiClient->getSerializer()->toFormValue($subject);
        }
        // form params
        if ($userid !== null) {
            $formParams['userid'] = $this->apiClient->getSerializer()->toFormValue($userid);
        }
        // form params
        if ($publicshare !== null) {
            $formParams['publicshare'] = $this->apiClient->getSerializer()->toFormValue($publicshare);
        }
        // form params
        if ($replyto !== null) {
            $formParams['replyto'] = $this->apiClient->getSerializer()->toFormValue($replyto);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/sendemail'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendShareToEmail
     *
     * 
     *
     * @param string $from from name (required)
     * @param string $toemailid to email id (required)
     * @param string $sharename share name of file/folder (required)
     * @param string $sharelocation share location of the file/folder (required)
     * @param string $url share url of the file/folder (required)
     * @param string $message message text (required)
     * @param string $publicshare public share id (required)
     * @param string $replyto reply to email (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sendShareToEmail($from, $toemailid, $sharename, $sharelocation, $url, $message, $publicshare, $replyto)
    {
        list($response) = $this->sendShareToEmailWithHttpInfo($from, $toemailid, $sharename, $sharelocation, $url, $message, $publicshare, $replyto);
        return $response;
    }

    /**
     * Operation sendShareToEmailWithHttpInfo
     *
     * 
     *
     * @param string $from from name (required)
     * @param string $toemailid to email id (required)
     * @param string $sharename share name of file/folder (required)
     * @param string $sharelocation share location of the file/folder (required)
     * @param string $url share url of the file/folder (required)
     * @param string $message message text (required)
     * @param string $publicshare public share id (required)
     * @param string $replyto reply to email (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendShareToEmailWithHttpInfo($from, $toemailid, $sharename, $sharelocation, $url, $message, $publicshare, $replyto)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling sendShareToEmail');
        }
        // verify the required parameter 'toemailid' is set
        if ($toemailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toemailid when calling sendShareToEmail');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling sendShareToEmail');
        }
        // verify the required parameter 'sharelocation' is set
        if ($sharelocation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharelocation when calling sendShareToEmail');
        }
        // verify the required parameter 'url' is set
        if ($url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $url when calling sendShareToEmail');
        }
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling sendShareToEmail');
        }
        // verify the required parameter 'publicshare' is set
        if ($publicshare === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publicshare when calling sendShareToEmail');
        }
        // verify the required parameter 'replyto' is set
        if ($replyto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $replyto when calling sendShareToEmail');
        }
        // parse inputs
        $resourcePath = "/core/sendsharetoemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($from !== null) {
            $formParams['from'] = $this->apiClient->getSerializer()->toFormValue($from);
        }
        // form params
        if ($toemailid !== null) {
            $formParams['toemailid'] = $this->apiClient->getSerializer()->toFormValue($toemailid);
        }
        // form params
        if ($sharename !== null) {
            $formParams['sharename'] = $this->apiClient->getSerializer()->toFormValue($sharename);
        }
        // form params
        if ($sharelocation !== null) {
            $formParams['sharelocation'] = $this->apiClient->getSerializer()->toFormValue($sharelocation);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = $this->apiClient->getSerializer()->toFormValue($url);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
        }
        // form params
        if ($publicshare !== null) {
            $formParams['publicshare'] = $this->apiClient->getSerializer()->toFormValue($publicshare);
        }
        // form params
        if ($replyto !== null) {
            $formParams['replyto'] = $this->apiClient->getSerializer()->toFormValue($replyto);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/sendsharetoemail'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation setAllowPublicAccess
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param float $allowpublicaccess If set to 1 - allow public access , 0 - private access only (required)
     * @param float $allowpublicupload If set to 1 - allow public upload , 0 - private upload only (required)
     * @param float $allowpublicviewonly If set to 1 - allow public view , 0 - private view only (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function setAllowPublicAccess($shareid, $allowpublicaccess, $allowpublicupload, $allowpublicviewonly)
    {
        list($response) = $this->setAllowPublicAccessWithHttpInfo($shareid, $allowpublicaccess, $allowpublicupload, $allowpublicviewonly);
        return $response;
    }

    /**
     * Operation setAllowPublicAccessWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param float $allowpublicaccess If set to 1 - allow public access , 0 - private access only (required)
     * @param float $allowpublicupload If set to 1 - allow public upload , 0 - private upload only (required)
     * @param float $allowpublicviewonly If set to 1 - allow public view , 0 - private view only (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAllowPublicAccessWithHttpInfo($shareid, $allowpublicaccess, $allowpublicupload, $allowpublicviewonly)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling setAllowPublicAccess');
        }
        // verify the required parameter 'allowpublicaccess' is set
        if ($allowpublicaccess === null) {
            throw new \InvalidArgumentException('Missing the required parameter $allowpublicaccess when calling setAllowPublicAccess');
        }
        // verify the required parameter 'allowpublicupload' is set
        if ($allowpublicupload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $allowpublicupload when calling setAllowPublicAccess');
        }
        // verify the required parameter 'allowpublicviewonly' is set
        if ($allowpublicviewonly === null) {
            throw new \InvalidArgumentException('Missing the required parameter $allowpublicviewonly when calling setAllowPublicAccess');
        }
        // parse inputs
        $resourcePath = "/core/setallowpublicaccess";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($allowpublicaccess !== null) {
            $queryParams['allowpublicaccess'] = $this->apiClient->getSerializer()->toQueryValue($allowpublicaccess);
        }
        // query params
        if ($allowpublicupload !== null) {
            $queryParams['allowpublicupload'] = $this->apiClient->getSerializer()->toQueryValue($allowpublicupload);
        }
        // query params
        if ($allowpublicviewonly !== null) {
            $queryParams['allowpublicviewonly'] = $this->apiClient->getSerializer()->toQueryValue($allowpublicviewonly);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/setallowpublicaccess'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setGroupAccessForShare
     *
     * 
     *
     * @param string $shareid Share Id (required)
     * @param string $groupid Group Id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function setGroupAccessForShare($shareid, $groupid, $downloadwritesharesync)
    {
        list($response) = $this->setGroupAccessForShareWithHttpInfo($shareid, $groupid, $downloadwritesharesync);
        return $response;
    }

    /**
     * Operation setGroupAccessForShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id (required)
     * @param string $groupid Group Id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setGroupAccessForShareWithHttpInfo($shareid, $groupid, $downloadwritesharesync)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling setGroupAccessForShare');
        }
        // verify the required parameter 'groupid' is set
        if ($groupid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupid when calling setGroupAccessForShare');
        }
        // verify the required parameter 'downloadwritesharesync' is set
        if ($downloadwritesharesync === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downloadwritesharesync when calling setGroupAccessForShare');
        }
        // parse inputs
        $resourcePath = "/core/setgroupaccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($groupid !== null) {
            $queryParams['groupid'] = $this->apiClient->getSerializer()->toQueryValue($groupid);
        }
        // query params
        if ($downloadwritesharesync !== null) {
            $queryParams['download/write/share/sync'] = $this->apiClient->getSerializer()->toQueryValue($downloadwritesharesync);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/setgroupaccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setUserAccessForShare
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $userid User email id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function setUserAccessForShare($shareid, $userid, $downloadwritesharesync)
    {
        list($response) = $this->setUserAccessForShareWithHttpInfo($shareid, $userid, $downloadwritesharesync);
        return $response;
    }

    /**
     * Operation setUserAccessForShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $userid User email id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserAccessForShareWithHttpInfo($shareid, $userid, $downloadwritesharesync)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling setUserAccessForShare');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling setUserAccessForShare');
        }
        // verify the required parameter 'downloadwritesharesync' is set
        if ($downloadwritesharesync === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downloadwritesharesync when calling setUserAccessForShare');
        }
        // parse inputs
        $resourcePath = "/core/setuseraccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($downloadwritesharesync !== null) {
            $queryParams['download/write/share/sync'] = $this->apiClient->getSerializer()->toQueryValue($downloadwritesharesync);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/setuseraccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation share
     *
     * 
     *
     * @param string $mode single file download (required)
     * @param string $path Shared file path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function share($mode, $path)
    {
        list($response) = $this->shareWithHttpInfo($mode, $path);
        return $response;
    }

    /**
     * Operation shareWithHttpInfo
     *
     * 
     *
     * @param string $mode single file download (required)
     * @param string $path Shared file path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shareWithHttpInfo($mode, $path)
    {
        // verify the required parameter 'mode' is set
        if ($mode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode when calling share');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling share');
        }
        // parse inputs
        $resourcePath = "/core/share";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($mode !== null) {
            $formParams['mode'] = $this->apiClient->getSerializer()->toFormValue($mode);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = $this->apiClient->getSerializer()->toFormValue($path);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/share'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation shorten
     *
     * 
     *
     * @param string $longurl URL (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function shorten($longurl)
    {
        list($response) = $this->shortenWithHttpInfo($longurl);
        return $response;
    }

    /**
     * Operation shortenWithHttpInfo
     *
     * 
     *
     * @param string $longurl URL (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shortenWithHttpInfo($longurl)
    {
        // verify the required parameter 'longurl' is set
        if ($longurl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longurl when calling shorten');
        }
        // parse inputs
        $resourcePath = "/core/shorten";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($longurl !== null) {
            $queryParams['longurl'] = $this->apiClient->getSerializer()->toQueryValue($longurl);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/shorten'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateShare
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @param string $viewmode DEFAULT (required)
     * @param float $validityperiod Set the expiry date of share here (required)
     * @param float $sharesizelimit Set the limit (required)
     * @param float $maxdownloads Set the maximum times download limit (required)
     * @param float $hidenotification Set 1 to disable email notification (required)
     * @param float $sharepassword Set the password for protected share (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function updateShare($shareid, $sharename, $sharelocation, $viewmode, $validityperiod, $sharesizelimit, $maxdownloads, $hidenotification, $sharepassword)
    {
        list($response) = $this->updateShareWithHttpInfo($shareid, $sharename, $sharelocation, $viewmode, $validityperiod, $sharesizelimit, $maxdownloads, $hidenotification, $sharepassword);
        return $response;
    }

    /**
     * Operation updateShareWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @param string $viewmode DEFAULT (required)
     * @param float $validityperiod Set the expiry date of share here (required)
     * @param float $sharesizelimit Set the limit (required)
     * @param float $maxdownloads Set the maximum times download limit (required)
     * @param float $hidenotification Set 1 to disable email notification (required)
     * @param float $sharepassword Set the password for protected share (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShareWithHttpInfo($shareid, $sharename, $sharelocation, $viewmode, $validityperiod, $sharesizelimit, $maxdownloads, $hidenotification, $sharepassword)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling updateShare');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling updateShare');
        }
        // verify the required parameter 'sharelocation' is set
        if ($sharelocation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharelocation when calling updateShare');
        }
        // verify the required parameter 'viewmode' is set
        if ($viewmode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $viewmode when calling updateShare');
        }
        // verify the required parameter 'validityperiod' is set
        if ($validityperiod === null) {
            throw new \InvalidArgumentException('Missing the required parameter $validityperiod when calling updateShare');
        }
        // verify the required parameter 'sharesizelimit' is set
        if ($sharesizelimit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharesizelimit when calling updateShare');
        }
        // verify the required parameter 'maxdownloads' is set
        if ($maxdownloads === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maxdownloads when calling updateShare');
        }
        // verify the required parameter 'hidenotification' is set
        if ($hidenotification === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hidenotification when calling updateShare');
        }
        // verify the required parameter 'sharepassword' is set
        if ($sharepassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharepassword when calling updateShare');
        }
        // parse inputs
        $resourcePath = "/core/updateshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($shareid !== null) {
            $formParams['shareid'] = $this->apiClient->getSerializer()->toFormValue($shareid);
        }
        // form params
        if ($sharename !== null) {
            $formParams['sharename'] = $this->apiClient->getSerializer()->toFormValue($sharename);
        }
        // form params
        if ($sharelocation !== null) {
            $formParams['sharelocation'] = $this->apiClient->getSerializer()->toFormValue($sharelocation);
        }
        // form params
        if ($viewmode !== null) {
            $formParams['viewmode'] = $this->apiClient->getSerializer()->toFormValue($viewmode);
        }
        // form params
        if ($validityperiod !== null) {
            $formParams['validityperiod'] = $this->apiClient->getSerializer()->toFormValue($validityperiod);
        }
        // form params
        if ($sharesizelimit !== null) {
            $formParams['sharesizelimit'] = $this->apiClient->getSerializer()->toFormValue($sharesizelimit);
        }
        // form params
        if ($maxdownloads !== null) {
            $formParams['maxdownloads'] = $this->apiClient->getSerializer()->toFormValue($maxdownloads);
        }
        // form params
        if ($hidenotification !== null) {
            $formParams['hidenotification'] = $this->apiClient->getSerializer()->toFormValue($hidenotification);
        }
        // form params
        if ($sharepassword !== null) {
            $formParams['sharepassword'] = $this->apiClient->getSerializer()->toFormValue($sharepassword);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/updateshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateShareLink
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $oldsharelink Old share link (required)
     * @param string $newsharelink New share link (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function updateShareLink($shareid, $oldsharelink, $newsharelink)
    {
        list($response) = $this->updateShareLinkWithHttpInfo($shareid, $oldsharelink, $newsharelink);
        return $response;
    }

    /**
     * Operation updateShareLinkWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $oldsharelink Old share link (required)
     * @param string $newsharelink New share link (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShareLinkWithHttpInfo($shareid, $oldsharelink, $newsharelink)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling updateShareLink');
        }
        // verify the required parameter 'oldsharelink' is set
        if ($oldsharelink === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldsharelink when calling updateShareLink');
        }
        // verify the required parameter 'newsharelink' is set
        if ($newsharelink === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newsharelink when calling updateShareLink');
        }
        // parse inputs
        $resourcePath = "/core/updatesharelink";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($oldsharelink !== null) {
            $queryParams['oldsharelink'] = $this->apiClient->getSerializer()->toQueryValue($oldsharelink);
        }
        // query params
        if ($newsharelink !== null) {
            $queryParams['newsharelink'] = $this->apiClient->getSerializer()->toQueryValue($newsharelink);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/updatesharelink'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

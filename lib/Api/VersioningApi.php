<?php
/**
 * VersioningApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * VersioningApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VersioningApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return VersioningApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteAllVersions
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteAllVersions()
    {
        list($response) = $this->deleteAllVersionsWithHttpInfo();
        return $response;
    }

    /**
     * Operation deleteAllVersionsWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllVersionsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/deleteallversions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deleteallversions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVersion
     *
     * 
     *
     * @param string $filepath Specify the path where the file resides (required)
     * @param string $filename File name (required)
     * @param string $fileid File Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteVersion($filepath, $filename, $fileid)
    {
        list($response) = $this->deleteVersionWithHttpInfo($filepath, $filename, $fileid);
        return $response;
    }

    /**
     * Operation deleteVersionWithHttpInfo
     *
     * 
     *
     * @param string $filepath Specify the path where the file resides (required)
     * @param string $filename File name (required)
     * @param string $fileid File Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVersionWithHttpInfo($filepath, $filename, $fileid)
    {
        // verify the required parameter 'filepath' is set
        if ($filepath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filepath when calling deleteVersion');
        }
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling deleteVersion');
        }
        // verify the required parameter 'fileid' is set
        if ($fileid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fileid when calling deleteVersion');
        }
        // parse inputs
        $resourcePath = "/core/deleteversion";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($filepath !== null) {
            $formParams['filepath'] = $this->apiClient->getSerializer()->toFormValue($filepath);
        }
        // form params
        if ($filename !== null) {
            $formParams['filename'] = $this->apiClient->getSerializer()->toFormValue($filename);
        }
        // form params
        if ($fileid !== null) {
            $formParams['fileid'] = $this->apiClient->getSerializer()->toFormValue($fileid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/deleteversion'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downloadVersionedFile
     *
     * 
     *
     * @param string $filepath Path of the file where it resides and with the name of the file to be downloaded. (required)
     * @param string $filename Name of the file to be downloaded (required)
     * @param string $fileid Id no of file (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function downloadVersionedFile($filepath, $filename, $fileid)
    {
        list($response) = $this->downloadVersionedFileWithHttpInfo($filepath, $filename, $fileid);
        return $response;
    }

    /**
     * Operation downloadVersionedFileWithHttpInfo
     *
     * 
     *
     * @param string $filepath Path of the file where it resides and with the name of the file to be downloaded. (required)
     * @param string $filename Name of the file to be downloaded (required)
     * @param string $fileid Id no of file (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadVersionedFileWithHttpInfo($filepath, $filename, $fileid)
    {
        // verify the required parameter 'filepath' is set
        if ($filepath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filepath when calling downloadVersionedFile');
        }
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling downloadVersionedFile');
        }
        // verify the required parameter 'fileid' is set
        if ($fileid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fileid when calling downloadVersionedFile');
        }
        // parse inputs
        $resourcePath = "/core/downloadversionedfile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($filepath !== null) {
            $formParams['filepath'] = $this->apiClient->getSerializer()->toFormValue($filepath);
        }
        // form params
        if ($filename !== null) {
            $formParams['filename'] = $this->apiClient->getSerializer()->toFormValue($filename);
        }
        // form params
        if ($fileid !== null) {
            $formParams['fileid'] = $this->apiClient->getSerializer()->toFormValue($fileid);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/downloadversionedfile'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getVersions
     *
     * 
     *
     * @param string $filepath Specify the path where the file resides (required)
     * @param string $filename File name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getVersions($filepath, $filename)
    {
        list($response) = $this->getVersionsWithHttpInfo($filepath, $filename);
        return $response;
    }

    /**
     * Operation getVersionsWithHttpInfo
     *
     * 
     *
     * @param string $filepath Specify the path where the file resides (required)
     * @param string $filename File name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVersionsWithHttpInfo($filepath, $filename)
    {
        // verify the required parameter 'filepath' is set
        if ($filepath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filepath when calling getVersions');
        }
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling getVersions');
        }
        // parse inputs
        $resourcePath = "/core/getversions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($filepath !== null) {
            $queryParams['filepath'] = $this->apiClient->getSerializer()->toQueryValue($filepath);
        }
        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/core/getversions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

<?php
/**
 * Share_Related_APIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * Share_Related_APIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Share_Related_APIApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return Share_Related_APIApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation coreAddgrouptosharePost
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AddgrouptoshareResponse[]
     */
    public function coreAddgrouptosharePost($groupid, $shareid)
    {
        list($response) = $this->coreAddgrouptosharePostWithHttpInfo($groupid, $shareid);
        return $response;
    }

    /**
     * Operation coreAddgrouptosharePostWithHttpInfo
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AddgrouptoshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreAddgrouptosharePostWithHttpInfo($groupid, $shareid)
    {
        // verify the required parameter 'groupid' is set
        if ($groupid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupid when calling coreAddgrouptosharePost');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreAddgrouptosharePost');
        }
        // parse inputs
        $resourcePath = "/core/addgrouptoshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($groupid !== null) {
            $queryParams['groupid'] = $this->apiClient->getSerializer()->toQueryValue($groupid);
        }
        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AddgrouptoshareResponse[]',
                '/core/addgrouptoshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AddgrouptoshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AddgrouptoshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreAddusertosharePost
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AddusertoshareResponse[]
     */
    public function coreAddusertosharePost($userid, $shareid)
    {
        list($response) = $this->coreAddusertosharePostWithHttpInfo($userid, $shareid);
        return $response;
    }

    /**
     * Operation coreAddusertosharePostWithHttpInfo
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AddusertoshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreAddusertosharePostWithHttpInfo($userid, $shareid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreAddusertosharePost');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreAddusertosharePost');
        }
        // parse inputs
        $resourcePath = "/core/addusertoshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AddusertoshareResponse[]',
                '/core/addusertoshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AddusertoshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AddusertoshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreCreateprofileoninvitePost
     *
     * 
     *
     * @param string $emailid Specify the emailid of the user to invite (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CreateprofileoninviteResponse[]
     */
    public function coreCreateprofileoninvitePost($emailid)
    {
        list($response) = $this->coreCreateprofileoninvitePostWithHttpInfo($emailid);
        return $response;
    }

    /**
     * Operation coreCreateprofileoninvitePostWithHttpInfo
     *
     * 
     *
     * @param string $emailid Specify the emailid of the user to invite (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CreateprofileoninviteResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreCreateprofileoninvitePostWithHttpInfo($emailid)
    {
        // verify the required parameter 'emailid' is set
        if ($emailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailid when calling coreCreateprofileoninvitePost');
        }
        // parse inputs
        $resourcePath = "/core/createprofileoninvite";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($emailid !== null) {
            $queryParams['emailid'] = $this->apiClient->getSerializer()->toQueryValue($emailid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CreateprofileoninviteResponse[]',
                '/core/createprofileoninvite'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CreateprofileoninviteResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CreateprofileoninviteResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDeletegroupfromsharePost
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DeletegroupfromshareResponse[]
     */
    public function coreDeletegroupfromsharePost($groupid, $shareid)
    {
        list($response) = $this->coreDeletegroupfromsharePostWithHttpInfo($groupid, $shareid);
        return $response;
    }

    /**
     * Operation coreDeletegroupfromsharePostWithHttpInfo
     *
     * 
     *
     * @param string $groupid Group Id number (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DeletegroupfromshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDeletegroupfromsharePostWithHttpInfo($groupid, $shareid)
    {
        // verify the required parameter 'groupid' is set
        if ($groupid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupid when calling coreDeletegroupfromsharePost');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreDeletegroupfromsharePost');
        }
        // parse inputs
        $resourcePath = "/core/deletegroupfromshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($groupid !== null) {
            $queryParams['groupid'] = $this->apiClient->getSerializer()->toQueryValue($groupid);
        }
        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DeletegroupfromshareResponse[]',
                '/core/deletegroupfromshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DeletegroupfromshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DeletegroupfromshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDeletesharePost
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DeleteshareResponse[]
     */
    public function coreDeletesharePost($shareid)
    {
        list($response) = $this->coreDeletesharePostWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreDeletesharePostWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DeleteshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDeletesharePostWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreDeletesharePost');
        }
        // parse inputs
        $resourcePath = "/core/deleteshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DeleteshareResponse[]',
                '/core/deleteshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DeleteshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DeleteshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDeleteuserfromsharePost
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DeleteuserfromshareResponse[]
     */
    public function coreDeleteuserfromsharePost($userid, $shareid)
    {
        list($response) = $this->coreDeleteuserfromsharePostWithHttpInfo($userid, $shareid);
        return $response;
    }

    /**
     * Operation coreDeleteuserfromsharePostWithHttpInfo
     *
     * 
     *
     * @param string $userid Specify the user&#39;s email id (required)
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DeleteuserfromshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDeleteuserfromsharePostWithHttpInfo($userid, $shareid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreDeleteuserfromsharePost');
        }
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreDeleteuserfromsharePost');
        }
        // parse inputs
        $resourcePath = "/core/deleteuserfromshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DeleteuserfromshareResponse[]',
                '/core/deleteuserfromshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DeleteuserfromshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DeleteuserfromshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetemailsubjectGet
     *
     * 
     *
     * @param string $op Operation (required)
     * @param string $param Template name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetemailsubjectResponse[]
     */
    public function coreGetemailsubjectGet($op, $param)
    {
        list($response) = $this->coreGetemailsubjectGetWithHttpInfo($op, $param);
        return $response;
    }

    /**
     * Operation coreGetemailsubjectGetWithHttpInfo
     *
     * 
     *
     * @param string $op Operation (required)
     * @param string $param Template name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetemailsubjectResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetemailsubjectGetWithHttpInfo($op, $param)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling coreGetemailsubjectGet');
        }
        // verify the required parameter 'param' is set
        if ($param === null) {
            throw new \InvalidArgumentException('Missing the required parameter $param when calling coreGetemailsubjectGet');
        }
        // parse inputs
        $resourcePath = "/core/getemailsubject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($param !== null) {
            $queryParams['param'] = $this->apiClient->getSerializer()->toQueryValue($param);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetemailsubjectResponse[]',
                '/core/getemailsubject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetemailsubjectResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetemailsubjectResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetemailtemplateGet
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $templatename Template Name (required)
     * @param string $sharename Share Name (required)
     * @param string $shareurl Share URL (required)
     * @param string $toemailid To email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreGetemailtemplateGet($op, $templatename, $sharename, $shareurl, $toemailid)
    {
        list($response) = $this->coreGetemailtemplateGetWithHttpInfo($op, $templatename, $sharename, $shareurl, $toemailid);
        return $response;
    }

    /**
     * Operation coreGetemailtemplateGetWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $templatename Template Name (required)
     * @param string $sharename Share Name (required)
     * @param string $shareurl Share URL (required)
     * @param string $toemailid To email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetemailtemplateGetWithHttpInfo($op, $templatename, $sharename, $shareurl, $toemailid)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling coreGetemailtemplateGet');
        }
        // verify the required parameter 'templatename' is set
        if ($templatename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templatename when calling coreGetemailtemplateGet');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling coreGetemailtemplateGet');
        }
        // verify the required parameter 'shareurl' is set
        if ($shareurl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareurl when calling coreGetemailtemplateGet');
        }
        // verify the required parameter 'toemailid' is set
        if ($toemailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toemailid when calling coreGetemailtemplateGet');
        }
        // parse inputs
        $resourcePath = "/core/getemailtemplate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($templatename !== null) {
            $queryParams['templatename'] = $this->apiClient->getSerializer()->toQueryValue($templatename);
        }
        // query params
        if ($sharename !== null) {
            $queryParams['sharename'] = $this->apiClient->getSerializer()->toQueryValue($sharename);
        }
        // query params
        if ($shareurl !== null) {
            $queryParams['shareurl'] = $this->apiClient->getSerializer()->toQueryValue($shareurl);
        }
        // query params
        if ($toemailid !== null) {
            $queryParams['toemailid'] = $this->apiClient->getSerializer()->toQueryValue($toemailid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/getemailtemplate'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetgroupaccessforshareGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetgroupaccessforshareResponse[]
     */
    public function coreGetgroupaccessforshareGet($shareid)
    {
        list($response) = $this->coreGetgroupaccessforshareGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetgroupaccessforshareGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetgroupaccessforshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetgroupaccessforshareGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetgroupaccessforshareGet');
        }
        // parse inputs
        $resourcePath = "/core/getgroupaccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetgroupaccessforshareResponse[]',
                '/core/getgroupaccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetgroupaccessforshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetgroupaccessforshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetprivateurlforemailGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreGetprivateurlforemailGet($shareid)
    {
        list($response) = $this->coreGetprivateurlforemailGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetprivateurlforemailGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetprivateurlforemailGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetprivateurlforemailGet');
        }
        // parse inputs
        $resourcePath = "/core/getprivateurlforemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/getprivateurlforemail'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetpublicshareauthinfoGet
     *
     * 
     *
     * @param string $path Specify the share path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetpublicshareauthinfoResponse[]
     */
    public function coreGetpublicshareauthinfoGet($path)
    {
        list($response) = $this->coreGetpublicshareauthinfoGetWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation coreGetpublicshareauthinfoGetWithHttpInfo
     *
     * 
     *
     * @param string $path Specify the share path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetpublicshareauthinfoResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetpublicshareauthinfoGetWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreGetpublicshareauthinfoGet');
        }
        // parse inputs
        $resourcePath = "/core/getpublicshareauthinfo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetpublicshareauthinfoResponse[]',
                '/core/getpublicshareauthinfo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetpublicshareauthinfoResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetpublicshareauthinfoResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetrandompasswordGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetrandompasswordResponse[]
     */
    public function coreGetrandompasswordGet()
    {
        list($response) = $this->coreGetrandompasswordGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation coreGetrandompasswordGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetrandompasswordResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetrandompasswordGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/getrandompassword";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetrandompasswordResponse[]',
                '/core/getrandompassword'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetrandompasswordResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetrandompasswordResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetshareforidGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetshareforidResponse[]
     */
    public function coreGetshareforidGet($shareid)
    {
        list($response) = $this->coreGetshareforidGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetshareforidGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetshareforidResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetshareforidGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetshareforidGet');
        }
        // parse inputs
        $resourcePath = "/core/getshareforid";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetshareforidResponse[]',
                '/core/getshareforid'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetshareforidResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetshareforidResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetshareforpathGet
     *
     * 
     *
     * @param string $path Path of shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetshareforpathResponse[]
     */
    public function coreGetshareforpathGet($path)
    {
        list($response) = $this->coreGetshareforpathGetWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation coreGetshareforpathGetWithHttpInfo
     *
     * 
     *
     * @param string $path Path of shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetshareforpathResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetshareforpathGetWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreGetshareforpathGet');
        }
        // parse inputs
        $resourcePath = "/core/getshareforpath";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetshareforpathResponse[]',
                '/core/getshareforpath'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetshareforpathResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetshareforpathResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetsharepasswordGet
     *
     * 
     *
     * @param string $shareid Specify the share Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetsharepasswordResponse[]
     */
    public function coreGetsharepasswordGet($shareid)
    {
        list($response) = $this->coreGetsharepasswordGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetsharepasswordGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Specify the share Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetsharepasswordResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetsharepasswordGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetsharepasswordGet');
        }
        // parse inputs
        $resourcePath = "/core/getsharepassword";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetsharepasswordResponse[]',
                '/core/getsharepassword'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetsharepasswordResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetsharepasswordResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetsharesGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetsharesResponse[]
     */
    public function coreGetsharesGet()
    {
        list($response) = $this->coreGetsharesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation coreGetsharesGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetsharesResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetsharesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/getshares";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetsharesResponse[]',
                '/core/getshares'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetsharesResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetsharesResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetsharesfilterGet
     *
     * 
     *
     * @param string $location Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetsharesfilterResponse[]
     */
    public function coreGetsharesfilterGet($location)
    {
        list($response) = $this->coreGetsharesfilterGetWithHttpInfo($location);
        return $response;
    }

    /**
     * Operation coreGetsharesfilterGetWithHttpInfo
     *
     * 
     *
     * @param string $location Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetsharesfilterResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetsharesfilterGetWithHttpInfo($location)
    {
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling coreGetsharesfilterGet');
        }
        // parse inputs
        $resourcePath = "/core/getsharesfilter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetsharesfilterResponse[]',
                '/core/getsharesfilter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetsharesfilterResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetsharesfilterResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetuploadformGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreGetuploadformGet($shareid)
    {
        list($response) = $this->coreGetuploadformGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetuploadformGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetuploadformGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetuploadformGet');
        }
        // parse inputs
        $resourcePath = "/core/getuploadform";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/getuploadform'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreGeturlforemailGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreGeturlforemailGet($shareid, $sharename)
    {
        list($response) = $this->coreGeturlforemailGetWithHttpInfo($shareid, $sharename);
        return $response;
    }

    /**
     * Operation coreGeturlforemailGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGeturlforemailGetWithHttpInfo($shareid, $sharename)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGeturlforemailGet');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling coreGeturlforemailGet');
        }
        // parse inputs
        $resourcePath = "/core/geturlforemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($sharename !== null) {
            $queryParams['sharename'] = $this->apiClient->getSerializer()->toQueryValue($sharename);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/geturlforemail'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetuseraccessforshareGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetuseraccessforshareResponse[]
     */
    public function coreGetuseraccessforshareGet($shareid)
    {
        list($response) = $this->coreGetuseraccessforshareGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetuseraccessforshareGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetuseraccessforshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetuseraccessforshareGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetuseraccessforshareGet');
        }
        // parse inputs
        $resourcePath = "/core/getuseraccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetuseraccessforshareResponse[]',
                '/core/getuseraccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetuseraccessforshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetuseraccessforshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetusersforshareGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetusersforshareResponse[]
     */
    public function coreGetusersforshareGet($shareid)
    {
        list($response) = $this->coreGetusersforshareGetWithHttpInfo($shareid);
        return $response;
    }

    /**
     * Operation coreGetusersforshareGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetusersforshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetusersforshareGetWithHttpInfo($shareid)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreGetusersforshareGet');
        }
        // parse inputs
        $resourcePath = "/core/getusersforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetusersforshareResponse[]',
                '/core/getusersforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetusersforshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetusersforshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreLeaveshareGet
     *
     * 
     *
     * @param string $path Path of the shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LeaveshareResponse[]
     */
    public function coreLeaveshareGet($path)
    {
        list($response) = $this->coreLeaveshareGetWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation coreLeaveshareGetWithHttpInfo
     *
     * 
     *
     * @param string $path Path of the shared file/folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LeaveshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreLeaveshareGetWithHttpInfo($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreLeaveshareGet');
        }
        // parse inputs
        $resourcePath = "/core/leaveshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LeaveshareResponse[]',
                '/core/leaveshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LeaveshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LeaveshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreLoginprotectedsharePost
     *
     * 
     *
     * @param string $fullquerystring Specify the full query string (required)
     * @param string $password Password for protected share (required)
     * @param string $path Specify the shared path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LoginprotectedshareResponse[]
     */
    public function coreLoginprotectedsharePost($fullquerystring, $password, $path)
    {
        list($response) = $this->coreLoginprotectedsharePostWithHttpInfo($fullquerystring, $password, $path);
        return $response;
    }

    /**
     * Operation coreLoginprotectedsharePostWithHttpInfo
     *
     * 
     *
     * @param string $fullquerystring Specify the full query string (required)
     * @param string $password Password for protected share (required)
     * @param string $path Specify the shared path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LoginprotectedshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreLoginprotectedsharePostWithHttpInfo($fullquerystring, $password, $path)
    {
        // verify the required parameter 'fullquerystring' is set
        if ($fullquerystring === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fullquerystring when calling coreLoginprotectedsharePost');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling coreLoginprotectedsharePost');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreLoginprotectedsharePost');
        }
        // parse inputs
        $resourcePath = "/core/loginprotectedshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($fullquerystring !== null) {
            $queryParams['fullquerystring'] = $this->apiClient->getSerializer()->toQueryValue($fullquerystring);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LoginprotectedshareResponse[]',
                '/core/loginprotectedshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LoginprotectedshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LoginprotectedshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreQuicksharePost
     *
     * 
     *
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\QuickshareResponse[]
     */
    public function coreQuicksharePost($sharelocation)
    {
        list($response) = $this->coreQuicksharePostWithHttpInfo($sharelocation);
        return $response;
    }

    /**
     * Operation coreQuicksharePostWithHttpInfo
     *
     * 
     *
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\QuickshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreQuicksharePostWithHttpInfo($sharelocation)
    {
        // verify the required parameter 'sharelocation' is set
        if ($sharelocation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharelocation when calling coreQuicksharePost');
        }
        // parse inputs
        $resourcePath = "/core/quickshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sharelocation !== null) {
            $queryParams['sharelocation'] = $this->apiClient->getSerializer()->toQueryValue($sharelocation);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\QuickshareResponse[]',
                '/core/quickshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\QuickshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\QuickshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSearchgroupsGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SearchgroupsResponse[]
     */
    public function coreSearchgroupsGet()
    {
        list($response) = $this->coreSearchgroupsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation coreSearchgroupsGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SearchgroupsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSearchgroupsGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/searchgroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SearchgroupsResponse[]',
                '/core/searchgroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SearchgroupsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SearchgroupsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSearchprofileGet
     *
     * 
     *
     * @param string $filter Partial name/email for search (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SearchprofileResponse[]
     */
    public function coreSearchprofileGet($filter)
    {
        list($response) = $this->coreSearchprofileGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation coreSearchprofileGetWithHttpInfo
     *
     * 
     *
     * @param string $filter Partial name/email for search (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SearchprofileResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSearchprofileGetWithHttpInfo($filter)
    {
        // verify the required parameter 'filter' is set
        if ($filter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filter when calling coreSearchprofileGet');
        }
        // parse inputs
        $resourcePath = "/core/searchprofile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SearchprofileResponse[]',
                '/core/searchprofile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SearchprofileResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SearchprofileResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSendemailPost
     *
     * 
     *
     * @param string $from From user name (required)
     * @param string $toemailid To email id (required)
     * @param string $message Email template (required)
     * @param string $subject subject of email (required)
     * @param string $userid user id (required)
     * @param string $publicshare share Id (required)
     * @param string $replyto Reply to email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SendemailResponse[]
     */
    public function coreSendemailPost($from, $toemailid, $message, $subject, $userid, $publicshare, $replyto)
    {
        list($response) = $this->coreSendemailPostWithHttpInfo($from, $toemailid, $message, $subject, $userid, $publicshare, $replyto);
        return $response;
    }

    /**
     * Operation coreSendemailPostWithHttpInfo
     *
     * 
     *
     * @param string $from From user name (required)
     * @param string $toemailid To email id (required)
     * @param string $message Email template (required)
     * @param string $subject subject of email (required)
     * @param string $userid user id (required)
     * @param string $publicshare share Id (required)
     * @param string $replyto Reply to email id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SendemailResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSendemailPostWithHttpInfo($from, $toemailid, $message, $subject, $userid, $publicshare, $replyto)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling coreSendemailPost');
        }
        // verify the required parameter 'toemailid' is set
        if ($toemailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toemailid when calling coreSendemailPost');
        }
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling coreSendemailPost');
        }
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling coreSendemailPost');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreSendemailPost');
        }
        // verify the required parameter 'publicshare' is set
        if ($publicshare === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publicshare when calling coreSendemailPost');
        }
        // verify the required parameter 'replyto' is set
        if ($replyto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $replyto when calling coreSendemailPost');
        }
        // parse inputs
        $resourcePath = "/core/sendemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($toemailid !== null) {
            $queryParams['toemailid'] = $this->apiClient->getSerializer()->toQueryValue($toemailid);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = $this->apiClient->getSerializer()->toQueryValue($message);
        }
        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($publicshare !== null) {
            $queryParams['publicshare'] = $this->apiClient->getSerializer()->toQueryValue($publicshare);
        }
        // query params
        if ($replyto !== null) {
            $queryParams['replyto'] = $this->apiClient->getSerializer()->toQueryValue($replyto);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SendemailResponse[]',
                '/core/sendemail'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SendemailResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SendemailResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSendsharetoemailPost
     *
     * 
     *
     * @param string $from from name (required)
     * @param string $toemailid to email id (required)
     * @param string $sharename share name of file/folder (required)
     * @param string $sharelocation share location of the file/folder (required)
     * @param string $url share url of the file/folder (required)
     * @param string $message message text (required)
     * @param string $publicshare public share id (required)
     * @param string $replyto reply to email (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreSendsharetoemailPost($from, $toemailid, $sharename, $sharelocation, $url, $message, $publicshare, $replyto)
    {
        list($response) = $this->coreSendsharetoemailPostWithHttpInfo($from, $toemailid, $sharename, $sharelocation, $url, $message, $publicshare, $replyto);
        return $response;
    }

    /**
     * Operation coreSendsharetoemailPostWithHttpInfo
     *
     * 
     *
     * @param string $from from name (required)
     * @param string $toemailid to email id (required)
     * @param string $sharename share name of file/folder (required)
     * @param string $sharelocation share location of the file/folder (required)
     * @param string $url share url of the file/folder (required)
     * @param string $message message text (required)
     * @param string $publicshare public share id (required)
     * @param string $replyto reply to email (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSendsharetoemailPostWithHttpInfo($from, $toemailid, $sharename, $sharelocation, $url, $message, $publicshare, $replyto)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'toemailid' is set
        if ($toemailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $toemailid when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'sharelocation' is set
        if ($sharelocation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharelocation when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'url' is set
        if ($url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $url when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'publicshare' is set
        if ($publicshare === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publicshare when calling coreSendsharetoemailPost');
        }
        // verify the required parameter 'replyto' is set
        if ($replyto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $replyto when calling coreSendsharetoemailPost');
        }
        // parse inputs
        $resourcePath = "/core/sendsharetoemail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($toemailid !== null) {
            $queryParams['toemailid'] = $this->apiClient->getSerializer()->toQueryValue($toemailid);
        }
        // query params
        if ($sharename !== null) {
            $queryParams['sharename'] = $this->apiClient->getSerializer()->toQueryValue($sharename);
        }
        // query params
        if ($sharelocation !== null) {
            $queryParams['sharelocation'] = $this->apiClient->getSerializer()->toQueryValue($sharelocation);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = $this->apiClient->getSerializer()->toQueryValue($message);
        }
        // query params
        if ($publicshare !== null) {
            $queryParams['publicshare'] = $this->apiClient->getSerializer()->toQueryValue($publicshare);
        }
        // query params
        if ($replyto !== null) {
            $queryParams['replyto'] = $this->apiClient->getSerializer()->toQueryValue($replyto);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/sendsharetoemail'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreSetallowpublicaccessGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param float $allowpublicaccess If set to 1 - allow public access , 0 - private access only (required)
     * @param float $allowpublicupload If set to 1 - allow public upload , 0 - private upload only (required)
     * @param float $allowpublicviewonly If set to 1 - allow public view , 0 - private view only (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SetallowpublicaccessResponse[]
     */
    public function coreSetallowpublicaccessGet($shareid, $allowpublicaccess, $allowpublicupload, $allowpublicviewonly)
    {
        list($response) = $this->coreSetallowpublicaccessGetWithHttpInfo($shareid, $allowpublicaccess, $allowpublicupload, $allowpublicviewonly);
        return $response;
    }

    /**
     * Operation coreSetallowpublicaccessGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param float $allowpublicaccess If set to 1 - allow public access , 0 - private access only (required)
     * @param float $allowpublicupload If set to 1 - allow public upload , 0 - private upload only (required)
     * @param float $allowpublicviewonly If set to 1 - allow public view , 0 - private view only (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SetallowpublicaccessResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSetallowpublicaccessGetWithHttpInfo($shareid, $allowpublicaccess, $allowpublicupload, $allowpublicviewonly)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreSetallowpublicaccessGet');
        }
        // verify the required parameter 'allowpublicaccess' is set
        if ($allowpublicaccess === null) {
            throw new \InvalidArgumentException('Missing the required parameter $allowpublicaccess when calling coreSetallowpublicaccessGet');
        }
        // verify the required parameter 'allowpublicupload' is set
        if ($allowpublicupload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $allowpublicupload when calling coreSetallowpublicaccessGet');
        }
        // verify the required parameter 'allowpublicviewonly' is set
        if ($allowpublicviewonly === null) {
            throw new \InvalidArgumentException('Missing the required parameter $allowpublicviewonly when calling coreSetallowpublicaccessGet');
        }
        // parse inputs
        $resourcePath = "/core/setallowpublicaccess";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($allowpublicaccess !== null) {
            $queryParams['allowpublicaccess'] = $this->apiClient->getSerializer()->toQueryValue($allowpublicaccess);
        }
        // query params
        if ($allowpublicupload !== null) {
            $queryParams['allowpublicupload'] = $this->apiClient->getSerializer()->toQueryValue($allowpublicupload);
        }
        // query params
        if ($allowpublicviewonly !== null) {
            $queryParams['allowpublicviewonly'] = $this->apiClient->getSerializer()->toQueryValue($allowpublicviewonly);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SetallowpublicaccessResponse[]',
                '/core/setallowpublicaccess'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SetallowpublicaccessResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SetallowpublicaccessResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSetgroupaccessforshareGet
     *
     * 
     *
     * @param string $shareid Share Id (required)
     * @param string $groupid Group Id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SetgroupaccessforshareResponse[]
     */
    public function coreSetgroupaccessforshareGet($shareid, $groupid, $downloadwritesharesync)
    {
        list($response) = $this->coreSetgroupaccessforshareGetWithHttpInfo($shareid, $groupid, $downloadwritesharesync);
        return $response;
    }

    /**
     * Operation coreSetgroupaccessforshareGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id (required)
     * @param string $groupid Group Id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SetgroupaccessforshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSetgroupaccessforshareGetWithHttpInfo($shareid, $groupid, $downloadwritesharesync)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreSetgroupaccessforshareGet');
        }
        // verify the required parameter 'groupid' is set
        if ($groupid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupid when calling coreSetgroupaccessforshareGet');
        }
        // verify the required parameter 'downloadwritesharesync' is set
        if ($downloadwritesharesync === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downloadwritesharesync when calling coreSetgroupaccessforshareGet');
        }
        // parse inputs
        $resourcePath = "/core/setgroupaccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($groupid !== null) {
            $queryParams['groupid'] = $this->apiClient->getSerializer()->toQueryValue($groupid);
        }
        // query params
        if ($downloadwritesharesync !== null) {
            $queryParams['download/write/share/sync'] = $this->apiClient->getSerializer()->toQueryValue($downloadwritesharesync);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SetgroupaccessforshareResponse[]',
                '/core/setgroupaccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SetgroupaccessforshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SetgroupaccessforshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSetuseraccessforshareGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $userid User email id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SetuseraccessforshareResponse[]
     */
    public function coreSetuseraccessforshareGet($shareid, $userid, $downloadwritesharesync)
    {
        list($response) = $this->coreSetuseraccessforshareGetWithHttpInfo($shareid, $userid, $downloadwritesharesync);
        return $response;
    }

    /**
     * Operation coreSetuseraccessforshareGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $userid User email id (required)
     * @param string $downloadwritesharesync Set to true or false (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SetuseraccessforshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSetuseraccessforshareGetWithHttpInfo($shareid, $userid, $downloadwritesharesync)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreSetuseraccessforshareGet');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreSetuseraccessforshareGet');
        }
        // verify the required parameter 'downloadwritesharesync' is set
        if ($downloadwritesharesync === null) {
            throw new \InvalidArgumentException('Missing the required parameter $downloadwritesharesync when calling coreSetuseraccessforshareGet');
        }
        // parse inputs
        $resourcePath = "/core/setuseraccessforshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($downloadwritesharesync !== null) {
            $queryParams['download/write/share/sync'] = $this->apiClient->getSerializer()->toQueryValue($downloadwritesharesync);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SetuseraccessforshareResponse[]',
                '/core/setuseraccessforshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SetuseraccessforshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SetuseraccessforshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSharePost
     *
     * 
     *
     * @param string $mode single file download (required)
     * @param string $path Shared file path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreSharePost($mode, $path)
    {
        list($response) = $this->coreSharePostWithHttpInfo($mode, $path);
        return $response;
    }

    /**
     * Operation coreSharePostWithHttpInfo
     *
     * 
     *
     * @param string $mode single file download (required)
     * @param string $path Shared file path (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSharePostWithHttpInfo($mode, $path)
    {
        // verify the required parameter 'mode' is set
        if ($mode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode when calling coreSharePost');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling coreSharePost');
        }
        // parse inputs
        $resourcePath = "/core/share";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($mode !== null) {
            $queryParams['mode'] = $this->apiClient->getSerializer()->toQueryValue($mode);
        }
        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/share'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreShortenGet
     *
     * 
     *
     * @param string $longurl URL (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreShortenGet($longurl)
    {
        list($response) = $this->coreShortenGetWithHttpInfo($longurl);
        return $response;
    }

    /**
     * Operation coreShortenGetWithHttpInfo
     *
     * 
     *
     * @param string $longurl URL (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreShortenGetWithHttpInfo($longurl)
    {
        // verify the required parameter 'longurl' is set
        if ($longurl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longurl when calling coreShortenGet');
        }
        // parse inputs
        $resourcePath = "/core/shorten";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($longurl !== null) {
            $queryParams['longurl'] = $this->apiClient->getSerializer()->toQueryValue($longurl);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/shorten'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreUpdatesharePost
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @param string $viewmode DEFAULT (required)
     * @param float $validityperiod Set the expiry date of share here (required)
     * @param float $sharesizelimit Set the limit (required)
     * @param float $maxdownloads Set the maximum times download limit (required)
     * @param float $hidenotification Set 1 to disable email notification (required)
     * @param float $sharepassword Set the password for protected share (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpdateshareResponse[]
     */
    public function coreUpdatesharePost($shareid, $sharename, $sharelocation, $viewmode, $validityperiod, $sharesizelimit, $maxdownloads, $hidenotification, $sharepassword)
    {
        list($response) = $this->coreUpdatesharePostWithHttpInfo($shareid, $sharename, $sharelocation, $viewmode, $validityperiod, $sharesizelimit, $maxdownloads, $hidenotification, $sharepassword);
        return $response;
    }

    /**
     * Operation coreUpdatesharePostWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $sharename Share name (required)
     * @param string $sharelocation Specify the location with the filename to be shared (required)
     * @param string $viewmode DEFAULT (required)
     * @param float $validityperiod Set the expiry date of share here (required)
     * @param float $sharesizelimit Set the limit (required)
     * @param float $maxdownloads Set the maximum times download limit (required)
     * @param float $hidenotification Set 1 to disable email notification (required)
     * @param float $sharepassword Set the password for protected share (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpdateshareResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreUpdatesharePostWithHttpInfo($shareid, $sharename, $sharelocation, $viewmode, $validityperiod, $sharesizelimit, $maxdownloads, $hidenotification, $sharepassword)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreUpdatesharePost');
        }
        // verify the required parameter 'sharename' is set
        if ($sharename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharename when calling coreUpdatesharePost');
        }
        // verify the required parameter 'sharelocation' is set
        if ($sharelocation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharelocation when calling coreUpdatesharePost');
        }
        // verify the required parameter 'viewmode' is set
        if ($viewmode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $viewmode when calling coreUpdatesharePost');
        }
        // verify the required parameter 'validityperiod' is set
        if ($validityperiod === null) {
            throw new \InvalidArgumentException('Missing the required parameter $validityperiod when calling coreUpdatesharePost');
        }
        // verify the required parameter 'sharesizelimit' is set
        if ($sharesizelimit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharesizelimit when calling coreUpdatesharePost');
        }
        // verify the required parameter 'maxdownloads' is set
        if ($maxdownloads === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maxdownloads when calling coreUpdatesharePost');
        }
        // verify the required parameter 'hidenotification' is set
        if ($hidenotification === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hidenotification when calling coreUpdatesharePost');
        }
        // verify the required parameter 'sharepassword' is set
        if ($sharepassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sharepassword when calling coreUpdatesharePost');
        }
        // parse inputs
        $resourcePath = "/core/updateshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($sharename !== null) {
            $queryParams['sharename'] = $this->apiClient->getSerializer()->toQueryValue($sharename);
        }
        // query params
        if ($sharelocation !== null) {
            $queryParams['sharelocation'] = $this->apiClient->getSerializer()->toQueryValue($sharelocation);
        }
        // query params
        if ($viewmode !== null) {
            $queryParams['viewmode'] = $this->apiClient->getSerializer()->toQueryValue($viewmode);
        }
        // query params
        if ($validityperiod !== null) {
            $queryParams['validityperiod'] = $this->apiClient->getSerializer()->toQueryValue($validityperiod);
        }
        // query params
        if ($sharesizelimit !== null) {
            $queryParams['sharesizelimit'] = $this->apiClient->getSerializer()->toQueryValue($sharesizelimit);
        }
        // query params
        if ($maxdownloads !== null) {
            $queryParams['maxdownloads'] = $this->apiClient->getSerializer()->toQueryValue($maxdownloads);
        }
        // query params
        if ($hidenotification !== null) {
            $queryParams['hidenotification'] = $this->apiClient->getSerializer()->toQueryValue($hidenotification);
        }
        // query params
        if ($sharepassword !== null) {
            $queryParams['sharepassword'] = $this->apiClient->getSerializer()->toQueryValue($sharepassword);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpdateshareResponse[]',
                '/core/updateshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpdateshareResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpdateshareResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreUpdatesharelinkGet
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $oldsharelink Old share link (required)
     * @param string $newsharelink New share link (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpdatesharelinkResponse[]
     */
    public function coreUpdatesharelinkGet($shareid, $oldsharelink, $newsharelink)
    {
        list($response) = $this->coreUpdatesharelinkGetWithHttpInfo($shareid, $oldsharelink, $newsharelink);
        return $response;
    }

    /**
     * Operation coreUpdatesharelinkGetWithHttpInfo
     *
     * 
     *
     * @param string $shareid Share Id number (required)
     * @param string $oldsharelink Old share link (required)
     * @param string $newsharelink New share link (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpdatesharelinkResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreUpdatesharelinkGetWithHttpInfo($shareid, $oldsharelink, $newsharelink)
    {
        // verify the required parameter 'shareid' is set
        if ($shareid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shareid when calling coreUpdatesharelinkGet');
        }
        // verify the required parameter 'oldsharelink' is set
        if ($oldsharelink === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldsharelink when calling coreUpdatesharelinkGet');
        }
        // verify the required parameter 'newsharelink' is set
        if ($newsharelink === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newsharelink when calling coreUpdatesharelinkGet');
        }
        // parse inputs
        $resourcePath = "/core/updatesharelink";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($shareid !== null) {
            $queryParams['shareid'] = $this->apiClient->getSerializer()->toQueryValue($shareid);
        }
        // query params
        if ($oldsharelink !== null) {
            $queryParams['oldsharelink'] = $this->apiClient->getSerializer()->toQueryValue($oldsharelink);
        }
        // query params
        if ($newsharelink !== null) {
            $queryParams['newsharelink'] = $this->apiClient->getSerializer()->toQueryValue($newsharelink);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpdatesharelinkResponse[]',
                '/core/updatesharelink'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpdatesharelinkResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpdatesharelinkResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

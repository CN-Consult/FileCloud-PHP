<?php
/**
 * RMC_Related_APIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RMC_Related_APIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RMC_Related_APIApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RMC_Related_APIApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation coreAckrmccommandsPost
     *
     * 
     *
     * @param string $command_rids Command Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AckrmccommandsResponse[]
     */
    public function coreAckrmccommandsPost($command_rids)
    {
        list($response) = $this->coreAckrmccommandsPostWithHttpInfo($command_rids);
        return $response;
    }

    /**
     * Operation coreAckrmccommandsPostWithHttpInfo
     *
     * 
     *
     * @param string $command_rids Command Id number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AckrmccommandsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreAckrmccommandsPostWithHttpInfo($command_rids)
    {
        // verify the required parameter 'command_rids' is set
        if ($command_rids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $command_rids when calling coreAckrmccommandsPost');
        }
        // parse inputs
        $resourcePath = "/core/ackrmccommands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($command_rids !== null) {
            $queryParams['command_rids'] = $this->apiClient->getSerializer()->toQueryValue($command_rids);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AckrmccommandsResponse[]',
                '/core/ackrmccommands'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AckrmccommandsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AckrmccommandsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreApprovedeviceaccessPost
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remote_client_id Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ApprovedeviceaccessResponse[]
     */
    public function coreApprovedeviceaccessPost($op, $remote_client_id)
    {
        list($response) = $this->coreApprovedeviceaccessPostWithHttpInfo($op, $remote_client_id);
        return $response;
    }

    /**
     * Operation coreApprovedeviceaccessPostWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remote_client_id Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ApprovedeviceaccessResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreApprovedeviceaccessPostWithHttpInfo($op, $remote_client_id)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling coreApprovedeviceaccessPost');
        }
        // verify the required parameter 'remote_client_id' is set
        if ($remote_client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_id when calling coreApprovedeviceaccessPost');
        }
        // parse inputs
        $resourcePath = "/core/approvedeviceaccess";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($remote_client_id !== null) {
            $queryParams['remote_client_id'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ApprovedeviceaccessResponse[]',
                '/core/approvedeviceaccess'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ApprovedeviceaccessResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ApprovedeviceaccessResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreDeletedevicePost
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remote_client_id Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DeletedeviceResponse[]
     */
    public function coreDeletedevicePost($op, $remote_client_id)
    {
        list($response) = $this->coreDeletedevicePostWithHttpInfo($op, $remote_client_id);
        return $response;
    }

    /**
     * Operation coreDeletedevicePostWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $remote_client_id Remote Client ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DeletedeviceResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreDeletedevicePostWithHttpInfo($op, $remote_client_id)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling coreDeletedevicePost');
        }
        // verify the required parameter 'remote_client_id' is set
        if ($remote_client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_id when calling coreDeletedevicePost');
        }
        // parse inputs
        $resourcePath = "/core/deletedevice";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($remote_client_id !== null) {
            $queryParams['remote_client_id'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DeletedeviceResponse[]',
                '/core/deletedevice'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DeletedeviceResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DeletedeviceResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetrmcclientsGet
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $userid Username (required)
     * @param string $start Start index of records to retrieve, Note: Index starts from 0. Default 0 (required)
     * @param string $end Set to any number of record you want to view at once. Default 10 (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetrmcclientsResponse[]
     */
    public function coreGetrmcclientsGet($op, $userid, $start, $end)
    {
        list($response) = $this->coreGetrmcclientsGetWithHttpInfo($op, $userid, $start, $end);
        return $response;
    }

    /**
     * Operation coreGetrmcclientsGetWithHttpInfo
     *
     * 
     *
     * @param string $op Operation name (required)
     * @param string $userid Username (required)
     * @param string $start Start index of records to retrieve, Note: Index starts from 0. Default 0 (required)
     * @param string $end Set to any number of record you want to view at once. Default 10 (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetrmcclientsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetrmcclientsGetWithHttpInfo($op, $userid, $start, $end)
    {
        // verify the required parameter 'op' is set
        if ($op === null) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling coreGetrmcclientsGet');
        }
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreGetrmcclientsGet');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling coreGetrmcclientsGet');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling coreGetrmcclientsGet');
        }
        // parse inputs
        $resourcePath = "/core/getrmcclients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($op !== null) {
            $queryParams['op'] = $this->apiClient->getSerializer()->toQueryValue($op);
        }
        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetrmcclientsResponse[]',
                '/core/getrmcclients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetrmcclientsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetrmcclientsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetrmccommandsGet
     *
     * 
     *
     * @param string $userid User email id (required)
     * @param string $remote_client_id Remote Client Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetrmccommandsResponse[]
     */
    public function coreGetrmccommandsGet($userid, $remote_client_id)
    {
        list($response) = $this->coreGetrmccommandsGetWithHttpInfo($userid, $remote_client_id);
        return $response;
    }

    /**
     * Operation coreGetrmccommandsGetWithHttpInfo
     *
     * 
     *
     * @param string $userid User email id (required)
     * @param string $remote_client_id Remote Client Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetrmccommandsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetrmccommandsGetWithHttpInfo($userid, $remote_client_id)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreGetrmccommandsGet');
        }
        // verify the required parameter 'remote_client_id' is set
        if ($remote_client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_id when calling coreGetrmccommandsGet');
        }
        // parse inputs
        $resourcePath = "/core/getrmccommands";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($remote_client_id !== null) {
            $queryParams['remote_client_id'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetrmccommandsResponse[]',
                '/core/getrmccommands'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetrmccommandsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetrmccommandsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreLoginguestPost
     *
     * 
     *
     * @param string $userid Specify the username (required)
     * @param string $password Specify the password (required)
     * @param string $remote_client_id Specify the unique identifier from the client (It can be the device MAC ID or the phone device ID. It just needs to be an unique number that identifies the device). (required)
     * @param string $remote_client_disp_name Specify the client device name (required)
     * @param string $remote_client_api_level Set the api-level to 4 (latest required client api-level is 4) (required)
     * @param string $remote_client_os_type Specify the client OS type (required)
     * @param string $remote_client_app_version Specify the client app version (required)
     * @param string $remote_client_os_version Specify the client OS version (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LoginguestResponse[]
     */
    public function coreLoginguestPost($userid, $password, $remote_client_id, $remote_client_disp_name, $remote_client_api_level, $remote_client_os_type, $remote_client_app_version, $remote_client_os_version)
    {
        list($response) = $this->coreLoginguestPostWithHttpInfo($userid, $password, $remote_client_id, $remote_client_disp_name, $remote_client_api_level, $remote_client_os_type, $remote_client_app_version, $remote_client_os_version);
        return $response;
    }

    /**
     * Operation coreLoginguestPostWithHttpInfo
     *
     * 
     *
     * @param string $userid Specify the username (required)
     * @param string $password Specify the password (required)
     * @param string $remote_client_id Specify the unique identifier from the client (It can be the device MAC ID or the phone device ID. It just needs to be an unique number that identifies the device). (required)
     * @param string $remote_client_disp_name Specify the client device name (required)
     * @param string $remote_client_api_level Set the api-level to 4 (latest required client api-level is 4) (required)
     * @param string $remote_client_os_type Specify the client OS type (required)
     * @param string $remote_client_app_version Specify the client app version (required)
     * @param string $remote_client_os_version Specify the client OS version (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LoginguestResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreLoginguestPostWithHttpInfo($userid, $password, $remote_client_id, $remote_client_disp_name, $remote_client_api_level, $remote_client_os_type, $remote_client_app_version, $remote_client_os_version)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreLoginguestPost');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling coreLoginguestPost');
        }
        // verify the required parameter 'remote_client_id' is set
        if ($remote_client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_id when calling coreLoginguestPost');
        }
        // verify the required parameter 'remote_client_disp_name' is set
        if ($remote_client_disp_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_disp_name when calling coreLoginguestPost');
        }
        // verify the required parameter 'remote_client_api_level' is set
        if ($remote_client_api_level === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_api_level when calling coreLoginguestPost');
        }
        // verify the required parameter 'remote_client_os_type' is set
        if ($remote_client_os_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_os_type when calling coreLoginguestPost');
        }
        // verify the required parameter 'remote_client_app_version' is set
        if ($remote_client_app_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_app_version when calling coreLoginguestPost');
        }
        // verify the required parameter 'remote_client_os_version' is set
        if ($remote_client_os_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remote_client_os_version when calling coreLoginguestPost');
        }
        // parse inputs
        $resourcePath = "/core/loginguest";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        // query params
        if ($remote_client_id !== null) {
            $queryParams['remote_client_id'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_id);
        }
        // query params
        if ($remote_client_disp_name !== null) {
            $queryParams['remote_client_disp_name'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_disp_name);
        }
        // query params
        if ($remote_client_api_level !== null) {
            $queryParams['remote_client_api_level'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_api_level);
        }
        // query params
        if ($remote_client_os_type !== null) {
            $queryParams['remote_client_os_type'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_os_type);
        }
        // query params
        if ($remote_client_app_version !== null) {
            $queryParams['remote_client_app_version'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_app_version);
        }
        // query params
        if ($remote_client_os_version !== null) {
            $queryParams['remote_client_os_version'] = $this->apiClient->getSerializer()->toQueryValue($remote_client_os_version);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LoginguestResponse[]',
                '/core/loginguest'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LoginguestResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LoginguestResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreRequestdeviceaccessPost
     *
     * 
     *
     * @param string $userid Username (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RequestdeviceaccessResponse[]
     */
    public function coreRequestdeviceaccessPost($userid)
    {
        list($response) = $this->coreRequestdeviceaccessPostWithHttpInfo($userid);
        return $response;
    }

    /**
     * Operation coreRequestdeviceaccessPostWithHttpInfo
     *
     * 
     *
     * @param string $userid Username (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RequestdeviceaccessResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreRequestdeviceaccessPostWithHttpInfo($userid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling coreRequestdeviceaccessPost');
        }
        // parse inputs
        $resourcePath = "/core/requestdeviceaccess";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($userid !== null) {
            $queryParams['userid'] = $this->apiClient->getSerializer()->toQueryValue($userid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RequestdeviceaccessResponse[]',
                '/core/requestdeviceaccess'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RequestdeviceaccessResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RequestdeviceaccessResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

<?php
/**
 * Profile_Related_APIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * Profile_Related_APIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Profile_Related_APIApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return Profile_Related_APIApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation coreBeginprofilecreationPost
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeginprofilecreationResponse[]
     */
    public function coreBeginprofilecreationPost()
    {
        list($response) = $this->coreBeginprofilecreationPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation coreBeginprofilecreationPostWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeginprofilecreationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreBeginprofilecreationPostWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/beginprofilecreation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeginprofilecreationResponse[]',
                '/core/beginprofilecreation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeginprofilecreationResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeginprofilecreationResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreChangelanguageGet
     *
     * 
     *
     * @param string $lang Specify the language you want to set (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChangelanguageResponse[]
     */
    public function coreChangelanguageGet($lang)
    {
        list($response) = $this->coreChangelanguageGetWithHttpInfo($lang);
        return $response;
    }

    /**
     * Operation coreChangelanguageGetWithHttpInfo
     *
     * 
     *
     * @param string $lang Specify the language you want to set (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChangelanguageResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreChangelanguageGetWithHttpInfo($lang)
    {
        // verify the required parameter 'lang' is set
        if ($lang === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lang when calling coreChangelanguageGet');
        }
        // parse inputs
        $resourcePath = "/core/changelanguage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChangelanguageResponse[]',
                '/core/changelanguage'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChangelanguageResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChangelanguageResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreCheckidGet
     *
     * 
     *
     * @param string $id Specify the name you want to check availablity (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CheckidResponse[]
     */
    public function coreCheckidGet($id)
    {
        list($response) = $this->coreCheckidGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation coreCheckidGetWithHttpInfo
     *
     * 
     *
     * @param string $id Specify the name you want to check availablity (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CheckidResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreCheckidGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coreCheckidGet');
        }
        // parse inputs
        $resourcePath = "/core/checkid";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CheckidResponse[]',
                '/core/checkid'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CheckidResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CheckidResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreCreateprofileGet
     *
     * 
     *
     * @param string $profile Name of the new user (required)
     * @param string $email Email id of the new user (required)
     * @param string $password Password for the new user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CreateprofileResponse[]
     */
    public function coreCreateprofileGet($profile, $email, $password)
    {
        list($response) = $this->coreCreateprofileGetWithHttpInfo($profile, $email, $password);
        return $response;
    }

    /**
     * Operation coreCreateprofileGetWithHttpInfo
     *
     * 
     *
     * @param string $profile Name of the new user (required)
     * @param string $email Email id of the new user (required)
     * @param string $password Password for the new user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CreateprofileResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreCreateprofileGetWithHttpInfo($profile, $email, $password)
    {
        // verify the required parameter 'profile' is set
        if ($profile === null) {
            throw new \InvalidArgumentException('Missing the required parameter $profile when calling coreCreateprofileGet');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling coreCreateprofileGet');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling coreCreateprofileGet');
        }
        // parse inputs
        $resourcePath = "/core/createprofile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($profile !== null) {
            $queryParams['profile'] = $this->apiClient->getSerializer()->toQueryValue($profile);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CreateprofileResponse[]',
                '/core/createprofile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CreateprofileResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CreateprofileResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreGetprofilesettingsGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetprofilesettingsResponse[]
     */
    public function coreGetprofilesettingsGet()
    {
        list($response) = $this->coreGetprofilesettingsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation coreGetprofilesettingsGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetprofilesettingsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreGetprofilesettingsGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/core/getprofilesettings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetprofilesettingsResponse[]',
                '/core/getprofilesettings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetprofilesettingsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetprofilesettingsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSetdisplaynameGet
     *
     * 
     *
     * @param string $dispname Specify the display name you want to set (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SetdisplaynameResponse[]
     */
    public function coreSetdisplaynameGet($dispname)
    {
        list($response) = $this->coreSetdisplaynameGetWithHttpInfo($dispname);
        return $response;
    }

    /**
     * Operation coreSetdisplaynameGetWithHttpInfo
     *
     * 
     *
     * @param string $dispname Specify the display name you want to set (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SetdisplaynameResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSetdisplaynameGetWithHttpInfo($dispname)
    {
        // verify the required parameter 'dispname' is set
        if ($dispname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dispname when calling coreSetdisplaynameGet');
        }
        // parse inputs
        $resourcePath = "/core/setdisplayname";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($dispname !== null) {
            $queryParams['dispname'] = $this->apiClient->getSerializer()->toQueryValue($dispname);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SetdisplaynameResponse[]',
                '/core/setdisplayname'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SetdisplaynameResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SetdisplaynameResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coreSubscribePost
     *
     * 
     *
     * @param string $emailid Email Id of user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreSubscribePost($emailid)
    {
        list($response) = $this->coreSubscribePostWithHttpInfo($emailid);
        return $response;
    }

    /**
     * Operation coreSubscribePostWithHttpInfo
     *
     * 
     *
     * @param string $emailid Email Id of user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreSubscribePostWithHttpInfo($emailid)
    {
        // verify the required parameter 'emailid' is set
        if ($emailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailid when calling coreSubscribePost');
        }
        // parse inputs
        $resourcePath = "/core/subscribe";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($emailid !== null) {
            $queryParams['emailid'] = $this->apiClient->getSerializer()->toQueryValue($emailid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/subscribe'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreUnsubscribePost
     *
     * 
     *
     * @param string $emailid Email Id of user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function coreUnsubscribePost($emailid)
    {
        list($response) = $this->coreUnsubscribePostWithHttpInfo($emailid);
        return $response;
    }

    /**
     * Operation coreUnsubscribePostWithHttpInfo
     *
     * 
     *
     * @param string $emailid Email Id of user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coreUnsubscribePostWithHttpInfo($emailid)
    {
        // verify the required parameter 'emailid' is set
        if ($emailid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $emailid when calling coreUnsubscribePost');
        }
        // parse inputs
        $resourcePath = "/core/unsubscribe";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($emailid !== null) {
            $queryParams['emailid'] = $this->apiClient->getSerializer()->toQueryValue($emailid);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/core/unsubscribe'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coreUpdatepasswordPost
     *
     * 
     *
     * @param string $oldpassword Old password of the user. (required)
     * @param string $newpassword New password the user wants to change too. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpdatepasswordResponse[]
     */
    public function coreUpdatepasswordPost($oldpassword, $newpassword)
    {
        list($response) = $this->coreUpdatepasswordPostWithHttpInfo($oldpassword, $newpassword);
        return $response;
    }

    /**
     * Operation coreUpdatepasswordPostWithHttpInfo
     *
     * 
     *
     * @param string $oldpassword Old password of the user. (required)
     * @param string $newpassword New password the user wants to change too. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpdatepasswordResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coreUpdatepasswordPostWithHttpInfo($oldpassword, $newpassword)
    {
        // verify the required parameter 'oldpassword' is set
        if ($oldpassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldpassword when calling coreUpdatepasswordPost');
        }
        // verify the required parameter 'newpassword' is set
        if ($newpassword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newpassword when calling coreUpdatepasswordPost');
        }
        // parse inputs
        $resourcePath = "/core/updatepassword";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($oldpassword !== null) {
            $queryParams['oldpassword'] = $this->apiClient->getSerializer()->toQueryValue($oldpassword);
        }
        // query params
        if ($newpassword !== null) {
            $queryParams['newpassword'] = $this->apiClient->getSerializer()->toQueryValue($newpassword);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpdatepasswordResponse[]',
                '/core/updatepassword'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpdatepasswordResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpdatepasswordResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

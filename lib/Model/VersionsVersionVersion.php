<?php
/**
 * VersionsVersionVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud_User_API
 *
 * FileCloud HTTP API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VersionsVersionVersion Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VersionsVersionVersion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'versions_version_version';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'versionnumber' => 'float',
        'size' => 'string',
        'how' => 'string',
        'createdon' => 'string',
        'createdby' => 'string',
        'filename' => 'string',
        'sizeinbytes' => 'string',
        'fileid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'versionnumber' => null,
        'size' => null,
        'how' => null,
        'createdon' => null,
        'createdby' => null,
        'filename' => null,
        'sizeinbytes' => null,
        'fileid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'versionnumber' => 'versionnumber',
        'size' => 'size',
        'how' => 'how',
        'createdon' => 'createdon',
        'createdby' => 'createdby',
        'filename' => 'filename',
        'sizeinbytes' => 'sizeinbytes',
        'fileid' => 'fileid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'versionnumber' => 'setVersionnumber',
        'size' => 'setSize',
        'how' => 'setHow',
        'createdon' => 'setCreatedon',
        'createdby' => 'setCreatedby',
        'filename' => 'setFilename',
        'sizeinbytes' => 'setSizeinbytes',
        'fileid' => 'setFileid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'versionnumber' => 'getVersionnumber',
        'size' => 'getSize',
        'how' => 'getHow',
        'createdon' => 'getCreatedon',
        'createdby' => 'getCreatedby',
        'filename' => 'getFilename',
        'sizeinbytes' => 'getSizeinbytes',
        'fileid' => 'getFileid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['versionnumber'] = isset($data['versionnumber']) ? $data['versionnumber'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['how'] = isset($data['how']) ? $data['how'] : null;
        $this->container['createdon'] = isset($data['createdon']) ? $data['createdon'] : null;
        $this->container['createdby'] = isset($data['createdby']) ? $data['createdby'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['sizeinbytes'] = isset($data['sizeinbytes']) ? $data['sizeinbytes'] : null;
        $this->container['fileid'] = isset($data['fileid']) ? $data['fileid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets versionnumber
     *
     * @return float
     */
    public function getVersionnumber()
    {
        return $this->container['versionnumber'];
    }

    /**
     * Sets versionnumber
     *
     * @param float $versionnumber version number of the file
     *
     * @return $this
     */
    public function setVersionnumber($versionnumber)
    {
        $this->container['versionnumber'] = $versionnumber;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size size of file
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets how
     *
     * @return string
     */
    public function getHow()
    {
        return $this->container['how'];
    }

    /**
     * Sets how
     *
     * @param string $how Agent used to upload the file
     *
     * @return $this
     */
    public function setHow($how)
    {
        $this->container['how'] = $how;

        return $this;
    }

    /**
     * Gets createdon
     *
     * @return string
     */
    public function getCreatedon()
    {
        return $this->container['createdon'];
    }

    /**
     * Sets createdon
     *
     * @param string $createdon file created on date
     *
     * @return $this
     */
    public function setCreatedon($createdon)
    {
        $this->container['createdon'] = $createdon;

        return $this;
    }

    /**
     * Gets createdby
     *
     * @return string
     */
    public function getCreatedby()
    {
        return $this->container['createdby'];
    }

    /**
     * Sets createdby
     *
     * @param string $createdby Created user's name
     *
     * @return $this
     */
    public function setCreatedby($createdby)
    {
        $this->container['createdby'] = $createdby;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename File name
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets sizeinbytes
     *
     * @return string
     */
    public function getSizeinbytes()
    {
        return $this->container['sizeinbytes'];
    }

    /**
     * Sets sizeinbytes
     *
     * @param string $sizeinbytes size of file in bytes
     *
     * @return $this
     */
    public function setSizeinbytes($sizeinbytes)
    {
        $this->container['sizeinbytes'] = $sizeinbytes;

        return $this;
    }

    /**
     * Gets fileid
     *
     * @return string
     */
    public function getFileid()
    {
        return $this->container['fileid'];
    }

    /**
     * Sets fileid
     *
     * @param string $fileid File id no.
     *
     * @return $this
     */
    public function setFileid($fileid)
    {
        $this->container['fileid'] = $fileid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SharesShare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud_User_API
 *
 * FileCloud HTTP API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SharesShare Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SharesShare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'shares_share';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shareid' => 'string',
        'sharename' => 'string',
        'sharelocation' => 'string',
        'readablelocation' => 'string',
        'shareurl' => 'string',
        'viewmode' => 'string',
        'validityperiod' => 'string',
        'sharesizelimit' => 'string',
        'maxdownloads' => 'string',
        'downloadcount' => 'string',
        'viewsize' => 'string',
        'thumbsize' => 'string',
        'allowpublicaccess' => 'string',
        'allowpublicupload' => 'string',
        'allowpublicviewonly' => 'string',
        'allowpublicuploadonly' => 'string',
        'isdir' => 'string',
        'isvalid' => 'string',
        'createddate' => 'string',
        'createdts' => 'string',
        'allowedit' => 'string',
        'allowdelete' => 'string',
        'allowsync' => 'string',
        'allowshare' => 'string',
        'shareowner' => 'string',
        'hidenotifications' => 'string',
        'ispublicsecure' => 'string',
        'defaultfile' => 'string',
        'lastaccessdts' => 'string',
        'lastaccess' => 'string',
        'recentactivitycount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shareid' => null,
        'sharename' => null,
        'sharelocation' => null,
        'readablelocation' => null,
        'shareurl' => null,
        'viewmode' => null,
        'validityperiod' => null,
        'sharesizelimit' => null,
        'maxdownloads' => null,
        'downloadcount' => null,
        'viewsize' => null,
        'thumbsize' => null,
        'allowpublicaccess' => null,
        'allowpublicupload' => null,
        'allowpublicviewonly' => null,
        'allowpublicuploadonly' => null,
        'isdir' => null,
        'isvalid' => null,
        'createddate' => null,
        'createdts' => null,
        'allowedit' => null,
        'allowdelete' => null,
        'allowsync' => null,
        'allowshare' => null,
        'shareowner' => null,
        'hidenotifications' => null,
        'ispublicsecure' => null,
        'defaultfile' => null,
        'lastaccessdts' => null,
        'lastaccess' => null,
        'recentactivitycount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shareid' => 'shareid',
        'sharename' => 'sharename',
        'sharelocation' => 'sharelocation',
        'readablelocation' => 'readablelocation',
        'shareurl' => 'shareurl',
        'viewmode' => 'viewmode',
        'validityperiod' => 'validityperiod',
        'sharesizelimit' => 'sharesizelimit',
        'maxdownloads' => 'maxdownloads',
        'downloadcount' => 'downloadcount',
        'viewsize' => 'viewsize',
        'thumbsize' => 'thumbsize',
        'allowpublicaccess' => 'allowpublicaccess',
        'allowpublicupload' => 'allowpublicupload',
        'allowpublicviewonly' => 'allowpublicviewonly',
        'allowpublicuploadonly' => 'allowpublicuploadonly',
        'isdir' => 'isdir',
        'isvalid' => 'isvalid',
        'createddate' => 'createddate',
        'createdts' => 'createdts',
        'allowedit' => 'allowedit',
        'allowdelete' => 'allowdelete',
        'allowsync' => 'allowsync',
        'allowshare' => 'allowshare',
        'shareowner' => 'shareowner',
        'hidenotifications' => 'hidenotifications',
        'ispublicsecure' => 'ispublicsecure',
        'defaultfile' => 'defaultfile',
        'lastaccessdts' => 'lastaccessdts',
        'lastaccess' => 'lastaccess',
        'recentactivitycount' => 'recentactivitycount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shareid' => 'setShareid',
        'sharename' => 'setSharename',
        'sharelocation' => 'setSharelocation',
        'readablelocation' => 'setReadablelocation',
        'shareurl' => 'setShareurl',
        'viewmode' => 'setViewmode',
        'validityperiod' => 'setValidityperiod',
        'sharesizelimit' => 'setSharesizelimit',
        'maxdownloads' => 'setMaxdownloads',
        'downloadcount' => 'setDownloadcount',
        'viewsize' => 'setViewsize',
        'thumbsize' => 'setThumbsize',
        'allowpublicaccess' => 'setAllowpublicaccess',
        'allowpublicupload' => 'setAllowpublicupload',
        'allowpublicviewonly' => 'setAllowpublicviewonly',
        'allowpublicuploadonly' => 'setAllowpublicuploadonly',
        'isdir' => 'setIsdir',
        'isvalid' => 'setIsvalid',
        'createddate' => 'setCreateddate',
        'createdts' => 'setCreatedts',
        'allowedit' => 'setAllowedit',
        'allowdelete' => 'setAllowdelete',
        'allowsync' => 'setAllowsync',
        'allowshare' => 'setAllowshare',
        'shareowner' => 'setShareowner',
        'hidenotifications' => 'setHidenotifications',
        'ispublicsecure' => 'setIspublicsecure',
        'defaultfile' => 'setDefaultfile',
        'lastaccessdts' => 'setLastaccessdts',
        'lastaccess' => 'setLastaccess',
        'recentactivitycount' => 'setRecentactivitycount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shareid' => 'getShareid',
        'sharename' => 'getSharename',
        'sharelocation' => 'getSharelocation',
        'readablelocation' => 'getReadablelocation',
        'shareurl' => 'getShareurl',
        'viewmode' => 'getViewmode',
        'validityperiod' => 'getValidityperiod',
        'sharesizelimit' => 'getSharesizelimit',
        'maxdownloads' => 'getMaxdownloads',
        'downloadcount' => 'getDownloadcount',
        'viewsize' => 'getViewsize',
        'thumbsize' => 'getThumbsize',
        'allowpublicaccess' => 'getAllowpublicaccess',
        'allowpublicupload' => 'getAllowpublicupload',
        'allowpublicviewonly' => 'getAllowpublicviewonly',
        'allowpublicuploadonly' => 'getAllowpublicuploadonly',
        'isdir' => 'getIsdir',
        'isvalid' => 'getIsvalid',
        'createddate' => 'getCreateddate',
        'createdts' => 'getCreatedts',
        'allowedit' => 'getAllowedit',
        'allowdelete' => 'getAllowdelete',
        'allowsync' => 'getAllowsync',
        'allowshare' => 'getAllowshare',
        'shareowner' => 'getShareowner',
        'hidenotifications' => 'getHidenotifications',
        'ispublicsecure' => 'getIspublicsecure',
        'defaultfile' => 'getDefaultfile',
        'lastaccessdts' => 'getLastaccessdts',
        'lastaccess' => 'getLastaccess',
        'recentactivitycount' => 'getRecentactivitycount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shareid'] = isset($data['shareid']) ? $data['shareid'] : null;
        $this->container['sharename'] = isset($data['sharename']) ? $data['sharename'] : null;
        $this->container['sharelocation'] = isset($data['sharelocation']) ? $data['sharelocation'] : null;
        $this->container['readablelocation'] = isset($data['readablelocation']) ? $data['readablelocation'] : null;
        $this->container['shareurl'] = isset($data['shareurl']) ? $data['shareurl'] : null;
        $this->container['viewmode'] = isset($data['viewmode']) ? $data['viewmode'] : null;
        $this->container['validityperiod'] = isset($data['validityperiod']) ? $data['validityperiod'] : null;
        $this->container['sharesizelimit'] = isset($data['sharesizelimit']) ? $data['sharesizelimit'] : null;
        $this->container['maxdownloads'] = isset($data['maxdownloads']) ? $data['maxdownloads'] : null;
        $this->container['downloadcount'] = isset($data['downloadcount']) ? $data['downloadcount'] : null;
        $this->container['viewsize'] = isset($data['viewsize']) ? $data['viewsize'] : null;
        $this->container['thumbsize'] = isset($data['thumbsize']) ? $data['thumbsize'] : null;
        $this->container['allowpublicaccess'] = isset($data['allowpublicaccess']) ? $data['allowpublicaccess'] : null;
        $this->container['allowpublicupload'] = isset($data['allowpublicupload']) ? $data['allowpublicupload'] : null;
        $this->container['allowpublicviewonly'] = isset($data['allowpublicviewonly']) ? $data['allowpublicviewonly'] : null;
        $this->container['allowpublicuploadonly'] = isset($data['allowpublicuploadonly']) ? $data['allowpublicuploadonly'] : null;
        $this->container['isdir'] = isset($data['isdir']) ? $data['isdir'] : null;
        $this->container['isvalid'] = isset($data['isvalid']) ? $data['isvalid'] : null;
        $this->container['createddate'] = isset($data['createddate']) ? $data['createddate'] : null;
        $this->container['createdts'] = isset($data['createdts']) ? $data['createdts'] : null;
        $this->container['allowedit'] = isset($data['allowedit']) ? $data['allowedit'] : null;
        $this->container['allowdelete'] = isset($data['allowdelete']) ? $data['allowdelete'] : null;
        $this->container['allowsync'] = isset($data['allowsync']) ? $data['allowsync'] : null;
        $this->container['allowshare'] = isset($data['allowshare']) ? $data['allowshare'] : null;
        $this->container['shareowner'] = isset($data['shareowner']) ? $data['shareowner'] : null;
        $this->container['hidenotifications'] = isset($data['hidenotifications']) ? $data['hidenotifications'] : null;
        $this->container['ispublicsecure'] = isset($data['ispublicsecure']) ? $data['ispublicsecure'] : null;
        $this->container['defaultfile'] = isset($data['defaultfile']) ? $data['defaultfile'] : null;
        $this->container['lastaccessdts'] = isset($data['lastaccessdts']) ? $data['lastaccessdts'] : null;
        $this->container['lastaccess'] = isset($data['lastaccess']) ? $data['lastaccess'] : null;
        $this->container['recentactivitycount'] = isset($data['recentactivitycount']) ? $data['recentactivitycount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shareid
     *
     * @return string
     */
    public function getShareid()
    {
        return $this->container['shareid'];
    }

    /**
     * Sets shareid
     *
     * @param string $shareid Share id number
     *
     * @return $this
     */
    public function setShareid($shareid)
    {
        $this->container['shareid'] = $shareid;

        return $this;
    }

    /**
     * Gets sharename
     *
     * @return string
     */
    public function getSharename()
    {
        return $this->container['sharename'];
    }

    /**
     * Sets sharename
     *
     * @param string $sharename Name of the Share
     *
     * @return $this
     */
    public function setSharename($sharename)
    {
        $this->container['sharename'] = $sharename;

        return $this;
    }

    /**
     * Gets sharelocation
     *
     * @return string
     */
    public function getSharelocation()
    {
        return $this->container['sharelocation'];
    }

    /**
     * Sets sharelocation
     *
     * @param string $sharelocation Location of the shared file
     *
     * @return $this
     */
    public function setSharelocation($sharelocation)
    {
        $this->container['sharelocation'] = $sharelocation;

        return $this;
    }

    /**
     * Gets readablelocation
     *
     * @return string
     */
    public function getReadablelocation()
    {
        return $this->container['readablelocation'];
    }

    /**
     * Sets readablelocation
     *
     * @param string $readablelocation Readable location of the shared file
     *
     * @return $this
     */
    public function setReadablelocation($readablelocation)
    {
        $this->container['readablelocation'] = $readablelocation;

        return $this;
    }

    /**
     * Gets shareurl
     *
     * @return string
     */
    public function getShareurl()
    {
        return $this->container['shareurl'];
    }

    /**
     * Sets shareurl
     *
     * @param string $shareurl URL of the shared file
     *
     * @return $this
     */
    public function setShareurl($shareurl)
    {
        $this->container['shareurl'] = $shareurl;

        return $this;
    }

    /**
     * Gets viewmode
     *
     * @return string
     */
    public function getViewmode()
    {
        return $this->container['viewmode'];
    }

    /**
     * Sets viewmode
     *
     * @param string $viewmode Set if user sets any view mode
     *
     * @return $this
     */
    public function setViewmode($viewmode)
    {
        $this->container['viewmode'] = $viewmode;

        return $this;
    }

    /**
     * Gets validityperiod
     *
     * @return string
     */
    public function getValidityperiod()
    {
        return $this->container['validityperiod'];
    }

    /**
     * Sets validityperiod
     *
     * @param string $validityperiod Expiry date of share
     *
     * @return $this
     */
    public function setValidityperiod($validityperiod)
    {
        $this->container['validityperiod'] = $validityperiod;

        return $this;
    }

    /**
     * Gets sharesizelimit
     *
     * @return string
     */
    public function getSharesizelimit()
    {
        return $this->container['sharesizelimit'];
    }

    /**
     * Sets sharesizelimit
     *
     * @param string $sharesizelimit Size limit of share
     *
     * @return $this
     */
    public function setSharesizelimit($sharesizelimit)
    {
        $this->container['sharesizelimit'] = $sharesizelimit;

        return $this;
    }

    /**
     * Gets maxdownloads
     *
     * @return string
     */
    public function getMaxdownloads()
    {
        return $this->container['maxdownloads'];
    }

    /**
     * Sets maxdownloads
     *
     * @param string $maxdownloads Maximum download limit is set
     *
     * @return $this
     */
    public function setMaxdownloads($maxdownloads)
    {
        $this->container['maxdownloads'] = $maxdownloads;

        return $this;
    }

    /**
     * Gets downloadcount
     *
     * @return string
     */
    public function getDownloadcount()
    {
        return $this->container['downloadcount'];
    }

    /**
     * Sets downloadcount
     *
     * @param string $downloadcount No. of time the file has been downloaded
     *
     * @return $this
     */
    public function setDownloadcount($downloadcount)
    {
        $this->container['downloadcount'] = $downloadcount;

        return $this;
    }

    /**
     * Gets viewsize
     *
     * @return string
     */
    public function getViewsize()
    {
        return $this->container['viewsize'];
    }

    /**
     * Sets viewsize
     *
     * @param string $viewsize Specifies view size
     *
     * @return $this
     */
    public function setViewsize($viewsize)
    {
        $this->container['viewsize'] = $viewsize;

        return $this;
    }

    /**
     * Gets thumbsize
     *
     * @return string
     */
    public function getThumbsize()
    {
        return $this->container['thumbsize'];
    }

    /**
     * Sets thumbsize
     *
     * @param string $thumbsize Specifies thumb size
     *
     * @return $this
     */
    public function setThumbsize($thumbsize)
    {
        $this->container['thumbsize'] = $thumbsize;

        return $this;
    }

    /**
     * Gets allowpublicaccess
     *
     * @return string
     */
    public function getAllowpublicaccess()
    {
        return $this->container['allowpublicaccess'];
    }

    /**
     * Sets allowpublicaccess
     *
     * @param string $allowpublicaccess Whether is to allow public access or not
     *
     * @return $this
     */
    public function setAllowpublicaccess($allowpublicaccess)
    {
        $this->container['allowpublicaccess'] = $allowpublicaccess;

        return $this;
    }

    /**
     * Gets allowpublicupload
     *
     * @return string
     */
    public function getAllowpublicupload()
    {
        return $this->container['allowpublicupload'];
    }

    /**
     * Sets allowpublicupload
     *
     * @param string $allowpublicupload Whether is to allow public upload or not
     *
     * @return $this
     */
    public function setAllowpublicupload($allowpublicupload)
    {
        $this->container['allowpublicupload'] = $allowpublicupload;

        return $this;
    }

    /**
     * Gets allowpublicviewonly
     *
     * @return string
     */
    public function getAllowpublicviewonly()
    {
        return $this->container['allowpublicviewonly'];
    }

    /**
     * Sets allowpublicviewonly
     *
     * @param string $allowpublicviewonly Whether is to allow public view only or not
     *
     * @return $this
     */
    public function setAllowpublicviewonly($allowpublicviewonly)
    {
        $this->container['allowpublicviewonly'] = $allowpublicviewonly;

        return $this;
    }

    /**
     * Gets allowpublicuploadonly
     *
     * @return string
     */
    public function getAllowpublicuploadonly()
    {
        return $this->container['allowpublicuploadonly'];
    }

    /**
     * Sets allowpublicuploadonly
     *
     * @param string $allowpublicuploadonly Whether is to allow public upload only or not
     *
     * @return $this
     */
    public function setAllowpublicuploadonly($allowpublicuploadonly)
    {
        $this->container['allowpublicuploadonly'] = $allowpublicuploadonly;

        return $this;
    }

    /**
     * Gets isdir
     *
     * @return string
     */
    public function getIsdir()
    {
        return $this->container['isdir'];
    }

    /**
     * Sets isdir
     *
     * @param string $isdir Whether is directory or not
     *
     * @return $this
     */
    public function setIsdir($isdir)
    {
        $this->container['isdir'] = $isdir;

        return $this;
    }

    /**
     * Gets isvalid
     *
     * @return string
     */
    public function getIsvalid()
    {
        return $this->container['isvalid'];
    }

    /**
     * Sets isvalid
     *
     * @param string $isvalid Whether is valid or not
     *
     * @return $this
     */
    public function setIsvalid($isvalid)
    {
        $this->container['isvalid'] = $isvalid;

        return $this;
    }

    /**
     * Gets createddate
     *
     * @return string
     */
    public function getCreateddate()
    {
        return $this->container['createddate'];
    }

    /**
     * Sets createddate
     *
     * @param string $createddate Created date of share
     *
     * @return $this
     */
    public function setCreateddate($createddate)
    {
        $this->container['createddate'] = $createddate;

        return $this;
    }

    /**
     * Gets createdts
     *
     * @return string
     */
    public function getCreatedts()
    {
        return $this->container['createdts'];
    }

    /**
     * Sets createdts
     *
     * @param string $createdts Created date of share
     *
     * @return $this
     */
    public function setCreatedts($createdts)
    {
        $this->container['createdts'] = $createdts;

        return $this;
    }

    /**
     * Gets allowedit
     *
     * @return string
     */
    public function getAllowedit()
    {
        return $this->container['allowedit'];
    }

    /**
     * Sets allowedit
     *
     * @param string $allowedit Whether to allow to edit or not
     *
     * @return $this
     */
    public function setAllowedit($allowedit)
    {
        $this->container['allowedit'] = $allowedit;

        return $this;
    }

    /**
     * Gets allowdelete
     *
     * @return string
     */
    public function getAllowdelete()
    {
        return $this->container['allowdelete'];
    }

    /**
     * Sets allowdelete
     *
     * @param string $allowdelete Whether to allow to delete or not
     *
     * @return $this
     */
    public function setAllowdelete($allowdelete)
    {
        $this->container['allowdelete'] = $allowdelete;

        return $this;
    }

    /**
     * Gets allowsync
     *
     * @return string
     */
    public function getAllowsync()
    {
        return $this->container['allowsync'];
    }

    /**
     * Sets allowsync
     *
     * @param string $allowsync Whether to allow to sync or not
     *
     * @return $this
     */
    public function setAllowsync($allowsync)
    {
        $this->container['allowsync'] = $allowsync;

        return $this;
    }

    /**
     * Gets allowshare
     *
     * @return string
     */
    public function getAllowshare()
    {
        return $this->container['allowshare'];
    }

    /**
     * Sets allowshare
     *
     * @param string $allowshare Whether to allow share or not
     *
     * @return $this
     */
    public function setAllowshare($allowshare)
    {
        $this->container['allowshare'] = $allowshare;

        return $this;
    }

    /**
     * Gets shareowner
     *
     * @return string
     */
    public function getShareowner()
    {
        return $this->container['shareowner'];
    }

    /**
     * Sets shareowner
     *
     * @param string $shareowner Share owner name
     *
     * @return $this
     */
    public function setShareowner($shareowner)
    {
        $this->container['shareowner'] = $shareowner;

        return $this;
    }

    /**
     * Gets hidenotifications
     *
     * @return string
     */
    public function getHidenotifications()
    {
        return $this->container['hidenotifications'];
    }

    /**
     * Sets hidenotifications
     *
     * @param string $hidenotifications Disable or enable email notification
     *
     * @return $this
     */
    public function setHidenotifications($hidenotifications)
    {
        $this->container['hidenotifications'] = $hidenotifications;

        return $this;
    }

    /**
     * Gets ispublicsecure
     *
     * @return string
     */
    public function getIspublicsecure()
    {
        return $this->container['ispublicsecure'];
    }

    /**
     * Sets ispublicsecure
     *
     * @param string $ispublicsecure Verify if share ensures public protection
     *
     * @return $this
     */
    public function setIspublicsecure($ispublicsecure)
    {
        $this->container['ispublicsecure'] = $ispublicsecure;

        return $this;
    }

    /**
     * Gets defaultfile
     *
     * @return string
     */
    public function getDefaultfile()
    {
        return $this->container['defaultfile'];
    }

    /**
     * Sets defaultfile
     *
     * @param string $defaultfile Verify if shared file if default type
     *
     * @return $this
     */
    public function setDefaultfile($defaultfile)
    {
        $this->container['defaultfile'] = $defaultfile;

        return $this;
    }

    /**
     * Gets lastaccessdts
     *
     * @return string
     */
    public function getLastaccessdts()
    {
        return $this->container['lastaccessdts'];
    }

    /**
     * Sets lastaccessdts
     *
     * @param string $lastaccessdts Last accessed date
     *
     * @return $this
     */
    public function setLastaccessdts($lastaccessdts)
    {
        $this->container['lastaccessdts'] = $lastaccessdts;

        return $this;
    }

    /**
     * Gets lastaccess
     *
     * @return string
     */
    public function getLastaccess()
    {
        return $this->container['lastaccess'];
    }

    /**
     * Sets lastaccess
     *
     * @param string $lastaccess Gives information when the share was last accessed
     *
     * @return $this
     */
    public function setLastaccess($lastaccess)
    {
        $this->container['lastaccess'] = $lastaccess;

        return $this;
    }

    /**
     * Gets recentactivitycount
     *
     * @return string
     */
    public function getRecentactivitycount()
    {
        return $this->container['recentactivitycount'];
    }

    /**
     * Sets recentactivitycount
     *
     * @param string $recentactivitycount Count of the recent activities done
     *
     * @return $this
     */
    public function setRecentactivitycount($recentactivitycount)
    {
        $this->container['recentactivitycount'] = $recentactivitycount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



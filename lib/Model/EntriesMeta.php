<?php
/**
 * EntriesMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud_User_API
 *
 * FileCloud HTTP API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EntriesMeta Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EntriesMeta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'entries_meta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'status' => 'string',
        'statusmessage' => 'string',
        'totalmatch' => 'string',
        'total' => 'string',
        'completedtime' => 'string',
        'location' => 'string',
        'searchstring' => 'string',
        'minsize' => 'string',
        'maxsize' => 'string',
        'modifiedstart' => 'string',
        'modifiedend' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'status' => null,
        'statusmessage' => null,
        'totalmatch' => null,
        'total' => null,
        'completedtime' => null,
        'location' => null,
        'searchstring' => null,
        'minsize' => null,
        'maxsize' => null,
        'modifiedstart' => null,
        'modifiedend' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'statusmessage' => 'statusmessage',
        'totalmatch' => 'totalmatch',
        'total' => 'total',
        'completedtime' => 'completedtime',
        'location' => 'location',
        'searchstring' => 'searchstring',
        'minsize' => 'minsize',
        'maxsize' => 'maxsize',
        'modifiedstart' => 'modifiedstart',
        'modifiedend' => 'modifiedend'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'statusmessage' => 'setStatusmessage',
        'totalmatch' => 'setTotalmatch',
        'total' => 'setTotal',
        'completedtime' => 'setCompletedtime',
        'location' => 'setLocation',
        'searchstring' => 'setSearchstring',
        'minsize' => 'setMinsize',
        'maxsize' => 'setMaxsize',
        'modifiedstart' => 'setModifiedstart',
        'modifiedend' => 'setModifiedend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'statusmessage' => 'getStatusmessage',
        'totalmatch' => 'getTotalmatch',
        'total' => 'getTotal',
        'completedtime' => 'getCompletedtime',
        'location' => 'getLocation',
        'searchstring' => 'getSearchstring',
        'minsize' => 'getMinsize',
        'maxsize' => 'getMaxsize',
        'modifiedstart' => 'getModifiedstart',
        'modifiedend' => 'getModifiedend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusmessage'] = isset($data['statusmessage']) ? $data['statusmessage'] : null;
        $this->container['totalmatch'] = isset($data['totalmatch']) ? $data['totalmatch'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['completedtime'] = isset($data['completedtime']) ? $data['completedtime'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['searchstring'] = isset($data['searchstring']) ? $data['searchstring'] : null;
        $this->container['minsize'] = isset($data['minsize']) ? $data['minsize'] : null;
        $this->container['maxsize'] = isset($data['maxsize']) ? $data['maxsize'] : null;
        $this->container['modifiedstart'] = isset($data['modifiedstart']) ? $data['modifiedstart'] : null;
        $this->container['modifiedend'] = isset($data['modifiedend']) ? $data['modifiedend'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Search ID value
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of search process
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusmessage
     *
     * @return string
     */
    public function getStatusmessage()
    {
        return $this->container['statusmessage'];
    }

    /**
     * Sets statusmessage
     *
     * @param string $statusmessage Status message
     *
     * @return $this
     */
    public function setStatusmessage($statusmessage)
    {
        $this->container['statusmessage'] = $statusmessage;

        return $this;
    }

    /**
     * Gets totalmatch
     *
     * @return string
     */
    public function getTotalmatch()
    {
        return $this->container['totalmatch'];
    }

    /**
     * Sets totalmatch
     *
     * @param string $totalmatch Total match
     *
     * @return $this
     */
    public function setTotalmatch($totalmatch)
    {
        $this->container['totalmatch'] = $totalmatch;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Total number of records
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets completedtime
     *
     * @return string
     */
    public function getCompletedtime()
    {
        return $this->container['completedtime'];
    }

    /**
     * Sets completedtime
     *
     * @param string $completedtime Time taken to complete the search
     *
     * @return $this
     */
    public function setCompletedtime($completedtime)
    {
        $this->container['completedtime'] = $completedtime;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Search location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets searchstring
     *
     * @return string
     */
    public function getSearchstring()
    {
        return $this->container['searchstring'];
    }

    /**
     * Sets searchstring
     *
     * @param string $searchstring Search string
     *
     * @return $this
     */
    public function setSearchstring($searchstring)
    {
        $this->container['searchstring'] = $searchstring;

        return $this;
    }

    /**
     * Gets minsize
     *
     * @return string
     */
    public function getMinsize()
    {
        return $this->container['minsize'];
    }

    /**
     * Sets minsize
     *
     * @param string $minsize Max size value
     *
     * @return $this
     */
    public function setMinsize($minsize)
    {
        $this->container['minsize'] = $minsize;

        return $this;
    }

    /**
     * Gets maxsize
     *
     * @return string
     */
    public function getMaxsize()
    {
        return $this->container['maxsize'];
    }

    /**
     * Sets maxsize
     *
     * @param string $maxsize Min size value
     *
     * @return $this
     */
    public function setMaxsize($maxsize)
    {
        $this->container['maxsize'] = $maxsize;

        return $this;
    }

    /**
     * Gets modifiedstart
     *
     * @return string
     */
    public function getModifiedstart()
    {
        return $this->container['modifiedstart'];
    }

    /**
     * Sets modifiedstart
     *
     * @param string $modifiedstart The value in date format, the search will show files that was created on and after the date mentioned
     *
     * @return $this
     */
    public function setModifiedstart($modifiedstart)
    {
        $this->container['modifiedstart'] = $modifiedstart;

        return $this;
    }

    /**
     * Gets modifiedend
     *
     * @return string
     */
    public function getModifiedend()
    {
        return $this->container['modifiedend'];
    }

    /**
     * Sets modifiedend
     *
     * @param string $modifiedend The value in date format, the search will show files that was created before the date mentioned
     *
     * @return $this
     */
    public function setModifiedend($modifiedend)
    {
        $this->container['modifiedend'] = $modifiedend;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



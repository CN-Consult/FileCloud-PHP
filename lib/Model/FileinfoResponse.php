<?php
/**
 * FileinfoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 18.1.0.682
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FileinfoResponse Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FileinfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileinfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'dirpath' => 'string',
        'name' => 'string',
        'ext' => 'string',
        'fullsize' => 'float',
        'modified' => 'string',
        'type' => 'string',
        'fullfilename' => 'string',
        'size' => 'string',
        'modifiedpoch' => 'string',
        'modifiediso' => 'string',
        'isroot' => 'float',
        'isshareable' => 'float',
        'issyncable' => 'float',
        'isshared' => 'float',
        'canrename' => 'float',
        'showprev' => 'float',
        'canfavorite' => 'float',
        'canupload' => 'float',
        'candownload' => 'float',
        'favoritelist' => 'float',
        'favoriteid' => 'float',
        'order' => 'float',
        'showquickedit' => 'float',
        'showlockunlock' => 'float',
        'showshareoption' => 'float',
        'cansetacls' => 'float',
        'disallowpreviewdownload' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'path' => null,
        'dirpath' => null,
        'name' => null,
        'ext' => null,
        'fullsize' => null,
        'modified' => null,
        'type' => null,
        'fullfilename' => null,
        'size' => null,
        'modifiedpoch' => null,
        'modifiediso' => null,
        'isroot' => null,
        'isshareable' => null,
        'issyncable' => null,
        'isshared' => null,
        'canrename' => null,
        'showprev' => null,
        'canfavorite' => null,
        'canupload' => null,
        'candownload' => null,
        'favoritelist' => null,
        'favoriteid' => null,
        'order' => null,
        'showquickedit' => null,
        'showlockunlock' => null,
        'showshareoption' => null,
        'cansetacls' => null,
        'disallowpreviewdownload' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'dirpath' => 'dirpath',
        'name' => 'name',
        'ext' => 'ext',
        'fullsize' => 'fullsize',
        'modified' => 'modified',
        'type' => 'type',
        'fullfilename' => 'fullfilename',
        'size' => 'size',
        'modifiedpoch' => 'modifiedpoch',
        'modifiediso' => 'modifiediso',
        'isroot' => 'isroot',
        'isshareable' => 'isshareable',
        'issyncable' => 'issyncable',
        'isshared' => 'isshared',
        'canrename' => 'canrename',
        'showprev' => 'showprev',
        'canfavorite' => 'canfavorite',
        'canupload' => 'canupload',
        'candownload' => 'candownload',
        'favoritelist' => 'favoritelist',
        'favoriteid' => 'favoriteid',
        'order' => 'order',
        'showquickedit' => 'showquickedit',
        'showlockunlock' => 'showlockunlock',
        'showshareoption' => 'showshareoption',
        'cansetacls' => 'cansetacls',
        'disallowpreviewdownload' => 'disallowpreviewdownload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'dirpath' => 'setDirpath',
        'name' => 'setName',
        'ext' => 'setExt',
        'fullsize' => 'setFullsize',
        'modified' => 'setModified',
        'type' => 'setType',
        'fullfilename' => 'setFullfilename',
        'size' => 'setSize',
        'modifiedpoch' => 'setModifiedpoch',
        'modifiediso' => 'setModifiediso',
        'isroot' => 'setIsroot',
        'isshareable' => 'setIsshareable',
        'issyncable' => 'setIssyncable',
        'isshared' => 'setIsshared',
        'canrename' => 'setCanrename',
        'showprev' => 'setShowprev',
        'canfavorite' => 'setCanfavorite',
        'canupload' => 'setCanupload',
        'candownload' => 'setCandownload',
        'favoritelist' => 'setFavoritelist',
        'favoriteid' => 'setFavoriteid',
        'order' => 'setOrder',
        'showquickedit' => 'setShowquickedit',
        'showlockunlock' => 'setShowlockunlock',
        'showshareoption' => 'setShowshareoption',
        'cansetacls' => 'setCansetacls',
        'disallowpreviewdownload' => 'setDisallowpreviewdownload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'dirpath' => 'getDirpath',
        'name' => 'getName',
        'ext' => 'getExt',
        'fullsize' => 'getFullsize',
        'modified' => 'getModified',
        'type' => 'getType',
        'fullfilename' => 'getFullfilename',
        'size' => 'getSize',
        'modifiedpoch' => 'getModifiedpoch',
        'modifiediso' => 'getModifiediso',
        'isroot' => 'getIsroot',
        'isshareable' => 'getIsshareable',
        'issyncable' => 'getIssyncable',
        'isshared' => 'getIsshared',
        'canrename' => 'getCanrename',
        'showprev' => 'getShowprev',
        'canfavorite' => 'getCanfavorite',
        'canupload' => 'getCanupload',
        'candownload' => 'getCandownload',
        'favoritelist' => 'getFavoritelist',
        'favoriteid' => 'getFavoriteid',
        'order' => 'getOrder',
        'showquickedit' => 'getShowquickedit',
        'showlockunlock' => 'getShowlockunlock',
        'showshareoption' => 'getShowshareoption',
        'cansetacls' => 'getCansetacls',
        'disallowpreviewdownload' => 'getDisallowpreviewdownload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['dirpath'] = isset($data['dirpath']) ? $data['dirpath'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['fullsize'] = isset($data['fullsize']) ? $data['fullsize'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['fullfilename'] = isset($data['fullfilename']) ? $data['fullfilename'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['modifiedpoch'] = isset($data['modifiedpoch']) ? $data['modifiedpoch'] : null;
        $this->container['modifiediso'] = isset($data['modifiediso']) ? $data['modifiediso'] : null;
        $this->container['isroot'] = isset($data['isroot']) ? $data['isroot'] : null;
        $this->container['isshareable'] = isset($data['isshareable']) ? $data['isshareable'] : null;
        $this->container['issyncable'] = isset($data['issyncable']) ? $data['issyncable'] : null;
        $this->container['isshared'] = isset($data['isshared']) ? $data['isshared'] : null;
        $this->container['canrename'] = isset($data['canrename']) ? $data['canrename'] : null;
        $this->container['showprev'] = isset($data['showprev']) ? $data['showprev'] : null;
        $this->container['canfavorite'] = isset($data['canfavorite']) ? $data['canfavorite'] : null;
        $this->container['canupload'] = isset($data['canupload']) ? $data['canupload'] : null;
        $this->container['candownload'] = isset($data['candownload']) ? $data['candownload'] : null;
        $this->container['favoritelist'] = isset($data['favoritelist']) ? $data['favoritelist'] : null;
        $this->container['favoriteid'] = isset($data['favoriteid']) ? $data['favoriteid'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['showquickedit'] = isset($data['showquickedit']) ? $data['showquickedit'] : null;
        $this->container['showlockunlock'] = isset($data['showlockunlock']) ? $data['showlockunlock'] : null;
        $this->container['showshareoption'] = isset($data['showshareoption']) ? $data['showshareoption'] : null;
        $this->container['cansetacls'] = isset($data['cansetacls']) ? $data['cansetacls'] : null;
        $this->container['disallowpreviewdownload'] = isset($data['disallowpreviewdownload']) ? $data['disallowpreviewdownload'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['dirpath'] === null) {
            $invalidProperties[] = "'dirpath' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['ext'] === null) {
            $invalidProperties[] = "'ext' can't be null";
        }
        if ($this->container['fullsize'] === null) {
            $invalidProperties[] = "'fullsize' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['fullfilename'] === null) {
            $invalidProperties[] = "'fullfilename' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['modifiedpoch'] === null) {
            $invalidProperties[] = "'modifiedpoch' can't be null";
        }
        if ($this->container['modifiediso'] === null) {
            $invalidProperties[] = "'modifiediso' can't be null";
        }
        if ($this->container['isroot'] === null) {
            $invalidProperties[] = "'isroot' can't be null";
        }
        if ($this->container['isshareable'] === null) {
            $invalidProperties[] = "'isshareable' can't be null";
        }
        if ($this->container['issyncable'] === null) {
            $invalidProperties[] = "'issyncable' can't be null";
        }
        if ($this->container['isshared'] === null) {
            $invalidProperties[] = "'isshared' can't be null";
        }
        if ($this->container['canrename'] === null) {
            $invalidProperties[] = "'canrename' can't be null";
        }
        if ($this->container['showprev'] === null) {
            $invalidProperties[] = "'showprev' can't be null";
        }
        if ($this->container['canfavorite'] === null) {
            $invalidProperties[] = "'canfavorite' can't be null";
        }
        if ($this->container['canupload'] === null) {
            $invalidProperties[] = "'canupload' can't be null";
        }
        if ($this->container['candownload'] === null) {
            $invalidProperties[] = "'candownload' can't be null";
        }
        if ($this->container['favoritelist'] === null) {
            $invalidProperties[] = "'favoritelist' can't be null";
        }
        if ($this->container['favoriteid'] === null) {
            $invalidProperties[] = "'favoriteid' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['showquickedit'] === null) {
            $invalidProperties[] = "'showquickedit' can't be null";
        }
        if ($this->container['showlockunlock'] === null) {
            $invalidProperties[] = "'showlockunlock' can't be null";
        }
        if ($this->container['showshareoption'] === null) {
            $invalidProperties[] = "'showshareoption' can't be null";
        }
        if ($this->container['cansetacls'] === null) {
            $invalidProperties[] = "'cansetacls' can't be null";
        }
        if ($this->container['disallowpreviewdownload'] === null) {
            $invalidProperties[] = "'disallowpreviewdownload' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['path'] === null) {
            return false;
        }
        if ($this->container['dirpath'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ext'] === null) {
            return false;
        }
        if ($this->container['fullsize'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['fullfilename'] === null) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        if ($this->container['modifiedpoch'] === null) {
            return false;
        }
        if ($this->container['modifiediso'] === null) {
            return false;
        }
        if ($this->container['isroot'] === null) {
            return false;
        }
        if ($this->container['isshareable'] === null) {
            return false;
        }
        if ($this->container['issyncable'] === null) {
            return false;
        }
        if ($this->container['isshared'] === null) {
            return false;
        }
        if ($this->container['canrename'] === null) {
            return false;
        }
        if ($this->container['showprev'] === null) {
            return false;
        }
        if ($this->container['canfavorite'] === null) {
            return false;
        }
        if ($this->container['canupload'] === null) {
            return false;
        }
        if ($this->container['candownload'] === null) {
            return false;
        }
        if ($this->container['favoritelist'] === null) {
            return false;
        }
        if ($this->container['favoriteid'] === null) {
            return false;
        }
        if ($this->container['order'] === null) {
            return false;
        }
        if ($this->container['showquickedit'] === null) {
            return false;
        }
        if ($this->container['showlockunlock'] === null) {
            return false;
        }
        if ($this->container['showshareoption'] === null) {
            return false;
        }
        if ($this->container['cansetacls'] === null) {
            return false;
        }
        if ($this->container['disallowpreviewdownload'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path of file / folder
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets dirpath
     *
     * @return string
     */
    public function getDirpath()
    {
        return $this->container['dirpath'];
    }

    /**
     * Sets dirpath
     *
     * @param string $dirpath directory path
     *
     * @return $this
     */
    public function setDirpath($dirpath)
    {
        $this->container['dirpath'] = $dirpath;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name folder / file name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return string
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param string $ext extension if any set
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets fullsize
     *
     * @return float
     */
    public function getFullsize()
    {
        return $this->container['fullsize'];
    }

    /**
     * Sets fullsize
     *
     * @param float $fullsize full size is set to 0
     *
     * @return $this
     */
    public function setFullsize($fullsize)
    {
        $this->container['fullsize'] = $fullsize;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param string $modified set when modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type can be dir/file
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fullfilename
     *
     * @return string
     */
    public function getFullfilename()
    {
        return $this->container['fullfilename'];
    }

    /**
     * Sets fullfilename
     *
     * @param string $fullfilename full file/folder name
     *
     * @return $this
     */
    public function setFullfilename($fullfilename)
    {
        $this->container['fullfilename'] = $fullfilename;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size size of the folder
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets modifiedpoch
     *
     * @return string
     */
    public function getModifiedpoch()
    {
        return $this->container['modifiedpoch'];
    }

    /**
     * Sets modifiedpoch
     *
     * @param string $modifiedpoch set when modified
     *
     * @return $this
     */
    public function setModifiedpoch($modifiedpoch)
    {
        $this->container['modifiedpoch'] = $modifiedpoch;

        return $this;
    }

    /**
     * Gets modifiediso
     *
     * @return string
     */
    public function getModifiediso()
    {
        return $this->container['modifiediso'];
    }

    /**
     * Sets modifiediso
     *
     * @param string $modifiediso specifies modified date and time
     *
     * @return $this
     */
    public function setModifiediso($modifiediso)
    {
        $this->container['modifiediso'] = $modifiediso;

        return $this;
    }

    /**
     * Gets isroot
     *
     * @return float
     */
    public function getIsroot()
    {
        return $this->container['isroot'];
    }

    /**
     * Sets isroot
     *
     * @param float $isroot whether it can be the root directory or not
     *
     * @return $this
     */
    public function setIsroot($isroot)
    {
        $this->container['isroot'] = $isroot;

        return $this;
    }

    /**
     * Gets isshareable
     *
     * @return float
     */
    public function getIsshareable()
    {
        return $this->container['isshareable'];
    }

    /**
     * Sets isshareable
     *
     * @param float $isshareable whether it can be shareable or not
     *
     * @return $this
     */
    public function setIsshareable($isshareable)
    {
        $this->container['isshareable'] = $isshareable;

        return $this;
    }

    /**
     * Gets issyncable
     *
     * @return float
     */
    public function getIssyncable()
    {
        return $this->container['issyncable'];
    }

    /**
     * Sets issyncable
     *
     * @param float $issyncable whether it can be syncable or not
     *
     * @return $this
     */
    public function setIssyncable($issyncable)
    {
        $this->container['issyncable'] = $issyncable;

        return $this;
    }

    /**
     * Gets isshared
     *
     * @return float
     */
    public function getIsshared()
    {
        return $this->container['isshared'];
    }

    /**
     * Sets isshared
     *
     * @param float $isshared whether it is shared or not
     *
     * @return $this
     */
    public function setIsshared($isshared)
    {
        $this->container['isshared'] = $isshared;

        return $this;
    }

    /**
     * Gets canrename
     *
     * @return float
     */
    public function getCanrename()
    {
        return $this->container['canrename'];
    }

    /**
     * Sets canrename
     *
     * @param float $canrename whether the files/ folders can be renamed or not
     *
     * @return $this
     */
    public function setCanrename($canrename)
    {
        $this->container['canrename'] = $canrename;

        return $this;
    }

    /**
     * Gets showprev
     *
     * @return float
     */
    public function getShowprev()
    {
        return $this->container['showprev'];
    }

    /**
     * Sets showprev
     *
     * @param float $showprev whether show preview is set or not
     *
     * @return $this
     */
    public function setShowprev($showprev)
    {
        $this->container['showprev'] = $showprev;

        return $this;
    }

    /**
     * Gets canfavorite
     *
     * @return float
     */
    public function getCanfavorite()
    {
        return $this->container['canfavorite'];
    }

    /**
     * Sets canfavorite
     *
     * @param float $canfavorite whether it can be added in favorites or not
     *
     * @return $this
     */
    public function setCanfavorite($canfavorite)
    {
        $this->container['canfavorite'] = $canfavorite;

        return $this;
    }

    /**
     * Gets canupload
     *
     * @return float
     */
    public function getCanupload()
    {
        return $this->container['canupload'];
    }

    /**
     * Sets canupload
     *
     * @param float $canupload whether it can upload or not
     *
     * @return $this
     */
    public function setCanupload($canupload)
    {
        $this->container['canupload'] = $canupload;

        return $this;
    }

    /**
     * Gets candownload
     *
     * @return float
     */
    public function getCandownload()
    {
        return $this->container['candownload'];
    }

    /**
     * Sets candownload
     *
     * @param float $candownload whether it can download or not
     *
     * @return $this
     */
    public function setCandownload($candownload)
    {
        $this->container['candownload'] = $candownload;

        return $this;
    }

    /**
     * Gets favoritelist
     *
     * @return float
     */
    public function getFavoritelist()
    {
        return $this->container['favoritelist'];
    }

    /**
     * Sets favoritelist
     *
     * @param float $favoritelist favorite id list name
     *
     * @return $this
     */
    public function setFavoritelist($favoritelist)
    {
        $this->container['favoritelist'] = $favoritelist;

        return $this;
    }

    /**
     * Gets favoriteid
     *
     * @return float
     */
    public function getFavoriteid()
    {
        return $this->container['favoriteid'];
    }

    /**
     * Sets favoriteid
     *
     * @param float $favoriteid favorite id of the folder
     *
     * @return $this
     */
    public function setFavoriteid($favoriteid)
    {
        $this->container['favoriteid'] = $favoriteid;

        return $this;
    }

    /**
     * Gets order
     *
     * @return float
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param float $order whether in order or not
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets showquickedit
     *
     * @return float
     */
    public function getShowquickedit()
    {
        return $this->container['showquickedit'];
    }

    /**
     * Sets showquickedit
     *
     * @param float $showquickedit quick edit option enabled
     *
     * @return $this
     */
    public function setShowquickedit($showquickedit)
    {
        $this->container['showquickedit'] = $showquickedit;

        return $this;
    }

    /**
     * Gets showlockunlock
     *
     * @return float
     */
    public function getShowlockunlock()
    {
        return $this->container['showlockunlock'];
    }

    /**
     * Sets showlockunlock
     *
     * @param float $showlockunlock locking / unclock enabled
     *
     * @return $this
     */
    public function setShowlockunlock($showlockunlock)
    {
        $this->container['showlockunlock'] = $showlockunlock;

        return $this;
    }

    /**
     * Gets showshareoption
     *
     * @return float
     */
    public function getShowshareoption()
    {
        return $this->container['showshareoption'];
    }

    /**
     * Sets showshareoption
     *
     * @param float $showshareoption sharing options enabled
     *
     * @return $this
     */
    public function setShowshareoption($showshareoption)
    {
        $this->container['showshareoption'] = $showshareoption;

        return $this;
    }

    /**
     * Gets cansetacls
     *
     * @return float
     */
    public function getCansetacls()
    {
        return $this->container['cansetacls'];
    }

    /**
     * Sets cansetacls
     *
     * @param float $cansetacls specifies if security folder permission can be set or no
     *
     * @return $this
     */
    public function setCansetacls($cansetacls)
    {
        $this->container['cansetacls'] = $cansetacls;

        return $this;
    }

    /**
     * Gets disallowpreviewdownload
     *
     * @return float
     */
    public function getDisallowpreviewdownload()
    {
        return $this->container['disallowpreviewdownload'];
    }

    /**
     * Sets disallowpreviewdownload
     *
     * @param float $disallowpreviewdownload preview download enabled or disabled
     *
     * @return $this
     */
    public function setDisallowpreviewdownload($disallowpreviewdownload)
    {
        $this->container['disallowpreviewdownload'] = $disallowpreviewdownload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


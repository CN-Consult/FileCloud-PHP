<?php
/**
 * GetfavoritesinlistResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 18.1.0.682
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetfavoritesinlistResponse Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetfavoritesinlistResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetfavoritesinlistResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'dirpath' => 'string',
        'name' => 'float',
        'ext' => 'string',
        'isroot' => 'float',
        'isshareable' => 'float',
        'canfavorite' => 'float',
        'fullfilename' => 'float',
        'size' => 'float',
        'fullsize' => 'float',
        'modified' => 'float',
        'modifiedepoch' => 'float',
        'type' => 'float',
        'favoritelistid' => 'float',
        'favoriteid' => 'float',
        'order' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'path' => null,
        'dirpath' => null,
        'name' => null,
        'ext' => null,
        'isroot' => null,
        'isshareable' => null,
        'canfavorite' => null,
        'fullfilename' => null,
        'size' => null,
        'fullsize' => null,
        'modified' => null,
        'modifiedepoch' => null,
        'type' => null,
        'favoritelistid' => null,
        'favoriteid' => null,
        'order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'dirpath' => 'dirpath',
        'name' => 'name',
        'ext' => 'ext',
        'isroot' => 'isroot',
        'isshareable' => 'isshareable',
        'canfavorite' => 'canfavorite',
        'fullfilename' => 'fullfilename',
        'size' => 'size',
        'fullsize' => 'fullsize',
        'modified' => 'modified',
        'modifiedepoch' => 'modifiedepoch',
        'type' => 'type',
        'favoritelistid' => 'favoritelistid',
        'favoriteid' => 'favoriteid',
        'order' => 'order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'dirpath' => 'setDirpath',
        'name' => 'setName',
        'ext' => 'setExt',
        'isroot' => 'setIsroot',
        'isshareable' => 'setIsshareable',
        'canfavorite' => 'setCanfavorite',
        'fullfilename' => 'setFullfilename',
        'size' => 'setSize',
        'fullsize' => 'setFullsize',
        'modified' => 'setModified',
        'modifiedepoch' => 'setModifiedepoch',
        'type' => 'setType',
        'favoritelistid' => 'setFavoritelistid',
        'favoriteid' => 'setFavoriteid',
        'order' => 'setOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'dirpath' => 'getDirpath',
        'name' => 'getName',
        'ext' => 'getExt',
        'isroot' => 'getIsroot',
        'isshareable' => 'getIsshareable',
        'canfavorite' => 'getCanfavorite',
        'fullfilename' => 'getFullfilename',
        'size' => 'getSize',
        'fullsize' => 'getFullsize',
        'modified' => 'getModified',
        'modifiedepoch' => 'getModifiedepoch',
        'type' => 'getType',
        'favoritelistid' => 'getFavoritelistid',
        'favoriteid' => 'getFavoriteid',
        'order' => 'getOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['dirpath'] = isset($data['dirpath']) ? $data['dirpath'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['isroot'] = isset($data['isroot']) ? $data['isroot'] : null;
        $this->container['isshareable'] = isset($data['isshareable']) ? $data['isshareable'] : null;
        $this->container['canfavorite'] = isset($data['canfavorite']) ? $data['canfavorite'] : null;
        $this->container['fullfilename'] = isset($data['fullfilename']) ? $data['fullfilename'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['fullsize'] = isset($data['fullsize']) ? $data['fullsize'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['modifiedepoch'] = isset($data['modifiedepoch']) ? $data['modifiedepoch'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['favoritelistid'] = isset($data['favoritelistid']) ? $data['favoritelistid'] : null;
        $this->container['favoriteid'] = isset($data['favoriteid']) ? $data['favoriteid'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['dirpath'] === null) {
            $invalidProperties[] = "'dirpath' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['ext'] === null) {
            $invalidProperties[] = "'ext' can't be null";
        }
        if ($this->container['isroot'] === null) {
            $invalidProperties[] = "'isroot' can't be null";
        }
        if ($this->container['isshareable'] === null) {
            $invalidProperties[] = "'isshareable' can't be null";
        }
        if ($this->container['canfavorite'] === null) {
            $invalidProperties[] = "'canfavorite' can't be null";
        }
        if ($this->container['fullfilename'] === null) {
            $invalidProperties[] = "'fullfilename' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['fullsize'] === null) {
            $invalidProperties[] = "'fullsize' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['modifiedepoch'] === null) {
            $invalidProperties[] = "'modifiedepoch' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['favoritelistid'] === null) {
            $invalidProperties[] = "'favoritelistid' can't be null";
        }
        if ($this->container['favoriteid'] === null) {
            $invalidProperties[] = "'favoriteid' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['path'] === null) {
            return false;
        }
        if ($this->container['dirpath'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ext'] === null) {
            return false;
        }
        if ($this->container['isroot'] === null) {
            return false;
        }
        if ($this->container['isshareable'] === null) {
            return false;
        }
        if ($this->container['canfavorite'] === null) {
            return false;
        }
        if ($this->container['fullfilename'] === null) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        if ($this->container['fullsize'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['modifiedepoch'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['favoritelistid'] === null) {
            return false;
        }
        if ($this->container['favoriteid'] === null) {
            return false;
        }
        if ($this->container['order'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path of the file
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets dirpath
     *
     * @return string
     */
    public function getDirpath()
    {
        return $this->container['dirpath'];
    }

    /**
     * Sets dirpath
     *
     * @param string $dirpath directory path of file
     *
     * @return $this
     */
    public function setDirpath($dirpath)
    {
        $this->container['dirpath'] = $dirpath;

        return $this;
    }

    /**
     * Gets name
     *
     * @return float
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param float $name name of file
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return string
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param string $ext extension of file
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets isroot
     *
     * @return float
     */
    public function getIsroot()
    {
        return $this->container['isroot'];
    }

    /**
     * Sets isroot
     *
     * @param float $isroot whether the file/folder is root folder
     *
     * @return $this
     */
    public function setIsroot($isroot)
    {
        $this->container['isroot'] = $isroot;

        return $this;
    }

    /**
     * Gets isshareable
     *
     * @return float
     */
    public function getIsshareable()
    {
        return $this->container['isshareable'];
    }

    /**
     * Sets isshareable
     *
     * @param float $isshareable whether the file is shareable or not
     *
     * @return $this
     */
    public function setIsshareable($isshareable)
    {
        $this->container['isshareable'] = $isshareable;

        return $this;
    }

    /**
     * Gets canfavorite
     *
     * @return float
     */
    public function getCanfavorite()
    {
        return $this->container['canfavorite'];
    }

    /**
     * Sets canfavorite
     *
     * @param float $canfavorite whether the file can be added as a favorite or not
     *
     * @return $this
     */
    public function setCanfavorite($canfavorite)
    {
        $this->container['canfavorite'] = $canfavorite;

        return $this;
    }

    /**
     * Gets fullfilename
     *
     * @return float
     */
    public function getFullfilename()
    {
        return $this->container['fullfilename'];
    }

    /**
     * Sets fullfilename
     *
     * @param float $fullfilename full file name with the directory path
     *
     * @return $this
     */
    public function setFullfilename($fullfilename)
    {
        $this->container['fullfilename'] = $fullfilename;

        return $this;
    }

    /**
     * Gets size
     *
     * @return float
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param float $size size of the file
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets fullsize
     *
     * @return float
     */
    public function getFullsize()
    {
        return $this->container['fullsize'];
    }

    /**
     * Sets fullsize
     *
     * @param float $fullsize full size of file in bytes
     *
     * @return $this
     */
    public function setFullsize($fullsize)
    {
        $this->container['fullsize'] = $fullsize;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return float
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param float $modified date and time the file was added in favorite
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets modifiedepoch
     *
     * @return float
     */
    public function getModifiedepoch()
    {
        return $this->container['modifiedepoch'];
    }

    /**
     * Sets modifiedepoch
     *
     * @param float $modifiedepoch 
     *
     * @return $this
     */
    public function setModifiedepoch($modifiedepoch)
    {
        $this->container['modifiedepoch'] = $modifiedepoch;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type type of document
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets favoritelistid
     *
     * @return float
     */
    public function getFavoritelistid()
    {
        return $this->container['favoritelistid'];
    }

    /**
     * Sets favoritelistid
     *
     * @param float $favoritelistid favorite list id number
     *
     * @return $this
     */
    public function setFavoritelistid($favoritelistid)
    {
        $this->container['favoritelistid'] = $favoritelistid;

        return $this;
    }

    /**
     * Gets favoriteid
     *
     * @return float
     */
    public function getFavoriteid()
    {
        return $this->container['favoriteid'];
    }

    /**
     * Sets favoriteid
     *
     * @param float $favoriteid favorite id number
     *
     * @return $this
     */
    public function setFavoriteid($favoriteid)
    {
        $this->container['favoriteid'] = $favoriteid;

        return $this;
    }

    /**
     * Gets order
     *
     * @return float
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param float $order 
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


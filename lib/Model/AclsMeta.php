<?php
/**
 * AclsMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud_User_API
 *
 * FileCloud HTTP API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AclsMeta Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AclsMeta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'acls_meta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aclid' => 'string',
        'createddate' => 'string',
        'createdts' => 'string',
        'path' => 'string',
        'inherit' => 'string',
        'usercount' => 'string',
        'groupcount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aclid' => null,
        'createddate' => null,
        'createdts' => null,
        'path' => null,
        'inherit' => null,
        'usercount' => null,
        'groupcount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aclid' => 'aclid',
        'createddate' => 'createddate',
        'createdts' => 'createdts',
        'path' => 'path',
        'inherit' => 'inherit',
        'usercount' => 'usercount',
        'groupcount' => 'groupcount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aclid' => 'setAclid',
        'createddate' => 'setCreateddate',
        'createdts' => 'setCreatedts',
        'path' => 'setPath',
        'inherit' => 'setInherit',
        'usercount' => 'setUsercount',
        'groupcount' => 'setGroupcount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aclid' => 'getAclid',
        'createddate' => 'getCreateddate',
        'createdts' => 'getCreatedts',
        'path' => 'getPath',
        'inherit' => 'getInherit',
        'usercount' => 'getUsercount',
        'groupcount' => 'getGroupcount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aclid'] = isset($data['aclid']) ? $data['aclid'] : null;
        $this->container['createddate'] = isset($data['createddate']) ? $data['createddate'] : null;
        $this->container['createdts'] = isset($data['createdts']) ? $data['createdts'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['inherit'] = isset($data['inherit']) ? $data['inherit'] : null;
        $this->container['usercount'] = isset($data['usercount']) ? $data['usercount'] : null;
        $this->container['groupcount'] = isset($data['groupcount']) ? $data['groupcount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aclid
     *
     * @return string
     */
    public function getAclid()
    {
        return $this->container['aclid'];
    }

    /**
     * Sets aclid
     *
     * @param string $aclid Search term
     *
     * @return $this
     */
    public function setAclid($aclid)
    {
        $this->container['aclid'] = $aclid;

        return $this;
    }

    /**
     * Gets createddate
     *
     * @return string
     */
    public function getCreateddate()
    {
        return $this->container['createddate'];
    }

    /**
     * Sets createddate
     *
     * @param string $createddate Search term
     *
     * @return $this
     */
    public function setCreateddate($createddate)
    {
        $this->container['createddate'] = $createddate;

        return $this;
    }

    /**
     * Gets createdts
     *
     * @return string
     */
    public function getCreatedts()
    {
        return $this->container['createdts'];
    }

    /**
     * Sets createdts
     *
     * @param string $createdts Search term
     *
     * @return $this
     */
    public function setCreatedts($createdts)
    {
        $this->container['createdts'] = $createdts;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Search term
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets inherit
     *
     * @return string
     */
    public function getInherit()
    {
        return $this->container['inherit'];
    }

    /**
     * Sets inherit
     *
     * @param string $inherit Search term
     *
     * @return $this
     */
    public function setInherit($inherit)
    {
        $this->container['inherit'] = $inherit;

        return $this;
    }

    /**
     * Gets usercount
     *
     * @return string
     */
    public function getUsercount()
    {
        return $this->container['usercount'];
    }

    /**
     * Sets usercount
     *
     * @param string $usercount Search term
     *
     * @return $this
     */
    public function setUsercount($usercount)
    {
        $this->container['usercount'] = $usercount;

        return $this;
    }

    /**
     * Gets groupcount
     *
     * @return string
     */
    public function getGroupcount()
    {
        return $this->container['groupcount'];
    }

    /**
     * Sets groupcount
     *
     * @param string $groupcount Search term
     *
     * @return $this
     */
    public function setGroupcount($groupcount)
    {
        $this->container['groupcount'] = $groupcount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * GetactivitystreamResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetactivitystreamResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetactivitystreamResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetactivitystreamResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'isfile' => 'string',
        'parent' => 'string',
        'actioncode' => 'string',
        'who' => 'string',
        'when' => 'string',
        'how' => 'string',
        'misc' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'isfile' => 'isfile',
        'parent' => 'parent',
        'actioncode' => 'actioncode',
        'who' => 'who',
        'when' => 'when',
        'how' => 'how',
        'misc' => 'misc'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'isfile' => 'setIsfile',
        'parent' => 'setParent',
        'actioncode' => 'setActioncode',
        'who' => 'setWho',
        'when' => 'setWhen',
        'how' => 'setHow',
        'misc' => 'setMisc'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'isfile' => 'getIsfile',
        'parent' => 'getParent',
        'actioncode' => 'getActioncode',
        'who' => 'getWho',
        'when' => 'getWhen',
        'how' => 'getHow',
        'misc' => 'getMisc'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['isfile'] = isset($data['isfile']) ? $data['isfile'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['actioncode'] = isset($data['actioncode']) ? $data['actioncode'] : null;
        $this->container['who'] = isset($data['who']) ? $data['who'] : null;
        $this->container['when'] = isset($data['when']) ? $data['when'] : null;
        $this->container['how'] = isset($data['how']) ? $data['how'] : null;
        $this->container['misc'] = isset($data['misc']) ? $data['misc'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['path'] === null) {
            $invalid_properties[] = "'path' can't be null";
        }
        if ($this->container['isfile'] === null) {
            $invalid_properties[] = "'isfile' can't be null";
        }
        if ($this->container['parent'] === null) {
            $invalid_properties[] = "'parent' can't be null";
        }
        if ($this->container['actioncode'] === null) {
            $invalid_properties[] = "'actioncode' can't be null";
        }
        if ($this->container['who'] === null) {
            $invalid_properties[] = "'who' can't be null";
        }
        if ($this->container['when'] === null) {
            $invalid_properties[] = "'when' can't be null";
        }
        if ($this->container['how'] === null) {
            $invalid_properties[] = "'how' can't be null";
        }
        if ($this->container['misc'] === null) {
            $invalid_properties[] = "'misc' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['path'] === null) {
            return false;
        }
        if ($this->container['isfile'] === null) {
            return false;
        }
        if ($this->container['parent'] === null) {
            return false;
        }
        if ($this->container['actioncode'] === null) {
            return false;
        }
        if ($this->container['who'] === null) {
            return false;
        }
        if ($this->container['when'] === null) {
            return false;
        }
        if ($this->container['how'] === null) {
            return false;
        }
        if ($this->container['misc'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path specify path for which you want to get the activity list
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets isfile
     * @return string
     */
    public function getIsfile()
    {
        return $this->container['isfile'];
    }

    /**
     * Sets isfile
     * @param string $isfile 0 - path specified is a folder, 1 - specified path is a file
     * @return $this
     */
    public function setIsfile($isfile)
    {
        $this->container['isfile'] = $isfile;

        return $this;
    }

    /**
     * Gets parent
     * @return string
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     * @param string $parent parent path of path specified
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets actioncode
     * @return string
     */
    public function getActioncode()
    {
        return $this->container['actioncode'];
    }

    /**
     * Sets actioncode
     * @param string $actioncode action-code says the operation performed on the file/folder
     * @return $this
     */
    public function setActioncode($actioncode)
    {
        $this->container['actioncode'] = $actioncode;

        return $this;
    }

    /**
     * Gets who
     * @return string
     */
    public function getWho()
    {
        return $this->container['who'];
    }

    /**
     * Sets who
     * @param string $who who performed the operation on that file/folder
     * @return $this
     */
    public function setWho($who)
    {
        $this->container['who'] = $who;

        return $this;
    }

    /**
     * Gets when
     * @return string
     */
    public function getWhen()
    {
        return $this->container['when'];
    }

    /**
     * Sets when
     * @param string $when time and date the operation was performed on the file/folder
     * @return $this
     */
    public function setWhen($when)
    {
        $this->container['when'] = $when;

        return $this;
    }

    /**
     * Gets how
     * @return string
     */
    public function getHow()
    {
        return $this->container['how'];
    }

    /**
     * Sets how
     * @param string $how how was the operation performed eg: web browser,filecloud drive
     * @return $this
     */
    public function setHow($how)
    {
        $this->container['how'] = $how;

        return $this;
    }

    /**
     * Gets misc
     * @return string
     */
    public function getMisc()
    {
        return $this->container['misc'];
    }

    /**
     * Sets misc
     * @param string $misc extra information if any
     * @return $this
     */
    public function setMisc($misc)
    {
        $this->container['misc'] = $misc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

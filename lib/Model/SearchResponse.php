<?php
/**
 * SearchResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SearchResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SearchResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'dirpath' => 'string',
        'name' => 'string',
        'ext' => 'string',
        'isshareable' => 'float',
        'canrename' => 'float',
        'showprev' => 'float',
        'canfavorite' => 'float',
        'fullfilename' => 'string',
        'size' => 'string',
        'fullsize' => 'float',
        'type' => 'string',
        'favoritelist' => 'float',
        'favoriteid' => 'float',
        'order' => 'float',
        'modifiedpoch' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'dirpath' => 'dirpath',
        'name' => 'name',
        'ext' => 'ext',
        'isshareable' => 'isshareable',
        'canrename' => 'canrename',
        'showprev' => 'showprev',
        'canfavorite' => 'canfavorite',
        'fullfilename' => 'fullfilename',
        'size' => 'size',
        'fullsize' => 'fullsize',
        'type' => 'type',
        'favoritelist' => 'favoritelist',
        'favoriteid' => 'favoriteid',
        'order' => 'order',
        'modifiedpoch' => 'modifiedpoch'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'dirpath' => 'setDirpath',
        'name' => 'setName',
        'ext' => 'setExt',
        'isshareable' => 'setIsshareable',
        'canrename' => 'setCanrename',
        'showprev' => 'setShowprev',
        'canfavorite' => 'setCanfavorite',
        'fullfilename' => 'setFullfilename',
        'size' => 'setSize',
        'fullsize' => 'setFullsize',
        'type' => 'setType',
        'favoritelist' => 'setFavoritelist',
        'favoriteid' => 'setFavoriteid',
        'order' => 'setOrder',
        'modifiedpoch' => 'setModifiedpoch'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'dirpath' => 'getDirpath',
        'name' => 'getName',
        'ext' => 'getExt',
        'isshareable' => 'getIsshareable',
        'canrename' => 'getCanrename',
        'showprev' => 'getShowprev',
        'canfavorite' => 'getCanfavorite',
        'fullfilename' => 'getFullfilename',
        'size' => 'getSize',
        'fullsize' => 'getFullsize',
        'type' => 'getType',
        'favoritelist' => 'getFavoritelist',
        'favoriteid' => 'getFavoriteid',
        'order' => 'getOrder',
        'modifiedpoch' => 'getModifiedpoch'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['dirpath'] = isset($data['dirpath']) ? $data['dirpath'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['isshareable'] = isset($data['isshareable']) ? $data['isshareable'] : null;
        $this->container['canrename'] = isset($data['canrename']) ? $data['canrename'] : null;
        $this->container['showprev'] = isset($data['showprev']) ? $data['showprev'] : null;
        $this->container['canfavorite'] = isset($data['canfavorite']) ? $data['canfavorite'] : null;
        $this->container['fullfilename'] = isset($data['fullfilename']) ? $data['fullfilename'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['fullsize'] = isset($data['fullsize']) ? $data['fullsize'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['favoritelist'] = isset($data['favoritelist']) ? $data['favoritelist'] : null;
        $this->container['favoriteid'] = isset($data['favoriteid']) ? $data['favoriteid'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['modifiedpoch'] = isset($data['modifiedpoch']) ? $data['modifiedpoch'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['path'] === null) {
            $invalid_properties[] = "'path' can't be null";
        }
        if ($this->container['dirpath'] === null) {
            $invalid_properties[] = "'dirpath' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['ext'] === null) {
            $invalid_properties[] = "'ext' can't be null";
        }
        if ($this->container['isshareable'] === null) {
            $invalid_properties[] = "'isshareable' can't be null";
        }
        if ($this->container['canrename'] === null) {
            $invalid_properties[] = "'canrename' can't be null";
        }
        if ($this->container['showprev'] === null) {
            $invalid_properties[] = "'showprev' can't be null";
        }
        if ($this->container['canfavorite'] === null) {
            $invalid_properties[] = "'canfavorite' can't be null";
        }
        if ($this->container['fullfilename'] === null) {
            $invalid_properties[] = "'fullfilename' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalid_properties[] = "'size' can't be null";
        }
        if ($this->container['fullsize'] === null) {
            $invalid_properties[] = "'fullsize' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['favoritelist'] === null) {
            $invalid_properties[] = "'favoritelist' can't be null";
        }
        if ($this->container['favoriteid'] === null) {
            $invalid_properties[] = "'favoriteid' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalid_properties[] = "'order' can't be null";
        }
        if ($this->container['modifiedpoch'] === null) {
            $invalid_properties[] = "'modifiedpoch' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['path'] === null) {
            return false;
        }
        if ($this->container['dirpath'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ext'] === null) {
            return false;
        }
        if ($this->container['isshareable'] === null) {
            return false;
        }
        if ($this->container['canrename'] === null) {
            return false;
        }
        if ($this->container['showprev'] === null) {
            return false;
        }
        if ($this->container['canfavorite'] === null) {
            return false;
        }
        if ($this->container['fullfilename'] === null) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        if ($this->container['fullsize'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['favoritelist'] === null) {
            return false;
        }
        if ($this->container['favoriteid'] === null) {
            return false;
        }
        if ($this->container['order'] === null) {
            return false;
        }
        if ($this->container['modifiedpoch'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path path of file / folder
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets dirpath
     * @return string
     */
    public function getDirpath()
    {
        return $this->container['dirpath'];
    }

    /**
     * Sets dirpath
     * @param string $dirpath directory path
     * @return $this
     */
    public function setDirpath($dirpath)
    {
        $this->container['dirpath'] = $dirpath;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name folder / file name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ext
     * @return string
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     * @param string $ext extension if any set
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets isshareable
     * @return float
     */
    public function getIsshareable()
    {
        return $this->container['isshareable'];
    }

    /**
     * Sets isshareable
     * @param float $isshareable whether it can be shareable or not
     * @return $this
     */
    public function setIsshareable($isshareable)
    {
        $this->container['isshareable'] = $isshareable;

        return $this;
    }

    /**
     * Gets canrename
     * @return float
     */
    public function getCanrename()
    {
        return $this->container['canrename'];
    }

    /**
     * Sets canrename
     * @param float $canrename whether the files/ folders can be renamed or not
     * @return $this
     */
    public function setCanrename($canrename)
    {
        $this->container['canrename'] = $canrename;

        return $this;
    }

    /**
     * Gets showprev
     * @return float
     */
    public function getShowprev()
    {
        return $this->container['showprev'];
    }

    /**
     * Sets showprev
     * @param float $showprev whether show preview is set or not
     * @return $this
     */
    public function setShowprev($showprev)
    {
        $this->container['showprev'] = $showprev;

        return $this;
    }

    /**
     * Gets canfavorite
     * @return float
     */
    public function getCanfavorite()
    {
        return $this->container['canfavorite'];
    }

    /**
     * Sets canfavorite
     * @param float $canfavorite whether it can be added in favorites or not
     * @return $this
     */
    public function setCanfavorite($canfavorite)
    {
        $this->container['canfavorite'] = $canfavorite;

        return $this;
    }

    /**
     * Gets fullfilename
     * @return string
     */
    public function getFullfilename()
    {
        return $this->container['fullfilename'];
    }

    /**
     * Sets fullfilename
     * @param string $fullfilename full file/folder name
     * @return $this
     */
    public function setFullfilename($fullfilename)
    {
        $this->container['fullfilename'] = $fullfilename;

        return $this;
    }

    /**
     * Gets size
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param string $size size of the folder
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets fullsize
     * @return float
     */
    public function getFullsize()
    {
        return $this->container['fullsize'];
    }

    /**
     * Sets fullsize
     * @param float $fullsize full size is set to 0
     * @return $this
     */
    public function setFullsize($fullsize)
    {
        $this->container['fullsize'] = $fullsize;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type type can be dir/file
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets favoritelist
     * @return float
     */
    public function getFavoritelist()
    {
        return $this->container['favoritelist'];
    }

    /**
     * Sets favoritelist
     * @param float $favoritelist favorite id list name
     * @return $this
     */
    public function setFavoritelist($favoritelist)
    {
        $this->container['favoritelist'] = $favoritelist;

        return $this;
    }

    /**
     * Gets favoriteid
     * @return float
     */
    public function getFavoriteid()
    {
        return $this->container['favoriteid'];
    }

    /**
     * Sets favoriteid
     * @param float $favoriteid favorite id of the folder
     * @return $this
     */
    public function setFavoriteid($favoriteid)
    {
        $this->container['favoriteid'] = $favoriteid;

        return $this;
    }

    /**
     * Gets order
     * @return float
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     * @param float $order whether in order or not
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets modifiedpoch
     * @return string
     */
    public function getModifiedpoch()
    {
        return $this->container['modifiedpoch'];
    }

    /**
     * Sets modifiedpoch
     * @param string $modifiedpoch set when modified
     * @return $this
     */
    public function setModifiedpoch($modifiedpoch)
    {
        $this->container['modifiedpoch'] = $modifiedpoch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

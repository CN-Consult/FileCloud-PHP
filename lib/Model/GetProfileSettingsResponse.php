<?php
/**
 * GetprofilesettingsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetprofilesettingsResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetprofilesettingsResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetprofilesettingsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nickname' => 'string',
        'peerid' => 'string',
        'profileroot' => 'string',
        'location' => 'string',
        'displayname' => 'string',
        'email' => 'string',
        'secretqn' => 'string',
        'secretans' => 'string',
        'hint' => 'string',
        'dateformat' => 'string',
        'isremote' => 'string',
        'profileuserdatadir' => 'string',
        'emailverifytag' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'nickname' => 'nickname',
        'peerid' => 'peerid',
        'profileroot' => 'profileroot',
        'location' => 'location',
        'displayname' => 'displayname',
        'email' => 'email',
        'secretqn' => 'secretqn',
        'secretans' => 'secretans',
        'hint' => 'hint',
        'dateformat' => 'dateformat',
        'isremote' => 'isremote',
        'profileuserdatadir' => 'profileuserdatadir',
        'emailverifytag' => 'emailverifytag'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'nickname' => 'setNickname',
        'peerid' => 'setPeerid',
        'profileroot' => 'setProfileroot',
        'location' => 'setLocation',
        'displayname' => 'setDisplayname',
        'email' => 'setEmail',
        'secretqn' => 'setSecretqn',
        'secretans' => 'setSecretans',
        'hint' => 'setHint',
        'dateformat' => 'setDateformat',
        'isremote' => 'setIsremote',
        'profileuserdatadir' => 'setProfileuserdatadir',
        'emailverifytag' => 'setEmailverifytag'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'nickname' => 'getNickname',
        'peerid' => 'getPeerid',
        'profileroot' => 'getProfileroot',
        'location' => 'getLocation',
        'displayname' => 'getDisplayname',
        'email' => 'getEmail',
        'secretqn' => 'getSecretqn',
        'secretans' => 'getSecretans',
        'hint' => 'getHint',
        'dateformat' => 'getDateformat',
        'isremote' => 'getIsremote',
        'profileuserdatadir' => 'getProfileuserdatadir',
        'emailverifytag' => 'getEmailverifytag'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['peerid'] = isset($data['peerid']) ? $data['peerid'] : null;
        $this->container['profileroot'] = isset($data['profileroot']) ? $data['profileroot'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['displayname'] = isset($data['displayname']) ? $data['displayname'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['secretqn'] = isset($data['secretqn']) ? $data['secretqn'] : null;
        $this->container['secretans'] = isset($data['secretans']) ? $data['secretans'] : null;
        $this->container['hint'] = isset($data['hint']) ? $data['hint'] : null;
        $this->container['dateformat'] = isset($data['dateformat']) ? $data['dateformat'] : null;
        $this->container['isremote'] = isset($data['isremote']) ? $data['isremote'] : null;
        $this->container['profileuserdatadir'] = isset($data['profileuserdatadir']) ? $data['profileuserdatadir'] : null;
        $this->container['emailverifytag'] = isset($data['emailverifytag']) ? $data['emailverifytag'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['nickname'] === null) {
            $invalid_properties[] = "'nickname' can't be null";
        }
        if ($this->container['peerid'] === null) {
            $invalid_properties[] = "'peerid' can't be null";
        }
        if ($this->container['profileroot'] === null) {
            $invalid_properties[] = "'profileroot' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalid_properties[] = "'location' can't be null";
        }
        if ($this->container['displayname'] === null) {
            $invalid_properties[] = "'displayname' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['secretqn'] === null) {
            $invalid_properties[] = "'secretqn' can't be null";
        }
        if ($this->container['secretans'] === null) {
            $invalid_properties[] = "'secretans' can't be null";
        }
        if ($this->container['hint'] === null) {
            $invalid_properties[] = "'hint' can't be null";
        }
        if ($this->container['dateformat'] === null) {
            $invalid_properties[] = "'dateformat' can't be null";
        }
        if ($this->container['isremote'] === null) {
            $invalid_properties[] = "'isremote' can't be null";
        }
        if ($this->container['profileuserdatadir'] === null) {
            $invalid_properties[] = "'profileuserdatadir' can't be null";
        }
        if ($this->container['emailverifytag'] === null) {
            $invalid_properties[] = "'emailverifytag' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['nickname'] === null) {
            return false;
        }
        if ($this->container['peerid'] === null) {
            return false;
        }
        if ($this->container['profileroot'] === null) {
            return false;
        }
        if ($this->container['location'] === null) {
            return false;
        }
        if ($this->container['displayname'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['secretqn'] === null) {
            return false;
        }
        if ($this->container['secretans'] === null) {
            return false;
        }
        if ($this->container['hint'] === null) {
            return false;
        }
        if ($this->container['dateformat'] === null) {
            return false;
        }
        if ($this->container['isremote'] === null) {
            return false;
        }
        if ($this->container['profileuserdatadir'] === null) {
            return false;
        }
        if ($this->container['emailverifytag'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets nickname
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     * @param string $nickname nick name of the profile
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets peerid
     * @return string
     */
    public function getPeerid()
    {
        return $this->container['peerid'];
    }

    /**
     * Sets peerid
     * @param string $peerid peer id
     * @return $this
     */
    public function setPeerid($peerid)
    {
        $this->container['peerid'] = $peerid;

        return $this;
    }

    /**
     * Gets profileroot
     * @return string
     */
    public function getProfileroot()
    {
        return $this->container['profileroot'];
    }

    /**
     * Sets profileroot
     * @param string $profileroot 
     * @return $this
     */
    public function setProfileroot($profileroot)
    {
        $this->container['profileroot'] = $profileroot;

        return $this;
    }

    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param string $location 
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets displayname
     * @return string
     */
    public function getDisplayname()
    {
        return $this->container['displayname'];
    }

    /**
     * Sets displayname
     * @param string $displayname displayname of the user
     * @return $this
     */
    public function setDisplayname($displayname)
    {
        $this->container['displayname'] = $displayname;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email email id of the user
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets secretqn
     * @return string
     */
    public function getSecretqn()
    {
        return $this->container['secretqn'];
    }

    /**
     * Sets secretqn
     * @param string $secretqn 
     * @return $this
     */
    public function setSecretqn($secretqn)
    {
        $this->container['secretqn'] = $secretqn;

        return $this;
    }

    /**
     * Gets secretans
     * @return string
     */
    public function getSecretans()
    {
        return $this->container['secretans'];
    }

    /**
     * Sets secretans
     * @param string $secretans 
     * @return $this
     */
    public function setSecretans($secretans)
    {
        $this->container['secretans'] = $secretans;

        return $this;
    }

    /**
     * Gets hint
     * @return string
     */
    public function getHint()
    {
        return $this->container['hint'];
    }

    /**
     * Sets hint
     * @param string $hint 
     * @return $this
     */
    public function setHint($hint)
    {
        $this->container['hint'] = $hint;

        return $this;
    }

    /**
     * Gets dateformat
     * @return string
     */
    public function getDateformat()
    {
        return $this->container['dateformat'];
    }

    /**
     * Sets dateformat
     * @param string $dateformat 
     * @return $this
     */
    public function setDateformat($dateformat)
    {
        $this->container['dateformat'] = $dateformat;

        return $this;
    }

    /**
     * Gets isremote
     * @return string
     */
    public function getIsremote()
    {
        return $this->container['isremote'];
    }

    /**
     * Sets isremote
     * @param string $isremote 
     * @return $this
     */
    public function setIsremote($isremote)
    {
        $this->container['isremote'] = $isremote;

        return $this;
    }

    /**
     * Gets profileuserdatadir
     * @return string
     */
    public function getProfileuserdatadir()
    {
        return $this->container['profileuserdatadir'];
    }

    /**
     * Sets profileuserdatadir
     * @param string $profileuserdatadir 
     * @return $this
     */
    public function setProfileuserdatadir($profileuserdatadir)
    {
        $this->container['profileuserdatadir'] = $profileuserdatadir;

        return $this;
    }

    /**
     * Gets emailverifytag
     * @return string
     */
    public function getEmailverifytag()
    {
        return $this->container['emailverifytag'];
    }

    /**
     * Sets emailverifytag
     * @param string $emailverifytag email verified tag value
     * @return $this
     */
    public function setEmailverifytag($emailverifytag)
    {
        $this->container['emailverifytag'] = $emailverifytag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * SearchgroupsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SearchgroupsResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchgroupsResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SearchgroupsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total' => 'string',
        'groupid' => 'string',
        'groupname' => 'string',
        'emailid' => 'string',
        'createdon' => 'string',
        'autosyncgroup' => 'string',
        'everyonegroup' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'groupid' => 'groupid',
        'groupname' => 'groupname',
        'emailid' => 'emailid',
        'createdon' => 'createdon',
        'autosyncgroup' => 'autosyncgroup',
        'everyonegroup' => 'everyonegroup'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'groupid' => 'setGroupid',
        'groupname' => 'setGroupname',
        'emailid' => 'setEmailid',
        'createdon' => 'setCreatedon',
        'autosyncgroup' => 'setAutosyncgroup',
        'everyonegroup' => 'setEveryonegroup'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'groupid' => 'getGroupid',
        'groupname' => 'getGroupname',
        'emailid' => 'getEmailid',
        'createdon' => 'getCreatedon',
        'autosyncgroup' => 'getAutosyncgroup',
        'everyonegroup' => 'getEveryonegroup'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['groupid'] = isset($data['groupid']) ? $data['groupid'] : null;
        $this->container['groupname'] = isset($data['groupname']) ? $data['groupname'] : null;
        $this->container['emailid'] = isset($data['emailid']) ? $data['emailid'] : null;
        $this->container['createdon'] = isset($data['createdon']) ? $data['createdon'] : null;
        $this->container['autosyncgroup'] = isset($data['autosyncgroup']) ? $data['autosyncgroup'] : null;
        $this->container['everyonegroup'] = isset($data['everyonegroup']) ? $data['everyonegroup'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['total'] === null) {
            $invalid_properties[] = "'total' can't be null";
        }
        if ($this->container['groupid'] === null) {
            $invalid_properties[] = "'groupid' can't be null";
        }
        if ($this->container['groupname'] === null) {
            $invalid_properties[] = "'groupname' can't be null";
        }
        if ($this->container['emailid'] === null) {
            $invalid_properties[] = "'emailid' can't be null";
        }
        if ($this->container['createdon'] === null) {
            $invalid_properties[] = "'createdon' can't be null";
        }
        if ($this->container['autosyncgroup'] === null) {
            $invalid_properties[] = "'autosyncgroup' can't be null";
        }
        if ($this->container['everyonegroup'] === null) {
            $invalid_properties[] = "'everyonegroup' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['total'] === null) {
            return false;
        }
        if ($this->container['groupid'] === null) {
            return false;
        }
        if ($this->container['groupname'] === null) {
            return false;
        }
        if ($this->container['emailid'] === null) {
            return false;
        }
        if ($this->container['createdon'] === null) {
            return false;
        }
        if ($this->container['autosyncgroup'] === null) {
            return false;
        }
        if ($this->container['everyonegroup'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets total
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param string $total total number of groups
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets groupid
     * @return string
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     * @param string $groupid group id number
     * @return $this
     */
    public function setGroupid($groupid)
    {
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets groupname
     * @return string
     */
    public function getGroupname()
    {
        return $this->container['groupname'];
    }

    /**
     * Sets groupname
     * @param string $groupname group name
     * @return $this
     */
    public function setGroupname($groupname)
    {
        $this->container['groupname'] = $groupname;

        return $this;
    }

    /**
     * Gets emailid
     * @return string
     */
    public function getEmailid()
    {
        return $this->container['emailid'];
    }

    /**
     * Sets emailid
     * @param string $emailid group email id
     * @return $this
     */
    public function setEmailid($emailid)
    {
        $this->container['emailid'] = $emailid;

        return $this;
    }

    /**
     * Gets createdon
     * @return string
     */
    public function getCreatedon()
    {
        return $this->container['createdon'];
    }

    /**
     * Sets createdon
     * @param string $createdon created on date and time
     * @return $this
     */
    public function setCreatedon($createdon)
    {
        $this->container['createdon'] = $createdon;

        return $this;
    }

    /**
     * Gets autosyncgroup
     * @return string
     */
    public function getAutosyncgroup()
    {
        return $this->container['autosyncgroup'];
    }

    /**
     * Sets autosyncgroup
     * @param string $autosyncgroup 1 - set, 0 - notset
     * @return $this
     */
    public function setAutosyncgroup($autosyncgroup)
    {
        $this->container['autosyncgroup'] = $autosyncgroup;

        return $this;
    }

    /**
     * Gets everyonegroup
     * @return string
     */
    public function getEveryonegroup()
    {
        return $this->container['everyonegroup'];
    }

    /**
     * Sets everyonegroup
     * @param string $everyonegroup 1 - everyonegroup 0 - not everyonegroup
     * @return $this
     */
    public function setEveryonegroup($everyonegroup)
    {
        $this->container['everyonegroup'] = $everyonegroup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

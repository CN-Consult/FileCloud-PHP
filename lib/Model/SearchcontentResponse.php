<?php
/**
 * SearchcontentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SearchcontentResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchcontentResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SearchcontentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total' => 'string',
        'highlighting' => 'string',
        'path' => 'string',
        'dirpath' => 'float',
        'name' => 'float',
        'ext' => 'float',
        'fullfilename' => 'string',
        'modified' => 'float',
        'type' => 'string',
        'size' => 'string',
        'fullsize' => 'float',
        'validity' => 'float',
        'highlight' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'highlighting' => 'highlighting',
        'path' => 'path',
        'dirpath' => 'dirpath',
        'name' => 'name',
        'ext' => 'ext',
        'fullfilename' => 'fullfilename',
        'modified' => 'modified',
        'type' => 'type',
        'size' => 'size',
        'fullsize' => 'fullsize',
        'validity' => 'validity',
        'highlight' => 'highlight'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'highlighting' => 'setHighlighting',
        'path' => 'setPath',
        'dirpath' => 'setDirpath',
        'name' => 'setName',
        'ext' => 'setExt',
        'fullfilename' => 'setFullfilename',
        'modified' => 'setModified',
        'type' => 'setType',
        'size' => 'setSize',
        'fullsize' => 'setFullsize',
        'validity' => 'setValidity',
        'highlight' => 'setHighlight'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'highlighting' => 'getHighlighting',
        'path' => 'getPath',
        'dirpath' => 'getDirpath',
        'name' => 'getName',
        'ext' => 'getExt',
        'fullfilename' => 'getFullfilename',
        'modified' => 'getModified',
        'type' => 'getType',
        'size' => 'getSize',
        'fullsize' => 'getFullsize',
        'validity' => 'getValidity',
        'highlight' => 'getHighlight'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['highlighting'] = isset($data['highlighting']) ? $data['highlighting'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['dirpath'] = isset($data['dirpath']) ? $data['dirpath'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['fullfilename'] = isset($data['fullfilename']) ? $data['fullfilename'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['fullsize'] = isset($data['fullsize']) ? $data['fullsize'] : null;
        $this->container['validity'] = isset($data['validity']) ? $data['validity'] : null;
        $this->container['highlight'] = isset($data['highlight']) ? $data['highlight'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['total'] === null) {
            $invalid_properties[] = "'total' can't be null";
        }
        if ($this->container['highlighting'] === null) {
            $invalid_properties[] = "'highlighting' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalid_properties[] = "'path' can't be null";
        }
        if ($this->container['dirpath'] === null) {
            $invalid_properties[] = "'dirpath' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['ext'] === null) {
            $invalid_properties[] = "'ext' can't be null";
        }
        if ($this->container['fullfilename'] === null) {
            $invalid_properties[] = "'fullfilename' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalid_properties[] = "'modified' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalid_properties[] = "'size' can't be null";
        }
        if ($this->container['fullsize'] === null) {
            $invalid_properties[] = "'fullsize' can't be null";
        }
        if ($this->container['validity'] === null) {
            $invalid_properties[] = "'validity' can't be null";
        }
        if ($this->container['highlight'] === null) {
            $invalid_properties[] = "'highlight' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['total'] === null) {
            return false;
        }
        if ($this->container['highlighting'] === null) {
            return false;
        }
        if ($this->container['path'] === null) {
            return false;
        }
        if ($this->container['dirpath'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ext'] === null) {
            return false;
        }
        if ($this->container['fullfilename'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        if ($this->container['fullsize'] === null) {
            return false;
        }
        if ($this->container['validity'] === null) {
            return false;
        }
        if ($this->container['highlight'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets total
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param string $total total number of files
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets highlighting
     * @return string
     */
    public function getHighlighting()
    {
        return $this->container['highlighting'];
    }

    /**
     * Sets highlighting
     * @param string $highlighting number of matches highlighted
     * @return $this
     */
    public function setHighlighting($highlighting)
    {
        $this->container['highlighting'] = $highlighting;

        return $this;
    }

    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path path of file / folder
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets dirpath
     * @return float
     */
    public function getDirpath()
    {
        return $this->container['dirpath'];
    }

    /**
     * Sets dirpath
     * @param float $dirpath directory path
     * @return $this
     */
    public function setDirpath($dirpath)
    {
        $this->container['dirpath'] = $dirpath;

        return $this;
    }

    /**
     * Gets name
     * @return float
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param float $name name of the file
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ext
     * @return float
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     * @param float $ext extension of the file
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets fullfilename
     * @return string
     */
    public function getFullfilename()
    {
        return $this->container['fullfilename'];
    }

    /**
     * Sets fullfilename
     * @param string $fullfilename full file/folder name
     * @return $this
     */
    public function setFullfilename($fullfilename)
    {
        $this->container['fullfilename'] = $fullfilename;

        return $this;
    }

    /**
     * Gets modified
     * @return float
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param float $modified last modified date
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type type can be dir/file
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets size
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param string $size size of the folder
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets fullsize
     * @return float
     */
    public function getFullsize()
    {
        return $this->container['fullsize'];
    }

    /**
     * Sets fullsize
     * @param float $fullsize full size is set to 0
     * @return $this
     */
    public function setFullsize($fullsize)
    {
        $this->container['fullsize'] = $fullsize;

        return $this;
    }

    /**
     * Gets validity
     * @return float
     */
    public function getValidity()
    {
        return $this->container['validity'];
    }

    /**
     * Sets validity
     * @param float $validity specifies whether the file is valid or invalid
     * @return $this
     */
    public function setValidity($validity)
    {
        $this->container['validity'] = $validity;

        return $this;
    }

    /**
     * Gets highlight
     * @return float
     */
    public function getHighlight()
    {
        return $this->container['highlight'];
    }

    /**
     * Sets highlight
     * @param float $highlight shows the highlighted content
     * @return $this
     */
    public function setHighlight($highlight)
    {
        $this->container['highlight'] = $highlight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

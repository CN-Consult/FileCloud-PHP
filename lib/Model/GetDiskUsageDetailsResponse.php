<?php
/**
 * GetDiskUsageDetailsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 18.1.0.682
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetDiskUsageDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetDiskUsageDetailsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetDiskUsageDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'storageusage' => 'string',
        'sizelimit' => 'string',
        'usagepercent' => 'string',
        'totalfolders' => 'float',
        'totalsize' => 'float',
        'versionedsize' => 'string',
        'versionedfiles' => 'string',
        'livefiles' => 'string',
        'livefolders' => 'float',
        'livesize' => 'float',
        'recyclefolders' => 'string',
        'recyclefiles' => 'string',
        'recyclesize' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'storageusage' => null,
        'sizelimit' => null,
        'usagepercent' => null,
        'totalfolders' => null,
        'totalsize' => null,
        'versionedsize' => null,
        'versionedfiles' => null,
        'livefiles' => null,
        'livefolders' => null,
        'livesize' => null,
        'recyclefolders' => null,
        'recyclefiles' => null,
        'recyclesize' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storageusage' => 'storageusage',
        'sizelimit' => 'sizelimit',
        'usagepercent' => 'usagepercent',
        'totalfolders' => 'totalfolders',
        'totalsize' => 'totalsize',
        'versionedsize' => 'versionedsize',
        'versionedfiles' => 'versionedfiles',
        'livefiles' => 'livefiles',
        'livefolders' => 'livefolders',
        'livesize' => 'livesize',
        'recyclefolders' => 'recyclefolders',
        'recyclefiles' => 'recyclefiles',
        'recyclesize' => 'recyclesize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storageusage' => 'setStorageusage',
        'sizelimit' => 'setSizelimit',
        'usagepercent' => 'setUsagepercent',
        'totalfolders' => 'setTotalfolders',
        'totalsize' => 'setTotalsize',
        'versionedsize' => 'setVersionedsize',
        'versionedfiles' => 'setVersionedfiles',
        'livefiles' => 'setLivefiles',
        'livefolders' => 'setLivefolders',
        'livesize' => 'setLivesize',
        'recyclefolders' => 'setRecyclefolders',
        'recyclefiles' => 'setRecyclefiles',
        'recyclesize' => 'setRecyclesize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storageusage' => 'getStorageusage',
        'sizelimit' => 'getSizelimit',
        'usagepercent' => 'getUsagepercent',
        'totalfolders' => 'getTotalfolders',
        'totalsize' => 'getTotalsize',
        'versionedsize' => 'getVersionedsize',
        'versionedfiles' => 'getVersionedfiles',
        'livefiles' => 'getLivefiles',
        'livefolders' => 'getLivefolders',
        'livesize' => 'getLivesize',
        'recyclefolders' => 'getRecyclefolders',
        'recyclefiles' => 'getRecyclefiles',
        'recyclesize' => 'getRecyclesize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storageusage'] = isset($data['storageusage']) ? $data['storageusage'] : null;
        $this->container['sizelimit'] = isset($data['sizelimit']) ? $data['sizelimit'] : null;
        $this->container['usagepercent'] = isset($data['usagepercent']) ? $data['usagepercent'] : null;
        $this->container['totalfolders'] = isset($data['totalfolders']) ? $data['totalfolders'] : null;
        $this->container['totalsize'] = isset($data['totalsize']) ? $data['totalsize'] : null;
        $this->container['versionedsize'] = isset($data['versionedsize']) ? $data['versionedsize'] : null;
        $this->container['versionedfiles'] = isset($data['versionedfiles']) ? $data['versionedfiles'] : null;
        $this->container['livefiles'] = isset($data['livefiles']) ? $data['livefiles'] : null;
        $this->container['livefolders'] = isset($data['livefolders']) ? $data['livefolders'] : null;
        $this->container['livesize'] = isset($data['livesize']) ? $data['livesize'] : null;
        $this->container['recyclefolders'] = isset($data['recyclefolders']) ? $data['recyclefolders'] : null;
        $this->container['recyclefiles'] = isset($data['recyclefiles']) ? $data['recyclefiles'] : null;
        $this->container['recyclesize'] = isset($data['recyclesize']) ? $data['recyclesize'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['storageusage'] === null) {
            $invalidProperties[] = "'storageusage' can't be null";
        }
        if ($this->container['sizelimit'] === null) {
            $invalidProperties[] = "'sizelimit' can't be null";
        }
        if ($this->container['usagepercent'] === null) {
            $invalidProperties[] = "'usagepercent' can't be null";
        }
        if ($this->container['totalfolders'] === null) {
            $invalidProperties[] = "'totalfolders' can't be null";
        }
        if ($this->container['totalsize'] === null) {
            $invalidProperties[] = "'totalsize' can't be null";
        }
        if ($this->container['versionedsize'] === null) {
            $invalidProperties[] = "'versionedsize' can't be null";
        }
        if ($this->container['versionedfiles'] === null) {
            $invalidProperties[] = "'versionedfiles' can't be null";
        }
        if ($this->container['livefiles'] === null) {
            $invalidProperties[] = "'livefiles' can't be null";
        }
        if ($this->container['livefolders'] === null) {
            $invalidProperties[] = "'livefolders' can't be null";
        }
        if ($this->container['livesize'] === null) {
            $invalidProperties[] = "'livesize' can't be null";
        }
        if ($this->container['recyclefolders'] === null) {
            $invalidProperties[] = "'recyclefolders' can't be null";
        }
        if ($this->container['recyclefiles'] === null) {
            $invalidProperties[] = "'recyclefiles' can't be null";
        }
        if ($this->container['recyclesize'] === null) {
            $invalidProperties[] = "'recyclesize' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['storageusage'] === null) {
            return false;
        }
        if ($this->container['sizelimit'] === null) {
            return false;
        }
        if ($this->container['usagepercent'] === null) {
            return false;
        }
        if ($this->container['totalfolders'] === null) {
            return false;
        }
        if ($this->container['totalsize'] === null) {
            return false;
        }
        if ($this->container['versionedsize'] === null) {
            return false;
        }
        if ($this->container['versionedfiles'] === null) {
            return false;
        }
        if ($this->container['livefiles'] === null) {
            return false;
        }
        if ($this->container['livefolders'] === null) {
            return false;
        }
        if ($this->container['livesize'] === null) {
            return false;
        }
        if ($this->container['recyclefolders'] === null) {
            return false;
        }
        if ($this->container['recyclefiles'] === null) {
            return false;
        }
        if ($this->container['recyclesize'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets storageusage
     *
     * @return string
     */
    public function getStorageusage()
    {
        return $this->container['storageusage'];
    }

    /**
     * Sets storageusage
     *
     * @param string $storageusage used storage size
     *
     * @return $this
     */
    public function setStorageusage($storageusage)
    {
        $this->container['storageusage'] = $storageusage;

        return $this;
    }

    /**
     * Gets sizelimit
     *
     * @return string
     */
    public function getSizelimit()
    {
        return $this->container['sizelimit'];
    }

    /**
     * Sets sizelimit
     *
     * @param string $sizelimit total storage size
     *
     * @return $this
     */
    public function setSizelimit($sizelimit)
    {
        $this->container['sizelimit'] = $sizelimit;

        return $this;
    }

    /**
     * Gets usagepercent
     *
     * @return string
     */
    public function getUsagepercent()
    {
        return $this->container['usagepercent'];
    }

    /**
     * Sets usagepercent
     *
     * @param string $usagepercent used storage in percentile
     *
     * @return $this
     */
    public function setUsagepercent($usagepercent)
    {
        $this->container['usagepercent'] = $usagepercent;

        return $this;
    }

    /**
     * Gets totalfolders
     *
     * @return float
     */
    public function getTotalfolders()
    {
        return $this->container['totalfolders'];
    }

    /**
     * Sets totalfolders
     *
     * @param float $totalfolders total number of folders
     *
     * @return $this
     */
    public function setTotalfolders($totalfolders)
    {
        $this->container['totalfolders'] = $totalfolders;

        return $this;
    }

    /**
     * Gets totalsize
     *
     * @return float
     */
    public function getTotalsize()
    {
        return $this->container['totalsize'];
    }

    /**
     * Sets totalsize
     *
     * @param float $totalsize overall size of all folders and files
     *
     * @return $this
     */
    public function setTotalsize($totalsize)
    {
        $this->container['totalsize'] = $totalsize;

        return $this;
    }

    /**
     * Gets versionedsize
     *
     * @return string
     */
    public function getVersionedsize()
    {
        return $this->container['versionedsize'];
    }

    /**
     * Sets versionedsize
     *
     * @param string $versionedsize total size of all versioned files
     *
     * @return $this
     */
    public function setVersionedsize($versionedsize)
    {
        $this->container['versionedsize'] = $versionedsize;

        return $this;
    }

    /**
     * Gets versionedfiles
     *
     * @return string
     */
    public function getVersionedfiles()
    {
        return $this->container['versionedfiles'];
    }

    /**
     * Sets versionedfiles
     *
     * @param string $versionedfiles number of versioned files
     *
     * @return $this
     */
    public function setVersionedfiles($versionedfiles)
    {
        $this->container['versionedfiles'] = $versionedfiles;

        return $this;
    }

    /**
     * Gets livefiles
     *
     * @return string
     */
    public function getLivefiles()
    {
        return $this->container['livefiles'];
    }

    /**
     * Sets livefiles
     *
     * @param string $livefiles number of live files
     *
     * @return $this
     */
    public function setLivefiles($livefiles)
    {
        $this->container['livefiles'] = $livefiles;

        return $this;
    }

    /**
     * Gets livefolders
     *
     * @return float
     */
    public function getLivefolders()
    {
        return $this->container['livefolders'];
    }

    /**
     * Sets livefolders
     *
     * @param float $livefolders number of live folders
     *
     * @return $this
     */
    public function setLivefolders($livefolders)
    {
        $this->container['livefolders'] = $livefolders;

        return $this;
    }

    /**
     * Gets livesize
     *
     * @return float
     */
    public function getLivesize()
    {
        return $this->container['livesize'];
    }

    /**
     * Sets livesize
     *
     * @param float $livesize total size of all live folders and files
     *
     * @return $this
     */
    public function setLivesize($livesize)
    {
        $this->container['livesize'] = $livesize;

        return $this;
    }

    /**
     * Gets recyclefolders
     *
     * @return string
     */
    public function getRecyclefolders()
    {
        return $this->container['recyclefolders'];
    }

    /**
     * Sets recyclefolders
     *
     * @param string $recyclefolders number of recycle folder
     *
     * @return $this
     */
    public function setRecyclefolders($recyclefolders)
    {
        $this->container['recyclefolders'] = $recyclefolders;

        return $this;
    }

    /**
     * Gets recyclefiles
     *
     * @return string
     */
    public function getRecyclefiles()
    {
        return $this->container['recyclefiles'];
    }

    /**
     * Sets recyclefiles
     *
     * @param string $recyclefiles number of files in recycle folder
     *
     * @return $this
     */
    public function setRecyclefiles($recyclefiles)
    {
        $this->container['recyclefiles'] = $recyclefiles;

        return $this;
    }

    /**
     * Gets recyclesize
     *
     * @return string
     */
    public function getRecyclesize()
    {
        return $this->container['recyclesize'];
    }

    /**
     * Sets recyclesize
     *
     * @param string $recyclesize total size of recycle folder
     *
     * @return $this
     */
    public function setRecyclesize($recyclesize)
    {
        $this->container['recyclesize'] = $recyclesize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


<?php
/**
 * GetSystemStatusResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetSystemStatusResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetSystemStatusResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetSystemStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'appversion' => 'float',
        'sdkversion' => 'float',
        'baseversion' => 'float',
        'apilevel' => 'float',
        'peerid' => 'string',
        'displayname' => 'string',
        'oS' => 'string',
        'oem' => 'string',
        'needsupdate' => 'float',
        'iscritical' => 'float',
        'autoupdate' => 'float',
        'needspluginupdate' => 'float',
        'iscriticalpluginupdate' => 'float',
        'currentprofile' => 'string',
        'numpeersonline' => 'float',
        'uptime' => 'float',
        'httpport' => 'float',
        'udpport' => 'float',
        'isonline' => 'float',
        'relayactive' => 'float',
        'relayishttps' => 'float',
        'savepassword' => 'float',
        'networkenabled' => 'float',
        'httpaccess' => 'string',
        'unreadmessages' => 'float',
        'newinvitations' => 'float',
        'numgroups' => 'float',
        'remoteaccess' => 'float',
        'isremote' => 'float',
        'upnpenabled' => 'float',
        'upnpactive' => 'float',
        'servertoken' => 'string',
        'urlprefix' => 'string',
        'logdir' => 'string',
        'ishttps' => 'float',
        'privateip' => 'float',
        'serverurl' => 'string',
        'cansearchotherusers' => 'float',
        'licensestring' => 'string',
        'licensedto' => 'string',
        'licensedtill' => 'float',
        'continueupdate' => 'float',
        'storageusage' => 'string',
        'sizelimit' => 'string',
        'usagepercent' => 'float',
        'availablestorage' => 'float',
        'clouduserstatus' => 'float',
        'showsharedfiles' => 'float',
        'showfavorites' => 'float',
        'email' => 'string',
        'authtype' => 'string',
        'userstatus' => 'string',
        'rmclevel' => 'float',
        'mediasync' => 'float',
        'mediasyncstorepath' => 'string',
        'syncapilevel' => 'float',
        'allownetworkfoldersync' => 'float',
        'allowbackup' => 'float',
        'disablemyfiles' => 'float',
        'networkfoldername' => 'string',
        'disableactivity' => 'string',
        'disablelock' => 'string',
        'extendedsearch' => 'string',
        'collapseactivity' => 'string',
        'uploadrestrictions' => 'string',
        'disabledotdot' => 'string',
        'disablemusic' => 'string',
        'docthumbsenabled' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'appversion' => 'appversion',
        'sdkversion' => 'sdkversion',
        'baseversion' => 'baseversion',
        'apilevel' => 'apilevel',
        'peerid' => 'peerid',
        'displayname' => 'displayname',
        'oS' => 'OS',
        'oem' => 'oem',
        'needsupdate' => 'needsupdate',
        'iscritical' => 'iscritical',
        'autoupdate' => 'autoupdate',
        'needspluginupdate' => 'needspluginupdate',
        'iscriticalpluginupdate' => 'iscriticalpluginupdate',
        'currentprofile' => 'currentprofile',
        'numpeersonline' => 'numpeersonline',
        'uptime' => 'uptime',
        'httpport' => 'httpport',
        'udpport' => 'udpport',
        'isonline' => 'isonline',
        'relayactive' => 'relayactive',
        'relayishttps' => 'relayishttps',
        'savepassword' => 'savepassword',
        'networkenabled' => 'networkenabled',
        'httpaccess' => 'httpaccess',
        'unreadmessages' => 'unreadmessages',
        'newinvitations' => 'newinvitations',
        'numgroups' => 'numgroups',
        'remoteaccess' => 'remoteaccess',
        'isremote' => 'isremote',
        'upnpenabled' => 'upnpenabled',
        'upnpactive' => 'upnpactive',
        'servertoken' => 'servertoken',
        'urlprefix' => 'urlprefix',
        'logdir' => 'logdir',
        'ishttps' => 'ishttps',
        'privateip' => 'privateip',
        'serverurl' => 'serverurl',
        'cansearchotherusers' => 'cansearchotherusers',
        'licensestring' => 'licensestring',
        'licensedto' => 'licensedto',
        'licensedtill' => 'licensedtill',
        'continueupdate' => 'continueupdate',
        'storageusage' => 'storageusage',
        'sizelimit' => 'sizelimit',
        'usagepercent' => 'usagepercent',
        'availablestorage' => 'availablestorage',
        'clouduserstatus' => 'clouduserstatus',
        'showsharedfiles' => 'showsharedfiles',
        'showfavorites' => 'showfavorites',
        'email' => 'email',
        'authtype' => 'authtype',
        'userstatus' => 'userstatus',
        'rmclevel' => 'rmclevel',
        'mediasync' => 'mediasync',
        'mediasyncstorepath' => 'mediasyncstorepath',
        'syncapilevel' => 'syncapilevel',
        'allownetworkfoldersync' => 'allownetworkfoldersync',
        'allowbackup' => 'allowbackup',
        'disablemyfiles' => 'disablemyfiles',
        'networkfoldername' => 'networkfoldername',
        'disableactivity' => 'disableactivity',
        'disablelock' => 'disablelock',
        'extendedsearch' => 'extendedsearch',
        'collapseactivity' => 'collapseactivity',
        'uploadrestrictions' => 'uploadrestrictions',
        'disabledotdot' => 'disabledotdot',
        'disablemusic' => 'disablemusic',
        'docthumbsenabled' => 'docthumbsenabled'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'appversion' => 'setAppversion',
        'sdkversion' => 'setSdkversion',
        'baseversion' => 'setBaseversion',
        'apilevel' => 'setApilevel',
        'peerid' => 'setPeerid',
        'displayname' => 'setDisplayname',
        'oS' => 'setOS',
        'oem' => 'setOem',
        'needsupdate' => 'setNeedsupdate',
        'iscritical' => 'setIscritical',
        'autoupdate' => 'setAutoupdate',
        'needspluginupdate' => 'setNeedspluginupdate',
        'iscriticalpluginupdate' => 'setIscriticalpluginupdate',
        'currentprofile' => 'setCurrentprofile',
        'numpeersonline' => 'setNumpeersonline',
        'uptime' => 'setUptime',
        'httpport' => 'setHttpport',
        'udpport' => 'setUdpport',
        'isonline' => 'setIsonline',
        'relayactive' => 'setRelayactive',
        'relayishttps' => 'setRelayishttps',
        'savepassword' => 'setSavepassword',
        'networkenabled' => 'setNetworkenabled',
        'httpaccess' => 'setHttpaccess',
        'unreadmessages' => 'setUnreadmessages',
        'newinvitations' => 'setNewinvitations',
        'numgroups' => 'setNumgroups',
        'remoteaccess' => 'setRemoteaccess',
        'isremote' => 'setIsremote',
        'upnpenabled' => 'setUpnpenabled',
        'upnpactive' => 'setUpnpactive',
        'servertoken' => 'setServertoken',
        'urlprefix' => 'setUrlprefix',
        'logdir' => 'setLogdir',
        'ishttps' => 'setIshttps',
        'privateip' => 'setPrivateip',
        'serverurl' => 'setServerurl',
        'cansearchotherusers' => 'setCansearchotherusers',
        'licensestring' => 'setLicensestring',
        'licensedto' => 'setLicensedto',
        'licensedtill' => 'setLicensedtill',
        'continueupdate' => 'setContinueupdate',
        'storageusage' => 'setStorageusage',
        'sizelimit' => 'setSizelimit',
        'usagepercent' => 'setUsagepercent',
        'availablestorage' => 'setAvailablestorage',
        'clouduserstatus' => 'setClouduserstatus',
        'showsharedfiles' => 'setShowsharedfiles',
        'showfavorites' => 'setShowfavorites',
        'email' => 'setEmail',
        'authtype' => 'setAuthtype',
        'userstatus' => 'setUserstatus',
        'rmclevel' => 'setRmclevel',
        'mediasync' => 'setMediasync',
        'mediasyncstorepath' => 'setMediasyncstorepath',
        'syncapilevel' => 'setSyncapilevel',
        'allownetworkfoldersync' => 'setAllownetworkfoldersync',
        'allowbackup' => 'setAllowbackup',
        'disablemyfiles' => 'setDisablemyfiles',
        'networkfoldername' => 'setNetworkfoldername',
        'disableactivity' => 'setDisableactivity',
        'disablelock' => 'setDisablelock',
        'extendedsearch' => 'setExtendedsearch',
        'collapseactivity' => 'setCollapseactivity',
        'uploadrestrictions' => 'setUploadrestrictions',
        'disabledotdot' => 'setDisabledotdot',
        'disablemusic' => 'setDisablemusic',
        'docthumbsenabled' => 'setDocthumbsenabled'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'appversion' => 'getAppversion',
        'sdkversion' => 'getSdkversion',
        'baseversion' => 'getBaseversion',
        'apilevel' => 'getApilevel',
        'peerid' => 'getPeerid',
        'displayname' => 'getDisplayname',
        'oS' => 'getOS',
        'oem' => 'getOem',
        'needsupdate' => 'getNeedsupdate',
        'iscritical' => 'getIscritical',
        'autoupdate' => 'getAutoupdate',
        'needspluginupdate' => 'getNeedspluginupdate',
        'iscriticalpluginupdate' => 'getIscriticalpluginupdate',
        'currentprofile' => 'getCurrentprofile',
        'numpeersonline' => 'getNumpeersonline',
        'uptime' => 'getUptime',
        'httpport' => 'getHttpport',
        'udpport' => 'getUdpport',
        'isonline' => 'getIsonline',
        'relayactive' => 'getRelayactive',
        'relayishttps' => 'getRelayishttps',
        'savepassword' => 'getSavepassword',
        'networkenabled' => 'getNetworkenabled',
        'httpaccess' => 'getHttpaccess',
        'unreadmessages' => 'getUnreadmessages',
        'newinvitations' => 'getNewinvitations',
        'numgroups' => 'getNumgroups',
        'remoteaccess' => 'getRemoteaccess',
        'isremote' => 'getIsremote',
        'upnpenabled' => 'getUpnpenabled',
        'upnpactive' => 'getUpnpactive',
        'servertoken' => 'getServertoken',
        'urlprefix' => 'getUrlprefix',
        'logdir' => 'getLogdir',
        'ishttps' => 'getIshttps',
        'privateip' => 'getPrivateip',
        'serverurl' => 'getServerurl',
        'cansearchotherusers' => 'getCansearchotherusers',
        'licensestring' => 'getLicensestring',
        'licensedto' => 'getLicensedto',
        'licensedtill' => 'getLicensedtill',
        'continueupdate' => 'getContinueupdate',
        'storageusage' => 'getStorageusage',
        'sizelimit' => 'getSizelimit',
        'usagepercent' => 'getUsagepercent',
        'availablestorage' => 'getAvailablestorage',
        'clouduserstatus' => 'getClouduserstatus',
        'showsharedfiles' => 'getShowsharedfiles',
        'showfavorites' => 'getShowfavorites',
        'email' => 'getEmail',
        'authtype' => 'getAuthtype',
        'userstatus' => 'getUserstatus',
        'rmclevel' => 'getRmclevel',
        'mediasync' => 'getMediasync',
        'mediasyncstorepath' => 'getMediasyncstorepath',
        'syncapilevel' => 'getSyncapilevel',
        'allownetworkfoldersync' => 'getAllownetworkfoldersync',
        'allowbackup' => 'getAllowbackup',
        'disablemyfiles' => 'getDisablemyfiles',
        'networkfoldername' => 'getNetworkfoldername',
        'disableactivity' => 'getDisableactivity',
        'disablelock' => 'getDisablelock',
        'extendedsearch' => 'getExtendedsearch',
        'collapseactivity' => 'getCollapseactivity',
        'uploadrestrictions' => 'getUploadrestrictions',
        'disabledotdot' => 'getDisabledotdot',
        'disablemusic' => 'getDisablemusic',
        'docthumbsenabled' => 'getDocthumbsenabled'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appversion'] = isset($data['appversion']) ? $data['appversion'] : null;
        $this->container['sdkversion'] = isset($data['sdkversion']) ? $data['sdkversion'] : null;
        $this->container['baseversion'] = isset($data['baseversion']) ? $data['baseversion'] : null;
        $this->container['apilevel'] = isset($data['apilevel']) ? $data['apilevel'] : null;
        $this->container['peerid'] = isset($data['peerid']) ? $data['peerid'] : null;
        $this->container['displayname'] = isset($data['displayname']) ? $data['displayname'] : null;
        $this->container['oS'] = isset($data['oS']) ? $data['oS'] : null;
        $this->container['oem'] = isset($data['oem']) ? $data['oem'] : null;
        $this->container['needsupdate'] = isset($data['needsupdate']) ? $data['needsupdate'] : null;
        $this->container['iscritical'] = isset($data['iscritical']) ? $data['iscritical'] : null;
        $this->container['autoupdate'] = isset($data['autoupdate']) ? $data['autoupdate'] : null;
        $this->container['needspluginupdate'] = isset($data['needspluginupdate']) ? $data['needspluginupdate'] : null;
        $this->container['iscriticalpluginupdate'] = isset($data['iscriticalpluginupdate']) ? $data['iscriticalpluginupdate'] : null;
        $this->container['currentprofile'] = isset($data['currentprofile']) ? $data['currentprofile'] : null;
        $this->container['numpeersonline'] = isset($data['numpeersonline']) ? $data['numpeersonline'] : null;
        $this->container['uptime'] = isset($data['uptime']) ? $data['uptime'] : null;
        $this->container['httpport'] = isset($data['httpport']) ? $data['httpport'] : null;
        $this->container['udpport'] = isset($data['udpport']) ? $data['udpport'] : null;
        $this->container['isonline'] = isset($data['isonline']) ? $data['isonline'] : null;
        $this->container['relayactive'] = isset($data['relayactive']) ? $data['relayactive'] : null;
        $this->container['relayishttps'] = isset($data['relayishttps']) ? $data['relayishttps'] : null;
        $this->container['savepassword'] = isset($data['savepassword']) ? $data['savepassword'] : null;
        $this->container['networkenabled'] = isset($data['networkenabled']) ? $data['networkenabled'] : null;
        $this->container['httpaccess'] = isset($data['httpaccess']) ? $data['httpaccess'] : null;
        $this->container['unreadmessages'] = isset($data['unreadmessages']) ? $data['unreadmessages'] : null;
        $this->container['newinvitations'] = isset($data['newinvitations']) ? $data['newinvitations'] : null;
        $this->container['numgroups'] = isset($data['numgroups']) ? $data['numgroups'] : null;
        $this->container['remoteaccess'] = isset($data['remoteaccess']) ? $data['remoteaccess'] : null;
        $this->container['isremote'] = isset($data['isremote']) ? $data['isremote'] : null;
        $this->container['upnpenabled'] = isset($data['upnpenabled']) ? $data['upnpenabled'] : null;
        $this->container['upnpactive'] = isset($data['upnpactive']) ? $data['upnpactive'] : null;
        $this->container['servertoken'] = isset($data['servertoken']) ? $data['servertoken'] : null;
        $this->container['urlprefix'] = isset($data['urlprefix']) ? $data['urlprefix'] : null;
        $this->container['logdir'] = isset($data['logdir']) ? $data['logdir'] : null;
        $this->container['ishttps'] = isset($data['ishttps']) ? $data['ishttps'] : null;
        $this->container['privateip'] = isset($data['privateip']) ? $data['privateip'] : null;
        $this->container['serverurl'] = isset($data['serverurl']) ? $data['serverurl'] : null;
        $this->container['cansearchotherusers'] = isset($data['cansearchotherusers']) ? $data['cansearchotherusers'] : null;
        $this->container['licensestring'] = isset($data['licensestring']) ? $data['licensestring'] : null;
        $this->container['licensedto'] = isset($data['licensedto']) ? $data['licensedto'] : null;
        $this->container['licensedtill'] = isset($data['licensedtill']) ? $data['licensedtill'] : null;
        $this->container['continueupdate'] = isset($data['continueupdate']) ? $data['continueupdate'] : null;
        $this->container['storageusage'] = isset($data['storageusage']) ? $data['storageusage'] : null;
        $this->container['sizelimit'] = isset($data['sizelimit']) ? $data['sizelimit'] : null;
        $this->container['usagepercent'] = isset($data['usagepercent']) ? $data['usagepercent'] : null;
        $this->container['availablestorage'] = isset($data['availablestorage']) ? $data['availablestorage'] : null;
        $this->container['clouduserstatus'] = isset($data['clouduserstatus']) ? $data['clouduserstatus'] : null;
        $this->container['showsharedfiles'] = isset($data['showsharedfiles']) ? $data['showsharedfiles'] : null;
        $this->container['showfavorites'] = isset($data['showfavorites']) ? $data['showfavorites'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['authtype'] = isset($data['authtype']) ? $data['authtype'] : null;
        $this->container['userstatus'] = isset($data['userstatus']) ? $data['userstatus'] : null;
        $this->container['rmclevel'] = isset($data['rmclevel']) ? $data['rmclevel'] : null;
        $this->container['mediasync'] = isset($data['mediasync']) ? $data['mediasync'] : null;
        $this->container['mediasyncstorepath'] = isset($data['mediasyncstorepath']) ? $data['mediasyncstorepath'] : null;
        $this->container['syncapilevel'] = isset($data['syncapilevel']) ? $data['syncapilevel'] : null;
        $this->container['allownetworkfoldersync'] = isset($data['allownetworkfoldersync']) ? $data['allownetworkfoldersync'] : null;
        $this->container['allowbackup'] = isset($data['allowbackup']) ? $data['allowbackup'] : null;
        $this->container['disablemyfiles'] = isset($data['disablemyfiles']) ? $data['disablemyfiles'] : null;
        $this->container['networkfoldername'] = isset($data['networkfoldername']) ? $data['networkfoldername'] : null;
        $this->container['disableactivity'] = isset($data['disableactivity']) ? $data['disableactivity'] : null;
        $this->container['disablelock'] = isset($data['disablelock']) ? $data['disablelock'] : null;
        $this->container['extendedsearch'] = isset($data['extendedsearch']) ? $data['extendedsearch'] : null;
        $this->container['collapseactivity'] = isset($data['collapseactivity']) ? $data['collapseactivity'] : null;
        $this->container['uploadrestrictions'] = isset($data['uploadrestrictions']) ? $data['uploadrestrictions'] : null;
        $this->container['disabledotdot'] = isset($data['disabledotdot']) ? $data['disabledotdot'] : null;
        $this->container['disablemusic'] = isset($data['disablemusic']) ? $data['disablemusic'] : null;
        $this->container['docthumbsenabled'] = isset($data['docthumbsenabled']) ? $data['docthumbsenabled'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['appversion'] === null) {
            $invalid_properties[] = "'appversion' can't be null";
        }
        if ($this->container['sdkversion'] === null) {
            $invalid_properties[] = "'sdkversion' can't be null";
        }
        if ($this->container['baseversion'] === null) {
            $invalid_properties[] = "'baseversion' can't be null";
        }
        if ($this->container['apilevel'] === null) {
            $invalid_properties[] = "'apilevel' can't be null";
        }
        if ($this->container['peerid'] === null) {
            $invalid_properties[] = "'peerid' can't be null";
        }
        if ($this->container['displayname'] === null) {
            $invalid_properties[] = "'displayname' can't be null";
        }
        if ($this->container['oS'] === null) {
            $invalid_properties[] = "'oS' can't be null";
        }
        if ($this->container['oem'] === null) {
            $invalid_properties[] = "'oem' can't be null";
        }
        if ($this->container['needsupdate'] === null) {
            $invalid_properties[] = "'needsupdate' can't be null";
        }
        if ($this->container['iscritical'] === null) {
            $invalid_properties[] = "'iscritical' can't be null";
        }
        if ($this->container['autoupdate'] === null) {
            $invalid_properties[] = "'autoupdate' can't be null";
        }
        if ($this->container['needspluginupdate'] === null) {
            $invalid_properties[] = "'needspluginupdate' can't be null";
        }
        if ($this->container['iscriticalpluginupdate'] === null) {
            $invalid_properties[] = "'iscriticalpluginupdate' can't be null";
        }
        if ($this->container['currentprofile'] === null) {
            $invalid_properties[] = "'currentprofile' can't be null";
        }
        if ($this->container['numpeersonline'] === null) {
            $invalid_properties[] = "'numpeersonline' can't be null";
        }
        if ($this->container['uptime'] === null) {
            $invalid_properties[] = "'uptime' can't be null";
        }
        if ($this->container['httpport'] === null) {
            $invalid_properties[] = "'httpport' can't be null";
        }
        if ($this->container['udpport'] === null) {
            $invalid_properties[] = "'udpport' can't be null";
        }
        if ($this->container['isonline'] === null) {
            $invalid_properties[] = "'isonline' can't be null";
        }
        if ($this->container['relayactive'] === null) {
            $invalid_properties[] = "'relayactive' can't be null";
        }
        if ($this->container['relayishttps'] === null) {
            $invalid_properties[] = "'relayishttps' can't be null";
        }
        if ($this->container['savepassword'] === null) {
            $invalid_properties[] = "'savepassword' can't be null";
        }
        if ($this->container['networkenabled'] === null) {
            $invalid_properties[] = "'networkenabled' can't be null";
        }
        if ($this->container['httpaccess'] === null) {
            $invalid_properties[] = "'httpaccess' can't be null";
        }
        if ($this->container['unreadmessages'] === null) {
            $invalid_properties[] = "'unreadmessages' can't be null";
        }
        if ($this->container['newinvitations'] === null) {
            $invalid_properties[] = "'newinvitations' can't be null";
        }
        if ($this->container['numgroups'] === null) {
            $invalid_properties[] = "'numgroups' can't be null";
        }
        if ($this->container['remoteaccess'] === null) {
            $invalid_properties[] = "'remoteaccess' can't be null";
        }
        if ($this->container['isremote'] === null) {
            $invalid_properties[] = "'isremote' can't be null";
        }
        if ($this->container['upnpenabled'] === null) {
            $invalid_properties[] = "'upnpenabled' can't be null";
        }
        if ($this->container['upnpactive'] === null) {
            $invalid_properties[] = "'upnpactive' can't be null";
        }
        if ($this->container['servertoken'] === null) {
            $invalid_properties[] = "'servertoken' can't be null";
        }
        if ($this->container['urlprefix'] === null) {
            $invalid_properties[] = "'urlprefix' can't be null";
        }
        if ($this->container['logdir'] === null) {
            $invalid_properties[] = "'logdir' can't be null";
        }
        if ($this->container['ishttps'] === null) {
            $invalid_properties[] = "'ishttps' can't be null";
        }
        if ($this->container['privateip'] === null) {
            $invalid_properties[] = "'privateip' can't be null";
        }
        if ($this->container['serverurl'] === null) {
            $invalid_properties[] = "'serverurl' can't be null";
        }
        if ($this->container['cansearchotherusers'] === null) {
            $invalid_properties[] = "'cansearchotherusers' can't be null";
        }
        if ($this->container['licensestring'] === null) {
            $invalid_properties[] = "'licensestring' can't be null";
        }
        if ($this->container['licensedto'] === null) {
            $invalid_properties[] = "'licensedto' can't be null";
        }
        if ($this->container['licensedtill'] === null) {
            $invalid_properties[] = "'licensedtill' can't be null";
        }
        if ($this->container['continueupdate'] === null) {
            $invalid_properties[] = "'continueupdate' can't be null";
        }
        if ($this->container['storageusage'] === null) {
            $invalid_properties[] = "'storageusage' can't be null";
        }
        if ($this->container['sizelimit'] === null) {
            $invalid_properties[] = "'sizelimit' can't be null";
        }
        if ($this->container['usagepercent'] === null) {
            $invalid_properties[] = "'usagepercent' can't be null";
        }
        if ($this->container['availablestorage'] === null) {
            $invalid_properties[] = "'availablestorage' can't be null";
        }
        if ($this->container['clouduserstatus'] === null) {
            $invalid_properties[] = "'clouduserstatus' can't be null";
        }
        if ($this->container['showsharedfiles'] === null) {
            $invalid_properties[] = "'showsharedfiles' can't be null";
        }
        if ($this->container['showfavorites'] === null) {
            $invalid_properties[] = "'showfavorites' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['authtype'] === null) {
            $invalid_properties[] = "'authtype' can't be null";
        }
        if ($this->container['userstatus'] === null) {
            $invalid_properties[] = "'userstatus' can't be null";
        }
        if ($this->container['rmclevel'] === null) {
            $invalid_properties[] = "'rmclevel' can't be null";
        }
        if ($this->container['mediasync'] === null) {
            $invalid_properties[] = "'mediasync' can't be null";
        }
        if ($this->container['mediasyncstorepath'] === null) {
            $invalid_properties[] = "'mediasyncstorepath' can't be null";
        }
        if ($this->container['syncapilevel'] === null) {
            $invalid_properties[] = "'syncapilevel' can't be null";
        }
        if ($this->container['allownetworkfoldersync'] === null) {
            $invalid_properties[] = "'allownetworkfoldersync' can't be null";
        }
        if ($this->container['allowbackup'] === null) {
            $invalid_properties[] = "'allowbackup' can't be null";
        }
        if ($this->container['disablemyfiles'] === null) {
            $invalid_properties[] = "'disablemyfiles' can't be null";
        }
        if ($this->container['networkfoldername'] === null) {
            $invalid_properties[] = "'networkfoldername' can't be null";
        }
        if ($this->container['disableactivity'] === null) {
            $invalid_properties[] = "'disableactivity' can't be null";
        }
        if ($this->container['disablelock'] === null) {
            $invalid_properties[] = "'disablelock' can't be null";
        }
        if ($this->container['extendedsearch'] === null) {
            $invalid_properties[] = "'extendedsearch' can't be null";
        }
        if ($this->container['collapseactivity'] === null) {
            $invalid_properties[] = "'collapseactivity' can't be null";
        }
        if ($this->container['uploadrestrictions'] === null) {
            $invalid_properties[] = "'uploadrestrictions' can't be null";
        }
        if ($this->container['disabledotdot'] === null) {
            $invalid_properties[] = "'disabledotdot' can't be null";
        }
        if ($this->container['disablemusic'] === null) {
            $invalid_properties[] = "'disablemusic' can't be null";
        }
        if ($this->container['docthumbsenabled'] === null) {
            $invalid_properties[] = "'docthumbsenabled' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['appversion'] === null) {
            return false;
        }
        if ($this->container['sdkversion'] === null) {
            return false;
        }
        if ($this->container['baseversion'] === null) {
            return false;
        }
        if ($this->container['apilevel'] === null) {
            return false;
        }
        if ($this->container['peerid'] === null) {
            return false;
        }
        if ($this->container['displayname'] === null) {
            return false;
        }
        if ($this->container['oS'] === null) {
            return false;
        }
        if ($this->container['oem'] === null) {
            return false;
        }
        if ($this->container['needsupdate'] === null) {
            return false;
        }
        if ($this->container['iscritical'] === null) {
            return false;
        }
        if ($this->container['autoupdate'] === null) {
            return false;
        }
        if ($this->container['needspluginupdate'] === null) {
            return false;
        }
        if ($this->container['iscriticalpluginupdate'] === null) {
            return false;
        }
        if ($this->container['currentprofile'] === null) {
            return false;
        }
        if ($this->container['numpeersonline'] === null) {
            return false;
        }
        if ($this->container['uptime'] === null) {
            return false;
        }
        if ($this->container['httpport'] === null) {
            return false;
        }
        if ($this->container['udpport'] === null) {
            return false;
        }
        if ($this->container['isonline'] === null) {
            return false;
        }
        if ($this->container['relayactive'] === null) {
            return false;
        }
        if ($this->container['relayishttps'] === null) {
            return false;
        }
        if ($this->container['savepassword'] === null) {
            return false;
        }
        if ($this->container['networkenabled'] === null) {
            return false;
        }
        if ($this->container['httpaccess'] === null) {
            return false;
        }
        if ($this->container['unreadmessages'] === null) {
            return false;
        }
        if ($this->container['newinvitations'] === null) {
            return false;
        }
        if ($this->container['numgroups'] === null) {
            return false;
        }
        if ($this->container['remoteaccess'] === null) {
            return false;
        }
        if ($this->container['isremote'] === null) {
            return false;
        }
        if ($this->container['upnpenabled'] === null) {
            return false;
        }
        if ($this->container['upnpactive'] === null) {
            return false;
        }
        if ($this->container['servertoken'] === null) {
            return false;
        }
        if ($this->container['urlprefix'] === null) {
            return false;
        }
        if ($this->container['logdir'] === null) {
            return false;
        }
        if ($this->container['ishttps'] === null) {
            return false;
        }
        if ($this->container['privateip'] === null) {
            return false;
        }
        if ($this->container['serverurl'] === null) {
            return false;
        }
        if ($this->container['cansearchotherusers'] === null) {
            return false;
        }
        if ($this->container['licensestring'] === null) {
            return false;
        }
        if ($this->container['licensedto'] === null) {
            return false;
        }
        if ($this->container['licensedtill'] === null) {
            return false;
        }
        if ($this->container['continueupdate'] === null) {
            return false;
        }
        if ($this->container['storageusage'] === null) {
            return false;
        }
        if ($this->container['sizelimit'] === null) {
            return false;
        }
        if ($this->container['usagepercent'] === null) {
            return false;
        }
        if ($this->container['availablestorage'] === null) {
            return false;
        }
        if ($this->container['clouduserstatus'] === null) {
            return false;
        }
        if ($this->container['showsharedfiles'] === null) {
            return false;
        }
        if ($this->container['showfavorites'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['authtype'] === null) {
            return false;
        }
        if ($this->container['userstatus'] === null) {
            return false;
        }
        if ($this->container['rmclevel'] === null) {
            return false;
        }
        if ($this->container['mediasync'] === null) {
            return false;
        }
        if ($this->container['mediasyncstorepath'] === null) {
            return false;
        }
        if ($this->container['syncapilevel'] === null) {
            return false;
        }
        if ($this->container['allownetworkfoldersync'] === null) {
            return false;
        }
        if ($this->container['allowbackup'] === null) {
            return false;
        }
        if ($this->container['disablemyfiles'] === null) {
            return false;
        }
        if ($this->container['networkfoldername'] === null) {
            return false;
        }
        if ($this->container['disableactivity'] === null) {
            return false;
        }
        if ($this->container['disablelock'] === null) {
            return false;
        }
        if ($this->container['extendedsearch'] === null) {
            return false;
        }
        if ($this->container['collapseactivity'] === null) {
            return false;
        }
        if ($this->container['uploadrestrictions'] === null) {
            return false;
        }
        if ($this->container['disabledotdot'] === null) {
            return false;
        }
        if ($this->container['disablemusic'] === null) {
            return false;
        }
        if ($this->container['docthumbsenabled'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets appversion
     * @return float
     */
    public function getAppversion()
    {
        return $this->container['appversion'];
    }

    /**
     * Sets appversion
     * @param float $appversion app version no.
     * @return $this
     */
    public function setAppversion($appversion)
    {
        $this->container['appversion'] = $appversion;

        return $this;
    }

    /**
     * Gets sdkversion
     * @return float
     */
    public function getSdkversion()
    {
        return $this->container['sdkversion'];
    }

    /**
     * Sets sdkversion
     * @param float $sdkversion sdk version no.
     * @return $this
     */
    public function setSdkversion($sdkversion)
    {
        $this->container['sdkversion'] = $sdkversion;

        return $this;
    }

    /**
     * Gets baseversion
     * @return float
     */
    public function getBaseversion()
    {
        return $this->container['baseversion'];
    }

    /**
     * Sets baseversion
     * @param float $baseversion base version no.
     * @return $this
     */
    public function setBaseversion($baseversion)
    {
        $this->container['baseversion'] = $baseversion;

        return $this;
    }

    /**
     * Gets apilevel
     * @return float
     */
    public function getApilevel()
    {
        return $this->container['apilevel'];
    }

    /**
     * Sets apilevel
     * @param float $apilevel api level no.
     * @return $this
     */
    public function setApilevel($apilevel)
    {
        $this->container['apilevel'] = $apilevel;

        return $this;
    }

    /**
     * Gets peerid
     * @return string
     */
    public function getPeerid()
    {
        return $this->container['peerid'];
    }

    /**
     * Sets peerid
     * @param string $peerid user name
     * @return $this
     */
    public function setPeerid($peerid)
    {
        $this->container['peerid'] = $peerid;

        return $this;
    }

    /**
     * Gets displayname
     * @return string
     */
    public function getDisplayname()
    {
        return $this->container['displayname'];
    }

    /**
     * Sets displayname
     * @param string $displayname display name of user
     * @return $this
     */
    public function setDisplayname($displayname)
    {
        $this->container['displayname'] = $displayname;

        return $this;
    }

    /**
     * Gets oS
     * @return string
     */
    public function getOS()
    {
        return $this->container['oS'];
    }

    /**
     * Sets oS
     * @param string $oS os is always tonido_cloud
     * @return $this
     */
    public function setOS($oS)
    {
        $this->container['oS'] = $oS;

        return $this;
    }

    /**
     * Gets oem
     * @return string
     */
    public function getOem()
    {
        return $this->container['oem'];
    }

    /**
     * Sets oem
     * @param string $oem 
     * @return $this
     */
    public function setOem($oem)
    {
        $this->container['oem'] = $oem;

        return $this;
    }

    /**
     * Gets needsupdate
     * @return float
     */
    public function getNeedsupdate()
    {
        return $this->container['needsupdate'];
    }

    /**
     * Sets needsupdate
     * @param float $needsupdate whether update needed or no
     * @return $this
     */
    public function setNeedsupdate($needsupdate)
    {
        $this->container['needsupdate'] = $needsupdate;

        return $this;
    }

    /**
     * Gets iscritical
     * @return float
     */
    public function getIscritical()
    {
        return $this->container['iscritical'];
    }

    /**
     * Sets iscritical
     * @param float $iscritical whether is critical or not
     * @return $this
     */
    public function setIscritical($iscritical)
    {
        $this->container['iscritical'] = $iscritical;

        return $this;
    }

    /**
     * Gets autoupdate
     * @return float
     */
    public function getAutoupdate()
    {
        return $this->container['autoupdate'];
    }

    /**
     * Sets autoupdate
     * @param float $autoupdate whether autoupdate is available or not
     * @return $this
     */
    public function setAutoupdate($autoupdate)
    {
        $this->container['autoupdate'] = $autoupdate;

        return $this;
    }

    /**
     * Gets needspluginupdate
     * @return float
     */
    public function getNeedspluginupdate()
    {
        return $this->container['needspluginupdate'];
    }

    /**
     * Sets needspluginupdate
     * @param float $needspluginupdate whether it needs plugin update or no
     * @return $this
     */
    public function setNeedspluginupdate($needspluginupdate)
    {
        $this->container['needspluginupdate'] = $needspluginupdate;

        return $this;
    }

    /**
     * Gets iscriticalpluginupdate
     * @return float
     */
    public function getIscriticalpluginupdate()
    {
        return $this->container['iscriticalpluginupdate'];
    }

    /**
     * Sets iscriticalpluginupdate
     * @param float $iscriticalpluginupdate whether is critical to update plugin
     * @return $this
     */
    public function setIscriticalpluginupdate($iscriticalpluginupdate)
    {
        $this->container['iscriticalpluginupdate'] = $iscriticalpluginupdate;

        return $this;
    }

    /**
     * Gets currentprofile
     * @return string
     */
    public function getCurrentprofile()
    {
        return $this->container['currentprofile'];
    }

    /**
     * Sets currentprofile
     * @param string $currentprofile profile name
     * @return $this
     */
    public function setCurrentprofile($currentprofile)
    {
        $this->container['currentprofile'] = $currentprofile;

        return $this;
    }

    /**
     * Gets numpeersonline
     * @return float
     */
    public function getNumpeersonline()
    {
        return $this->container['numpeersonline'];
    }

    /**
     * Sets numpeersonline
     * @param float $numpeersonline set to 0
     * @return $this
     */
    public function setNumpeersonline($numpeersonline)
    {
        $this->container['numpeersonline'] = $numpeersonline;

        return $this;
    }

    /**
     * Gets uptime
     * @return float
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     * @param float $uptime set to 0
     * @return $this
     */
    public function setUptime($uptime)
    {
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets httpport
     * @return float
     */
    public function getHttpport()
    {
        return $this->container['httpport'];
    }

    /**
     * Sets httpport
     * @param float $httpport http port supported buy the service, eg:80
     * @return $this
     */
    public function setHttpport($httpport)
    {
        $this->container['httpport'] = $httpport;

        return $this;
    }

    /**
     * Gets udpport
     * @return float
     */
    public function getUdpport()
    {
        return $this->container['udpport'];
    }

    /**
     * Sets udpport
     * @param float $udpport set to 0
     * @return $this
     */
    public function setUdpport($udpport)
    {
        $this->container['udpport'] = $udpport;

        return $this;
    }

    /**
     * Gets isonline
     * @return float
     */
    public function getIsonline()
    {
        return $this->container['isonline'];
    }

    /**
     * Sets isonline
     * @param float $isonline whether the profile is online or not
     * @return $this
     */
    public function setIsonline($isonline)
    {
        $this->container['isonline'] = $isonline;

        return $this;
    }

    /**
     * Gets relayactive
     * @return float
     */
    public function getRelayactive()
    {
        return $this->container['relayactive'];
    }

    /**
     * Sets relayactive
     * @param float $relayactive whether the relay is active or not
     * @return $this
     */
    public function setRelayactive($relayactive)
    {
        $this->container['relayactive'] = $relayactive;

        return $this;
    }

    /**
     * Gets relayishttps
     * @return float
     */
    public function getRelayishttps()
    {
        return $this->container['relayishttps'];
    }

    /**
     * Sets relayishttps
     * @param float $relayishttps whether relay is https or not
     * @return $this
     */
    public function setRelayishttps($relayishttps)
    {
        $this->container['relayishttps'] = $relayishttps;

        return $this;
    }

    /**
     * Gets savepassword
     * @return float
     */
    public function getSavepassword()
    {
        return $this->container['savepassword'];
    }

    /**
     * Sets savepassword
     * @param float $savepassword whether it will save password or not
     * @return $this
     */
    public function setSavepassword($savepassword)
    {
        $this->container['savepassword'] = $savepassword;

        return $this;
    }

    /**
     * Gets networkenabled
     * @return float
     */
    public function getNetworkenabled()
    {
        return $this->container['networkenabled'];
    }

    /**
     * Sets networkenabled
     * @param float $networkenabled whether network is enabled or not
     * @return $this
     */
    public function setNetworkenabled($networkenabled)
    {
        $this->container['networkenabled'] = $networkenabled;

        return $this;
    }

    /**
     * Gets httpaccess
     * @return string
     */
    public function getHttpaccess()
    {
        return $this->container['httpaccess'];
    }

    /**
     * Sets httpaccess
     * @param string $httpaccess specify httpaccess eg:all
     * @return $this
     */
    public function setHttpaccess($httpaccess)
    {
        $this->container['httpaccess'] = $httpaccess;

        return $this;
    }

    /**
     * Gets unreadmessages
     * @return float
     */
    public function getUnreadmessages()
    {
        return $this->container['unreadmessages'];
    }

    /**
     * Sets unreadmessages
     * @param float $unreadmessages whether any un-read message are there or not
     * @return $this
     */
    public function setUnreadmessages($unreadmessages)
    {
        $this->container['unreadmessages'] = $unreadmessages;

        return $this;
    }

    /**
     * Gets newinvitations
     * @return float
     */
    public function getNewinvitations()
    {
        return $this->container['newinvitations'];
    }

    /**
     * Sets newinvitations
     * @param float $newinvitations whether the system has any new invitation
     * @return $this
     */
    public function setNewinvitations($newinvitations)
    {
        $this->container['newinvitations'] = $newinvitations;

        return $this;
    }

    /**
     * Gets numgroups
     * @return float
     */
    public function getNumgroups()
    {
        return $this->container['numgroups'];
    }

    /**
     * Sets numgroups
     * @param float $numgroups specify the number of groups
     * @return $this
     */
    public function setNumgroups($numgroups)
    {
        $this->container['numgroups'] = $numgroups;

        return $this;
    }

    /**
     * Gets remoteaccess
     * @return float
     */
    public function getRemoteaccess()
    {
        return $this->container['remoteaccess'];
    }

    /**
     * Sets remoteaccess
     * @param float $remoteaccess whether it can be remote accessed or not
     * @return $this
     */
    public function setRemoteaccess($remoteaccess)
    {
        $this->container['remoteaccess'] = $remoteaccess;

        return $this;
    }

    /**
     * Gets isremote
     * @return float
     */
    public function getIsremote()
    {
        return $this->container['isremote'];
    }

    /**
     * Sets isremote
     * @param float $isremote whether the system is currently remote or no
     * @return $this
     */
    public function setIsremote($isremote)
    {
        $this->container['isremote'] = $isremote;

        return $this;
    }

    /**
     * Gets upnpenabled
     * @return float
     */
    public function getUpnpenabled()
    {
        return $this->container['upnpenabled'];
    }

    /**
     * Sets upnpenabled
     * @param float $upnpenabled if enabled 1 else 0
     * @return $this
     */
    public function setUpnpenabled($upnpenabled)
    {
        $this->container['upnpenabled'] = $upnpenabled;

        return $this;
    }

    /**
     * Gets upnpactive
     * @return float
     */
    public function getUpnpactive()
    {
        return $this->container['upnpactive'];
    }

    /**
     * Sets upnpactive
     * @param float $upnpactive if active 1 else 0
     * @return $this
     */
    public function setUpnpactive($upnpactive)
    {
        $this->container['upnpactive'] = $upnpactive;

        return $this;
    }

    /**
     * Gets servertoken
     * @return string
     */
    public function getServertoken()
    {
        return $this->container['servertoken'];
    }

    /**
     * Sets servertoken
     * @param string $servertoken server token number
     * @return $this
     */
    public function setServertoken($servertoken)
    {
        $this->container['servertoken'] = $servertoken;

        return $this;
    }

    /**
     * Gets urlprefix
     * @return string
     */
    public function getUrlprefix()
    {
        return $this->container['urlprefix'];
    }

    /**
     * Sets urlprefix
     * @param string $urlprefix it is always tonidoid.com
     * @return $this
     */
    public function setUrlprefix($urlprefix)
    {
        $this->container['urlprefix'] = $urlprefix;

        return $this;
    }

    /**
     * Gets logdir
     * @return string
     */
    public function getLogdir()
    {
        return $this->container['logdir'];
    }

    /**
     * Sets logdir
     * @param string $logdir log directory
     * @return $this
     */
    public function setLogdir($logdir)
    {
        $this->container['logdir'] = $logdir;

        return $this;
    }

    /**
     * Gets ishttps
     * @return float
     */
    public function getIshttps()
    {
        return $this->container['ishttps'];
    }

    /**
     * Sets ishttps
     * @param float $ishttps whether is https or no
     * @return $this
     */
    public function setIshttps($ishttps)
    {
        $this->container['ishttps'] = $ishttps;

        return $this;
    }

    /**
     * Gets privateip
     * @return float
     */
    public function getPrivateip()
    {
        return $this->container['privateip'];
    }

    /**
     * Sets privateip
     * @param float $privateip specify private ip
     * @return $this
     */
    public function setPrivateip($privateip)
    {
        $this->container['privateip'] = $privateip;

        return $this;
    }

    /**
     * Gets serverurl
     * @return string
     */
    public function getServerurl()
    {
        return $this->container['serverurl'];
    }

    /**
     * Sets serverurl
     * @param string $serverurl server url of the company
     * @return $this
     */
    public function setServerurl($serverurl)
    {
        $this->container['serverurl'] = $serverurl;

        return $this;
    }

    /**
     * Gets cansearchotherusers
     * @return float
     */
    public function getCansearchotherusers()
    {
        return $this->container['cansearchotherusers'];
    }

    /**
     * Sets cansearchotherusers
     * @param float $cansearchotherusers whether can search other users or no
     * @return $this
     */
    public function setCansearchotherusers($cansearchotherusers)
    {
        $this->container['cansearchotherusers'] = $cansearchotherusers;

        return $this;
    }

    /**
     * Gets licensestring
     * @return string
     */
    public function getLicensestring()
    {
        return $this->container['licensestring'];
    }

    /**
     * Sets licensestring
     * @param string $licensestring license string of the system
     * @return $this
     */
    public function setLicensestring($licensestring)
    {
        $this->container['licensestring'] = $licensestring;

        return $this;
    }

    /**
     * Gets licensedto
     * @return string
     */
    public function getLicensedto()
    {
        return $this->container['licensedto'];
    }

    /**
     * Sets licensedto
     * @param string $licensedto license to deatails
     * @return $this
     */
    public function setLicensedto($licensedto)
    {
        $this->container['licensedto'] = $licensedto;

        return $this;
    }

    /**
     * Gets licensedtill
     * @return float
     */
    public function getLicensedtill()
    {
        return $this->container['licensedtill'];
    }

    /**
     * Sets licensedtill
     * @param float $licensedtill expiry date of license
     * @return $this
     */
    public function setLicensedtill($licensedtill)
    {
        $this->container['licensedtill'] = $licensedtill;

        return $this;
    }

    /**
     * Gets continueupdate
     * @return float
     */
    public function getContinueupdate()
    {
        return $this->container['continueupdate'];
    }

    /**
     * Sets continueupdate
     * @param float $continueupdate whether to continueupdate or no
     * @return $this
     */
    public function setContinueupdate($continueupdate)
    {
        $this->container['continueupdate'] = $continueupdate;

        return $this;
    }

    /**
     * Gets storageusage
     * @return string
     */
    public function getStorageusage()
    {
        return $this->container['storageusage'];
    }

    /**
     * Sets storageusage
     * @param string $storageusage used storage details
     * @return $this
     */
    public function setStorageusage($storageusage)
    {
        $this->container['storageusage'] = $storageusage;

        return $this;
    }

    /**
     * Gets sizelimit
     * @return string
     */
    public function getSizelimit()
    {
        return $this->container['sizelimit'];
    }

    /**
     * Sets sizelimit
     * @param string $sizelimit specifies the size limit
     * @return $this
     */
    public function setSizelimit($sizelimit)
    {
        $this->container['sizelimit'] = $sizelimit;

        return $this;
    }

    /**
     * Gets usagepercent
     * @return float
     */
    public function getUsagepercent()
    {
        return $this->container['usagepercent'];
    }

    /**
     * Sets usagepercent
     * @param float $usagepercent specifies the usage percent
     * @return $this
     */
    public function setUsagepercent($usagepercent)
    {
        $this->container['usagepercent'] = $usagepercent;

        return $this;
    }

    /**
     * Gets availablestorage
     * @return float
     */
    public function getAvailablestorage()
    {
        return $this->container['availablestorage'];
    }

    /**
     * Sets availablestorage
     * @param float $availablestorage specifies available storage space
     * @return $this
     */
    public function setAvailablestorage($availablestorage)
    {
        $this->container['availablestorage'] = $availablestorage;

        return $this;
    }

    /**
     * Gets clouduserstatus
     * @return float
     */
    public function getClouduserstatus()
    {
        return $this->container['clouduserstatus'];
    }

    /**
     * Sets clouduserstatus
     * @param float $clouduserstatus whether is cloud user status or no
     * @return $this
     */
    public function setClouduserstatus($clouduserstatus)
    {
        $this->container['clouduserstatus'] = $clouduserstatus;

        return $this;
    }

    /**
     * Gets showsharedfiles
     * @return float
     */
    public function getShowsharedfiles()
    {
        return $this->container['showsharedfiles'];
    }

    /**
     * Sets showsharedfiles
     * @param float $showsharedfiles whether to show shared files or no
     * @return $this
     */
    public function setShowsharedfiles($showsharedfiles)
    {
        $this->container['showsharedfiles'] = $showsharedfiles;

        return $this;
    }

    /**
     * Gets showfavorites
     * @return float
     */
    public function getShowfavorites()
    {
        return $this->container['showfavorites'];
    }

    /**
     * Sets showfavorites
     * @param float $showfavorites whether to show favorites or not
     * @return $this
     */
    public function setShowfavorites($showfavorites)
    {
        $this->container['showfavorites'] = $showfavorites;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email email-id of the profile
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets authtype
     * @return string
     */
    public function getAuthtype()
    {
        return $this->container['authtype'];
    }

    /**
     * Sets authtype
     * @param string $authtype authtype is set to default/ad/ldap
     * @return $this
     */
    public function setAuthtype($authtype)
    {
        $this->container['authtype'] = $authtype;

        return $this;
    }

    /**
     * Gets userstatus
     * @return string
     */
    public function getUserstatus()
    {
        return $this->container['userstatus'];
    }

    /**
     * Sets userstatus
     * @param string $userstatus user status can be set to full/guest/disabled
     * @return $this
     */
    public function setUserstatus($userstatus)
    {
        $this->container['userstatus'] = $userstatus;

        return $this;
    }

    /**
     * Gets rmclevel
     * @return float
     */
    public function getRmclevel()
    {
        return $this->container['rmclevel'];
    }

    /**
     * Sets rmclevel
     * @param float $rmclevel rmc level is set 1
     * @return $this
     */
    public function setRmclevel($rmclevel)
    {
        $this->container['rmclevel'] = $rmclevel;

        return $this;
    }

    /**
     * Gets mediasync
     * @return float
     */
    public function getMediasync()
    {
        return $this->container['mediasync'];
    }

    /**
     * Sets mediasync
     * @param float $mediasync media sync level is specified
     * @return $this
     */
    public function setMediasync($mediasync)
    {
        $this->container['mediasync'] = $mediasync;

        return $this;
    }

    /**
     * Gets mediasyncstorepath
     * @return string
     */
    public function getMediasyncstorepath()
    {
        return $this->container['mediasyncstorepath'];
    }

    /**
     * Sets mediasyncstorepath
     * @param string $mediasyncstorepath specifies storage sync path
     * @return $this
     */
    public function setMediasyncstorepath($mediasyncstorepath)
    {
        $this->container['mediasyncstorepath'] = $mediasyncstorepath;

        return $this;
    }

    /**
     * Gets syncapilevel
     * @return float
     */
    public function getSyncapilevel()
    {
        return $this->container['syncapilevel'];
    }

    /**
     * Sets syncapilevel
     * @param float $syncapilevel sync api level is set 2
     * @return $this
     */
    public function setSyncapilevel($syncapilevel)
    {
        $this->container['syncapilevel'] = $syncapilevel;

        return $this;
    }

    /**
     * Gets allownetworkfoldersync
     * @return float
     */
    public function getAllownetworkfoldersync()
    {
        return $this->container['allownetworkfoldersync'];
    }

    /**
     * Sets allownetworkfoldersync
     * @param float $allownetworkfoldersync whether to allow network folder sync or not
     * @return $this
     */
    public function setAllownetworkfoldersync($allownetworkfoldersync)
    {
        $this->container['allownetworkfoldersync'] = $allownetworkfoldersync;

        return $this;
    }

    /**
     * Gets allowbackup
     * @return float
     */
    public function getAllowbackup()
    {
        return $this->container['allowbackup'];
    }

    /**
     * Sets allowbackup
     * @param float $allowbackup whether to allow backup or not
     * @return $this
     */
    public function setAllowbackup($allowbackup)
    {
        $this->container['allowbackup'] = $allowbackup;

        return $this;
    }

    /**
     * Gets disablemyfiles
     * @return float
     */
    public function getDisablemyfiles()
    {
        return $this->container['disablemyfiles'];
    }

    /**
     * Sets disablemyfiles
     * @param float $disablemyfiles whether to disable my files or not
     * @return $this
     */
    public function setDisablemyfiles($disablemyfiles)
    {
        $this->container['disablemyfiles'] = $disablemyfiles;

        return $this;
    }

    /**
     * Gets networkfoldername
     * @return string
     */
    public function getNetworkfoldername()
    {
        return $this->container['networkfoldername'];
    }

    /**
     * Sets networkfoldername
     * @param string $networkfoldername specfies network folder name
     * @return $this
     */
    public function setNetworkfoldername($networkfoldername)
    {
        $this->container['networkfoldername'] = $networkfoldername;

        return $this;
    }

    /**
     * Gets disableactivity
     * @return string
     */
    public function getDisableactivity()
    {
        return $this->container['disableactivity'];
    }

    /**
     * Sets disableactivity
     * @param string $disableactivity 1|0 - activity panel disabled or enabled
     * @return $this
     */
    public function setDisableactivity($disableactivity)
    {
        $this->container['disableactivity'] = $disableactivity;

        return $this;
    }

    /**
     * Gets disablelock
     * @return string
     */
    public function getDisablelock()
    {
        return $this->container['disablelock'];
    }

    /**
     * Sets disablelock
     * @param string $disablelock 1|0 - locking feature disabled or enabled
     * @return $this
     */
    public function setDisablelock($disablelock)
    {
        $this->container['disablelock'] = $disablelock;

        return $this;
    }

    /**
     * Gets extendedsearch
     * @return string
     */
    public function getExtendedsearch()
    {
        return $this->container['extendedsearch'];
    }

    /**
     * Sets extendedsearch
     * @param string $extendedsearch 1|0 - context search feature disabled or enabled
     * @return $this
     */
    public function setExtendedsearch($extendedsearch)
    {
        $this->container['extendedsearch'] = $extendedsearch;

        return $this;
    }

    /**
     * Gets collapseactivity
     * @return string
     */
    public function getCollapseactivity()
    {
        return $this->container['collapseactivity'];
    }

    /**
     * Sets collapseactivity
     * @param string $collapseactivity 1|0 - activity panel hidden or visible
     * @return $this
     */
    public function setCollapseactivity($collapseactivity)
    {
        $this->container['collapseactivity'] = $collapseactivity;

        return $this;
    }

    /**
     * Gets uploadrestrictions
     * @return string
     */
    public function getUploadrestrictions()
    {
        return $this->container['uploadrestrictions'];
    }

    /**
     * Sets uploadrestrictions
     * @param string $uploadrestrictions specifes the file extension type that is upload restricted
     * @return $this
     */
    public function setUploadrestrictions($uploadrestrictions)
    {
        $this->container['uploadrestrictions'] = $uploadrestrictions;

        return $this;
    }

    /**
     * Gets disabledotdot
     * @return string
     */
    public function getDisabledotdot()
    {
        return $this->container['disabledotdot'];
    }

    /**
     * Sets disabledotdot
     * @param string $disabledotdot 1|0 - uploading or scanning files with &quot;..&quot; disabled or enabled
     * @return $this
     */
    public function setDisabledotdot($disabledotdot)
    {
        $this->container['disabledotdot'] = $disabledotdot;

        return $this;
    }

    /**
     * Gets disablemusic
     * @return string
     */
    public function getDisablemusic()
    {
        return $this->container['disablemusic'];
    }

    /**
     * Sets disablemusic
     * @param string $disablemusic 1|0 - music playback disabled or enabled
     * @return $this
     */
    public function setDisablemusic($disablemusic)
    {
        $this->container['disablemusic'] = $disablemusic;

        return $this;
    }

    /**
     * Gets docthumbsenabled
     * @return string
     */
    public function getDocthumbsenabled()
    {
        return $this->container['docthumbsenabled'];
    }

    /**
     * Sets docthumbsenabled
     * @param string $docthumbsenabled 1|0 - thumbnail image preview enabled or disabled for office documents such as doc,docx,pdf etc.,
     * @return $this
     */
    public function setDocthumbsenabled($docthumbsenabled)
    {
        $this->container['docthumbsenabled'] = $docthumbsenabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * GetaclResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FileCloud API
 *
 * The FileCloud APIs provide developers with the tools necessary to build a variety of apps and clients. This allows extensibility and integration of FileCloud with your existing enterprise systems and frameworks. FileCloud developer API is simple to use and integrate.
 *
 * OpenAPI spec version: 14.0.0.34184
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetaclResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetaclResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetaclResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aclid' => 'string',
        'createddate' => 'string',
        'createdts' => 'string',
        'path' => 'string',
        'inherit' => 'string',
        'usercount' => 'string',
        'groupcount' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'aclid' => 'aclid',
        'createddate' => 'createddate',
        'createdts' => 'createdts',
        'path' => 'path',
        'inherit' => 'inherit',
        'usercount' => 'usercount',
        'groupcount' => 'groupcount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'aclid' => 'setAclid',
        'createddate' => 'setCreateddate',
        'createdts' => 'setCreatedts',
        'path' => 'setPath',
        'inherit' => 'setInherit',
        'usercount' => 'setUsercount',
        'groupcount' => 'setGroupcount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'aclid' => 'getAclid',
        'createddate' => 'getCreateddate',
        'createdts' => 'getCreatedts',
        'path' => 'getPath',
        'inherit' => 'getInherit',
        'usercount' => 'getUsercount',
        'groupcount' => 'getGroupcount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aclid'] = isset($data['aclid']) ? $data['aclid'] : null;
        $this->container['createddate'] = isset($data['createddate']) ? $data['createddate'] : null;
        $this->container['createdts'] = isset($data['createdts']) ? $data['createdts'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['inherit'] = isset($data['inherit']) ? $data['inherit'] : null;
        $this->container['usercount'] = isset($data['usercount']) ? $data['usercount'] : null;
        $this->container['groupcount'] = isset($data['groupcount']) ? $data['groupcount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['aclid'] === null) {
            $invalid_properties[] = "'aclid' can't be null";
        }
        if ($this->container['createddate'] === null) {
            $invalid_properties[] = "'createddate' can't be null";
        }
        if ($this->container['createdts'] === null) {
            $invalid_properties[] = "'createdts' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalid_properties[] = "'path' can't be null";
        }
        if ($this->container['inherit'] === null) {
            $invalid_properties[] = "'inherit' can't be null";
        }
        if ($this->container['usercount'] === null) {
            $invalid_properties[] = "'usercount' can't be null";
        }
        if ($this->container['groupcount'] === null) {
            $invalid_properties[] = "'groupcount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['aclid'] === null) {
            return false;
        }
        if ($this->container['createddate'] === null) {
            return false;
        }
        if ($this->container['createdts'] === null) {
            return false;
        }
        if ($this->container['path'] === null) {
            return false;
        }
        if ($this->container['inherit'] === null) {
            return false;
        }
        if ($this->container['usercount'] === null) {
            return false;
        }
        if ($this->container['groupcount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets aclid
     * @return string
     */
    public function getAclid()
    {
        return $this->container['aclid'];
    }

    /**
     * Sets aclid
     * @param string $aclid unique id
     * @return $this
     */
    public function setAclid($aclid)
    {
        $this->container['aclid'] = $aclid;

        return $this;
    }

    /**
     * Gets createddate
     * @return string
     */
    public function getCreateddate()
    {
        return $this->container['createddate'];
    }

    /**
     * Sets createddate
     * @param string $createddate created date
     * @return $this
     */
    public function setCreateddate($createddate)
    {
        $this->container['createddate'] = $createddate;

        return $this;
    }

    /**
     * Gets createdts
     * @return string
     */
    public function getCreatedts()
    {
        return $this->container['createdts'];
    }

    /**
     * Sets createdts
     * @param string $createdts created timestamp
     * @return $this
     */
    public function setCreatedts($createdts)
    {
        $this->container['createdts'] = $createdts;

        return $this;
    }

    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path path specified
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets inherit
     * @return string
     */
    public function getInherit()
    {
        return $this->container['inherit'];
    }

    /**
     * Sets inherit
     * @param string $inherit 0 | 1 disabled / enabled inheritance
     * @return $this
     */
    public function setInherit($inherit)
    {
        $this->container['inherit'] = $inherit;

        return $this;
    }

    /**
     * Gets usercount
     * @return string
     */
    public function getUsercount()
    {
        return $this->container['usercount'];
    }

    /**
     * Sets usercount
     * @param string $usercount number of users given security permissions
     * @return $this
     */
    public function setUsercount($usercount)
    {
        $this->container['usercount'] = $usercount;

        return $this;
    }

    /**
     * Gets groupcount
     * @return string
     */
    public function getGroupcount()
    {
        return $this->container['groupcount'];
    }

    /**
     * Sets groupcount
     * @param string $groupcount number of groups given security permissions
     * @return $this
     */
    public function setGroupcount($groupcount)
    {
        $this->container['groupcount'] = $groupcount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
